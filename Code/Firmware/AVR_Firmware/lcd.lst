   1               		.file	"lcd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	lcdConfig
  12               	lcdConfig:
  13               	.LFB1:
  14               		.file 1 "lcd.c"
   1:lcd.c         **** /***************************************************************************
   2:lcd.c         **** lcd.c
   3:lcd.c         **** 
   4:lcd.c         **** LCD hardware support file for the serial graphical LCD backpack project.
   5:lcd.c         ****  This is the API for the LCD; external modules should call the functions
   6:lcd.c         ****  provided here rather than calling the device drivers directly. Provides for
   7:lcd.c         ****  font rendering, sprite rendering, drawing lines, circles, points and boxes,
   8:lcd.c         ****  and erasing blocks of arbitrary size.
   9:lcd.c         **** 
  10:lcd.c         **** 02 May 2013 - Mike Hord, SparkFun Electronics
  11:lcd.c         **** 
  12:lcd.c         **** This code is released under the Creative Commons Attribution Share-Alike 3.0
  13:lcd.c         ****  license. You are free to reuse, remix, or redistribute it as you see fit,
  14:lcd.c         ****  so long as you provide attribution to SparkFun Electronics.
  15:lcd.c         **** 
  16:lcd.c         **** ***************************************************************************/
  17:lcd.c         **** 
  18:lcd.c         **** #include <avr/io.h>
  19:lcd.c         **** #include <avr/pgmspace.h> 
  20:lcd.c         **** #include "glcdbp.h"
  21:lcd.c         **** #include "lcd.h"
  22:lcd.c         **** #include "ks0108b.h"
  23:lcd.c         **** #include "serial.h"
  24:lcd.c         **** #include "t6963.h"
  25:lcd.c         **** 
  26:lcd.c         **** // These variables are defined in glcdbp.c, and allow us to take actions based
  27:lcd.c         **** //  on the type of display and the operating mode (reverse or normal).
  28:lcd.c         **** extern enum DISPLAY_TYPE display;
  29:lcd.c         **** extern volatile uint8_t reverse;
  30:lcd.c         **** 
  31:lcd.c         **** // These values allow us to emulate a terminal of arbitrary size. cursorPos is
  32:lcd.c         **** //  the x,y pixel of the upper left corner of where the current pixel will be
  33:lcd.c         **** //  drawn; textOrigin is the upper left corner of the region of the screen that
  34:lcd.c         **** //  text will be drawn within. The right and bottom edges of that region are
  35:lcd.c         **** //  bounded by the edge of the display.
  36:lcd.c         **** uint8_t  cursorPos[] = {0,0};
  37:lcd.c         **** uint8_t  textOrigin[] = {0,0};
  38:lcd.c         **** uint16_t textLength = 0; // Number of characters typed since last time we set
  39:lcd.c         ****                          //  cursorPos to textOrigin. Facilitates backspace.
  40:lcd.c         **** 
  41:lcd.c         **** // Because we have two different types of display, it's nice to be able to 
  42:lcd.c         **** //  not hard-code the dimensions in cases where we may want to set limits or
  43:lcd.c         **** //  find the center of the screen.
  44:lcd.c         **** uint8_t  xDim = 128;
  45:lcd.c         **** uint8_t  yDim = 64;
  46:lcd.c         **** 
  47:lcd.c         **** // Configure functions for the two display types. The details are in the
  48:lcd.c         **** //  appropriate driver files.
  49:lcd.c         **** void lcdConfig(void)
  50:lcd.c         **** {
  15               		.loc 1 50 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  51:lcd.c         ****   if (display == SMALL)
  21               		.loc 1 51 0
  22 0000 8091 0000 		lds r24,display
  23 0004 8111      		cpse r24,__zero_reg__
  24 0006 00C0      		rjmp .L2
  52:lcd.c         ****   {
  53:lcd.c         ****     ks0108bReset();
  25               		.loc 1 53 0
  26 0008 0E94 0000 		call ks0108bReset
  27               	.LVL0:
  54:lcd.c         ****     ks0108bDisplayOn();
  28               		.loc 1 54 0
  29 000c 0E94 0000 		call ks0108bDisplayOn
  30               	.LVL1:
  55:lcd.c         ****     ks0108bClear();
  31               		.loc 1 55 0
  32 0010 0E94 0000 		call ks0108bClear
  33               	.LVL2:
  56:lcd.c         ****     xDim = 128;
  34               		.loc 1 56 0
  35 0014 80E8      		ldi r24,lo8(-128)
  36 0016 8093 0000 		sts xDim,r24
  57:lcd.c         ****     yDim = 64;
  37               		.loc 1 57 0
  38 001a 80E4      		ldi r24,lo8(64)
  39 001c 00C0      		rjmp .L4
  40               	.L2:
  58:lcd.c         ****   }
  59:lcd.c         ****   else
  60:lcd.c         ****   {
  61:lcd.c         ****     t6963DisplayInit();
  41               		.loc 1 61 0
  42 001e 0E94 0000 		call t6963DisplayInit
  43               	.LVL3:
  62:lcd.c         ****     xDim = 160;
  44               		.loc 1 62 0
  45 0022 80EA      		ldi r24,lo8(-96)
  46 0024 8093 0000 		sts xDim,r24
  63:lcd.c         ****     yDim = 128;
  47               		.loc 1 63 0
  48 0028 80E8      		ldi r24,lo8(-128)
  49               	.L4:
  50 002a 8093 0000 		sts yDim,r24
  51 002e 0895      		ret
  52               		.cfi_endproc
  53               	.LFE1:
  55               	.global	lcdClearScreen
  57               	lcdClearScreen:
  58               	.LFB2:
  64:lcd.c         ****   }
  65:lcd.c         **** }
  66:lcd.c         **** 
  67:lcd.c         **** // Reset our text mode, then call the driver specific clear screen command.
  68:lcd.c         **** void lcdClearScreen(void)
  69:lcd.c         **** {
  59               		.loc 1 69 0
  60               		.cfi_startproc
  61               	/* prologue: function */
  62               	/* frame size = 0 */
  63               	/* stack size = 0 */
  64               	.L__stack_usage = 0
  70:lcd.c         ****   cursorPos[0] = textOrigin[0];
  65               		.loc 1 70 0
  66 0030 8091 0000 		lds r24,textOrigin
  67 0034 8093 0000 		sts cursorPos,r24
  71:lcd.c         ****   cursorPos[1] = textOrigin[1];
  68               		.loc 1 71 0
  69 0038 8091 0000 		lds r24,textOrigin+1
  70 003c 8093 0000 		sts cursorPos+1,r24
  72:lcd.c         ****   textLength = 0;
  71               		.loc 1 72 0
  72 0040 1092 0000 		sts textLength+1,__zero_reg__
  73 0044 1092 0000 		sts textLength,__zero_reg__
  73:lcd.c         ****   if (display == SMALL)	ks0108bClear();
  74               		.loc 1 73 0
  75 0048 8091 0000 		lds r24,display
  76 004c 8111      		cpse r24,__zero_reg__
  77 004e 00C0      		rjmp .L7
  78               		.loc 1 73 0 is_stmt 0 discriminator 1
  79 0050 0C94 0000 		jmp ks0108bClear
  80               	.LVL4:
  81               	.L7:
  74:lcd.c         ****   else t6963Clear();
  82               		.loc 1 74 0 is_stmt 1
  83 0054 0C94 0000 		jmp t6963Clear
  84               	.LVL5:
  85               		.cfi_endproc
  86               	.LFE2:
  88               	.global	lcdDrawPixel
  90               	lcdDrawPixel:
  91               	.LFB10:
  75:lcd.c         **** }
  76:lcd.c         **** 
  77:lcd.c         ****  // Draws a line between two points p1(p1x,p1y) and p2(p2x,p2y).
  78:lcd.c         ****  // This function is based on the Bresenham's line algorithm and is highly 
  79:lcd.c         ****  // optimized to be able to draw lines very quickly. There is no floating point 
  80:lcd.c         ****  // arithmetic nor multiplications nor divisions involved. Only addition, 
  81:lcd.c         ****  // subtraction and bit shifting are used. 
  82:lcd.c         **** 
  83:lcd.c         ****  // Note that you have to define your own customized lcdDrawPixel(x,y) function, 
  84:lcd.c         ****  // which essentially lights a pixel on the screen.
  85:lcd.c         ****  
  86:lcd.c         ****  // This code adopted from code originally posted to codekeep.net
  87:lcd.c         ****  //	 (http://www.codekeep.net/snippets/e39b2d9e-0843-4405-8e31-44e212ca1c45.aspx)
  88:lcd.c         ****  //	 by Woon Khang Tang on 1/29/2009.
  89:lcd.c         ****  
  90:lcd.c         **** void lcdDrawLine(uint8_t p1x, uint8_t p1y, uint8_t p2x, uint8_t p2y, PIX_VAL pixel)
  91:lcd.c         **** {
  92:lcd.c         ****     int16_t F, x, y;
  93:lcd.c         **** 
  94:lcd.c         ****     if (p1x > p2x)  // Swap points if p1 is on the right of p2
  95:lcd.c         ****     {
  96:lcd.c         ****       x = p1x;
  97:lcd.c         ****       p1x = p2x;
  98:lcd.c         ****       p2x = x;
  99:lcd.c         ****       y = p1y;
 100:lcd.c         ****       p1y = p2y;
 101:lcd.c         ****       p2y = y;
 102:lcd.c         ****     }
 103:lcd.c         **** 
 104:lcd.c         ****     // Handle trivial cases separately for algorithm speed up.
 105:lcd.c         ****     // Trivial case 1: m = +/-INF (Vertical line)
 106:lcd.c         ****     if (p1x == p2x)
 107:lcd.c         ****     {
 108:lcd.c         ****         if (p1y > p2y)  // Swap y-coordinates if p1 is above p2
 109:lcd.c         ****         {
 110:lcd.c         ****           y = p1y;
 111:lcd.c         ****           p1y = p2y;
 112:lcd.c         ****           p2y = y;
 113:lcd.c         ****         }
 114:lcd.c         ****         x = p1x;
 115:lcd.c         ****         y = p1y;
 116:lcd.c         ****         while (y <= p2y)
 117:lcd.c         ****         {
 118:lcd.c         ****           lcdDrawPixel(x, y, ON);
 119:lcd.c         ****           y++;
 120:lcd.c         ****         }
 121:lcd.c         ****         return;
 122:lcd.c         ****     }
 123:lcd.c         ****     // Trivial case 2: m = 0 (Horizontal line)
 124:lcd.c         ****     else if (p1y == p2y)
 125:lcd.c         ****     {
 126:lcd.c         ****         x = p1x;
 127:lcd.c         ****         y = p1y;
 128:lcd.c         **** 
 129:lcd.c         ****         while (x <= p2x)
 130:lcd.c         ****         {
 131:lcd.c         ****           lcdDrawPixel(x, y, ON);
 132:lcd.c         ****           x++;
 133:lcd.c         ****         }
 134:lcd.c         ****         return;
 135:lcd.c         ****     }
 136:lcd.c         **** 
 137:lcd.c         ****     int16_t dy            = p2y - p1y;  // y-increment from p1 to p2
 138:lcd.c         ****     int16_t dx            = p2x - p1x;  // x-increment from p1 to p2
 139:lcd.c         ****     int16_t dy2           = (dy << 1);  // dy << 1 == 2*dy
 140:lcd.c         ****     int16_t dx2           = (dx << 1);
 141:lcd.c         ****     int16_t dy2_minus_dx2 = dy2 - dx2;  // precompute constant for speed up
 142:lcd.c         ****     int16_t dy2_plus_dx2  = dy2 + dx2;
 143:lcd.c         **** 
 144:lcd.c         ****     if (dy >= 0)    // m >= 0
 145:lcd.c         ****     {
 146:lcd.c         ****         // Case 1: 0 <= m <= 1 (Original case)
 147:lcd.c         ****         if (dy <= dx)   
 148:lcd.c         ****         {
 149:lcd.c         **** 		
 150:lcd.c         ****             F = dy2 - dx;    // initial F
 151:lcd.c         **** 
 152:lcd.c         ****             x = p1x;
 153:lcd.c         ****             y = p1y;
 154:lcd.c         ****             while (x <= p2x)
 155:lcd.c         ****             {
 156:lcd.c         ****                 lcdDrawPixel(x, y, ON);
 157:lcd.c         ****                 if (F <= 0)
 158:lcd.c         ****                 {
 159:lcd.c         ****                     F += dy2;
 160:lcd.c         ****                 }
 161:lcd.c         ****                 else
 162:lcd.c         ****                 {
 163:lcd.c         ****                     y++;
 164:lcd.c         ****                     F += dy2_minus_dx2;
 165:lcd.c         ****                 }
 166:lcd.c         ****                 x++;
 167:lcd.c         ****             }
 168:lcd.c         ****         }
 169:lcd.c         ****         // Case 2: 1 < m < INF (Mirror about y=x line
 170:lcd.c         ****         // replace all dy by dx and dx by dy)
 171:lcd.c         ****         else
 172:lcd.c         ****         {
 173:lcd.c         ****             F = dx2 - dy;    // initial F
 174:lcd.c         **** 
 175:lcd.c         ****             y = p1y;
 176:lcd.c         ****             x = p1x;
 177:lcd.c         ****             while (y <= p2y)
 178:lcd.c         ****             {
 179:lcd.c         ****                 lcdDrawPixel(x, y, ON);
 180:lcd.c         ****                 if (F <= 0)
 181:lcd.c         ****                 {
 182:lcd.c         ****                     F += dx2;
 183:lcd.c         ****                 }
 184:lcd.c         ****                 else
 185:lcd.c         ****                 {
 186:lcd.c         ****                     x++;
 187:lcd.c         ****                     F -= dy2_minus_dx2;
 188:lcd.c         ****                 }
 189:lcd.c         ****                 y++;
 190:lcd.c         ****             }
 191:lcd.c         ****         }
 192:lcd.c         ****     }
 193:lcd.c         ****     else    // m < 0
 194:lcd.c         ****     {
 195:lcd.c         ****         // Case 3: -1 <= m < 0 (Mirror about x-axis, replace all dy by -dy)
 196:lcd.c         ****         if (dx >= -dy)
 197:lcd.c         ****         {
 198:lcd.c         ****             F = -dy2 - dx;    // initial F
 199:lcd.c         **** 
 200:lcd.c         ****             x = p1x;
 201:lcd.c         ****             y = p1y;
 202:lcd.c         ****             while (x <= p2x)
 203:lcd.c         ****             {
 204:lcd.c         ****                 lcdDrawPixel(x, y, ON);
 205:lcd.c         ****                 if (F <= 0)
 206:lcd.c         ****                 {
 207:lcd.c         ****                     F -= dy2;
 208:lcd.c         ****                 }
 209:lcd.c         ****                 else
 210:lcd.c         ****                 {
 211:lcd.c         ****                     y--;
 212:lcd.c         ****                     F -= dy2_plus_dx2;
 213:lcd.c         ****                 }
 214:lcd.c         ****                 x++;
 215:lcd.c         ****             }
 216:lcd.c         ****         }
 217:lcd.c         ****         // Case 4: -INF < m < -1 (Mirror about x-axis and mirror 
 218:lcd.c         ****         // about y=x line, replace all dx by -dy and dy by dx)
 219:lcd.c         ****         else    
 220:lcd.c         ****         {
 221:lcd.c         ****             F = dx2 + dy;    // initial F
 222:lcd.c         **** 
 223:lcd.c         ****             y = p1y;
 224:lcd.c         ****             x = p1x;
 225:lcd.c         ****             while (y >= p2y)
 226:lcd.c         ****             {
 227:lcd.c         ****                 lcdDrawPixel(x, y, ON);
 228:lcd.c         ****                 if (F <= 0)
 229:lcd.c         ****                 {
 230:lcd.c         ****                     F += dx2;
 231:lcd.c         ****                 }
 232:lcd.c         ****                 else
 233:lcd.c         ****                 {
 234:lcd.c         ****                     x++;
 235:lcd.c         ****                     F += dy2_plus_dx2;
 236:lcd.c         ****                 }
 237:lcd.c         ****                 y--;
 238:lcd.c         ****             }
 239:lcd.c         ****         }
 240:lcd.c         ****     }
 241:lcd.c         **** }
 242:lcd.c         **** 
 243:lcd.c         **** // I found this code on wikipedia- it's the general circle version of
 244:lcd.c         **** //  Bresenham's line algorithm. It works great. I'm not going to attempt to
 245:lcd.c         **** //  comment it- look it up yourself, lazy.
 246:lcd.c         **** void lcdDrawCircle(uint8_t x0, uint8_t y0, uint8_t r, PIX_VAL pixel)
 247:lcd.c         **** {
 248:lcd.c         ****   int x = r, y = 0;
 249:lcd.c         ****   int xChange = 1 - (r << 1);
 250:lcd.c         ****   int yChange = 0;
 251:lcd.c         ****   int radiusError = 0;
 252:lcd.c         ****  
 253:lcd.c         ****   while(x >= y)
 254:lcd.c         ****   {
 255:lcd.c         ****     lcdDrawPixel(x + x0, y + y0, ON);
 256:lcd.c         ****     lcdDrawPixel(y + x0, x + y0, ON);
 257:lcd.c         ****     lcdDrawPixel(-x + x0, y + y0, ON);
 258:lcd.c         ****     lcdDrawPixel(-y + x0, x + y0, ON);
 259:lcd.c         ****     lcdDrawPixel(-x + x0, -y + y0, ON);
 260:lcd.c         ****     lcdDrawPixel(-y + x0, -x + y0, ON);
 261:lcd.c         ****     lcdDrawPixel(x + x0, -y + y0, ON);
 262:lcd.c         ****     lcdDrawPixel(y + x0, -x + y0, ON);
 263:lcd.c         ****  
 264:lcd.c         ****     y++;
 265:lcd.c         ****     radiusError += yChange;
 266:lcd.c         ****     yChange += 2;
 267:lcd.c         ****     if(((radiusError << 1) + xChange) > 0)
 268:lcd.c         ****     {
 269:lcd.c         ****       x--;
 270:lcd.c         ****       radiusError += xChange;
 271:lcd.c         ****       xChange += 2;
 272:lcd.c         ****     }
 273:lcd.c         ****   }
 274:lcd.c         **** }
 275:lcd.c         **** 
 276:lcd.c         **** // Draw box is just four lines. It's really just a shortcut.
 277:lcd.c         **** void lcdDrawBox(uint8_t p1x, uint8_t p1y, uint8_t p2x, uint8_t p2y, PIX_VAL pixel)
 278:lcd.c         **** {
 279:lcd.c         **** 	lcdDrawLine(p1x, p1y, p1x, p2y, pixel);
 280:lcd.c         **** 	lcdDrawLine(p1x, p1y, p2x, p1y, pixel);
 281:lcd.c         **** 	lcdDrawLine(p2x, p2y, p1x, p2y, pixel);
 282:lcd.c         **** 	lcdDrawLine(p2x, p2y, p2x, p1y, pixel);
 283:lcd.c         **** }
 284:lcd.c         **** 
 285:lcd.c         **** // This is the by-pixel character rendering function. At this point, there's no
 286:lcd.c         **** //  support for the t6963 built-in character generator. Get on that, won't you?
 287:lcd.c         **** void lcdDrawChar(char printMe)
 288:lcd.c         **** {
 289:lcd.c         ****   // So, we'll check our three special cases first: backspace and newline.
 290:lcd.c         ****   switch(printMe)
 291:lcd.c         ****   {
 292:lcd.c         ****     case '\r':  // Newline.
 293:lcd.c         ****     // For backspace tracking purposes, we want to track how many characters
 294:lcd.c         ****     //  we're skipping on this line.
 295:lcd.c         ****     while (cursorPos[0] <= (xDim-6))
 296:lcd.c         ****     {
 297:lcd.c         ****       cursorPos[0] += 6;
 298:lcd.c         ****       textLength++;
 299:lcd.c         ****     }
 300:lcd.c         ****     // Then, we want to reset the imaginary cursor to the start of the next
 301:lcd.c         ****     //  "line" of text- 8 pixels below the top of the current line.
 302:lcd.c         ****     cursorPos[0] = textOrigin[0];
 303:lcd.c         ****     cursorPos[1] += 8;
 304:lcd.c         ****     // If we've reached the bottom of the screen, we want to wrap to the top
 305:lcd.c         ****     //  of the area that we defined to contain text by setting the text origin
 306:lcd.c         ****     //  at some earlier time.
 307:lcd.c         ****     if (cursorPos[1] >= (yDim-7)) cursorPos[1] = textOrigin[1];
 308:lcd.c         ****     break;
 309:lcd.c         ****     
 310:lcd.c         ****     case '\b':
 311:lcd.c         ****     if (textLength > 0) // no text, no backspace!
 312:lcd.c         ****     {
 313:lcd.c         ****       textLength--; // Reduce the number of characters we've written.
 314:lcd.c         ****       
 315:lcd.c         ****       // Now, we'll move our cursor to the position of the last character we
 316:lcd.c         ****       //  printed, so we can delete it.
 317:lcd.c         ****       
 318:lcd.c         ****       // Special case: we're at the beginning of a line.
 319:lcd.c         ****       //  We'll want to go to the end of the previous line and delete what
 320:lcd.c         ****       //  we find there.
 321:lcd.c         ****       if (cursorPos[0] == textOrigin[0])
 322:lcd.c         ****       {
 323:lcd.c         ****         // Even more special: we're at the top of the text block, so we want
 324:lcd.c         ****         //  to go to the bottom line of the text block, last character, and
 325:lcd.c         ****         //  delete what we find there.
 326:lcd.c         ****         if (cursorPos[1] == textOrigin[1])
 327:lcd.c         ****         {
 328:lcd.c         ****           while (cursorPos[1] < (yDim-8)) cursorPos[1] +=8;
 329:lcd.c         ****           while (cursorPos[0] <= (xDim-6)) cursorPos[0] += 6;
 330:lcd.c         ****           cursorPos[0]-=6;
 331:lcd.c         ****         }
 332:lcd.c         ****         else // Not at the top of the block, just the start of the line.
 333:lcd.c         ****         {
 334:lcd.c         ****           cursorPos[1] -= 8;
 335:lcd.c         ****           while (cursorPos[0] <= (xDim-6)) cursorPos[0] += 6;
 336:lcd.c         ****           cursorPos[0]-=6;
 337:lcd.c         ****         }
 338:lcd.c         ****       }
 339:lcd.c         ****       // Normal case: not at the left or top edge of the block
 340:lcd.c         ****       else
 341:lcd.c         ****       {
 342:lcd.c         ****         cursorPos[0] -= 6;
 343:lcd.c         ****       } 
 344:lcd.c         ****       
 345:lcd.c         ****       // Now that our cursor is where it ought to be, we can blank out the
 346:lcd.c         ****       //   current character location by turning the pixels there off.
 347:lcd.c         ****       for (uint8_t x = cursorPos[0]; x<cursorPos[0]+5; x++)
 348:lcd.c         ****       {
 349:lcd.c         ****         for (uint8_t y = cursorPos[1]; y<cursorPos[1]+8; y++)
 350:lcd.c         ****         {
 351:lcd.c         ****           lcdDrawPixel(x,y,OFF);
 352:lcd.c         ****         }
 353:lcd.c         ****       }
 354:lcd.c         ****     }
 355:lcd.c         ****     break;
 356:lcd.c         ****   }
 357:lcd.c         ****   
 358:lcd.c         ****   // Special cases handled; we can move on to the general case of characters
 359:lcd.c         ****   //  that we can print out. That's everything between space and tilde.
 360:lcd.c         **** 	if ((printMe >= ' ') && (printMe <= '~'))
 361:lcd.c         **** 	{
 362:lcd.c         ****     // All the characters are stored in a big huge block of the flash memory;
 363:lcd.c         ****     //  each one takes five bytes. To find the five bytes in question, we need
 364:lcd.c         ****     //  to subtract the offset of ASCII values we can't print (everything
 365:lcd.c         ****     //  before ' ') and then multiply by five.
 366:lcd.c         **** 		uint16_t charOffset = printMe - ' ';
 367:lcd.c         **** 		charOffset=5*charOffset;
 368:lcd.c         ****     textLength++;
 369:lcd.c         ****     
 370:lcd.c         ****     // This is the arbitrary character generator. For this, cursorPos is the
 371:lcd.c         ****     //   upper left of the character, and we'll draw it pixel by pixel, one
 372:lcd.c         ****     //   column at a time. It's slower, but more flexible.
 373:lcd.c         ****     for (uint8_t x = cursorPos[0]; x<cursorPos[0]+5; x++)
 374:lcd.c         ****     {
 375:lcd.c         ****       uint8_t colTemp = pgm_read_byte(&characterArray[charOffset++]);
 376:lcd.c         ****       for (uint8_t y = cursorPos[1]; y<cursorPos[1]+8; y++)
 377:lcd.c         ****       {
 378:lcd.c         ****         if ((colTemp>>(y-cursorPos[1]))&0x01) lcdDrawPixel(x,y,ON);
 379:lcd.c         ****         else lcdDrawPixel(x,y,OFF);
 380:lcd.c         ****       }
 381:lcd.c         ****     }
 382:lcd.c         ****     cursorPos[0] += 6;  // Increment our x position by one character space.
 383:lcd.c         ****     // if we're at the end of the line, we need to wrap to the next line.
 384:lcd.c         ****     if (cursorPos[0] >= (xDim-6))
 385:lcd.c         ****     {
 386:lcd.c         ****       cursorPos[0] = textOrigin[0];
 387:lcd.c         ****       cursorPos[1] += 8;
 388:lcd.c         ****       if (cursorPos[1] >= (yDim-7)) cursorPos[1] = textOrigin[1];
 389:lcd.c         ****     }
 390:lcd.c         **** 	}	
 391:lcd.c         **** }
 392:lcd.c         **** 
 393:lcd.c         **** // Sprite drawing is just like character drawing, except for two things:
 394:lcd.c         **** //  the size (a sprite is 8x8 pixels, instead of 6x8), and sprites use a
 395:lcd.c         **** //  mask to preserve some portion of the pixels in the region as they were
 396:lcd.c         **** //  before the write occurred. As with characters, x and y are the upper left
 397:lcd.c         **** //  corner of the sprite. angle is establised by one of four ASCII characters-
 398:lcd.c         **** //  '0', '3', '6', '9', which correspond to hands on a clock.
 399:lcd.c         **** void lcdDrawSprite(uint8_t x, uint8_t y, uint8_t sprite, char angle, 
 400:lcd.c         ****                     PIX_VAL pixel)
 401:lcd.c         ****   {
 402:lcd.c         ****     uint16_t spriteIndex = sprite*8; // Index of the first byte of our sprite.
 403:lcd.c         ****     uint8_t buffer[8]; // We'll use this buffer, along with the mask, to
 404:lcd.c         ****                        //  draw only the sprite without disturbing the
 405:lcd.c         ****                        //  background.
 406:lcd.c         ****     lcdGetDataBlock(x, y, buffer);
 407:lcd.c         ****     // Okay, now our buffer is full of the contents of the landing zone for
 408:lcd.c         ****     //  the sprite. We can now clear the sprite's landing spot (by ANDing with
 409:lcd.c         ****     //  the mask) and draw in bits where the sprite should be (by ORing with
 410:lcd.c         ****     //  the sprite). To accommodate reverse mode, we'll complement all the bits
 411:lcd.c         ****     //  before masking. The draw routine will handle the rendering.
 412:lcd.c         ****     for (uint16_t i = spriteIndex; i < spriteIndex + 8; i++)
 413:lcd.c         ****     {
 414:lcd.c         ****       if (reverse) buffer[i-spriteIndex] ^= 0xff;
 415:lcd.c         ****       buffer[i-spriteIndex] &= pgm_read_byte(&maskArray[i]);
 416:lcd.c         ****       buffer[i-spriteIndex] |= pgm_read_byte(&spriteArray[i]);
 417:lcd.c         ****     }
 418:lcd.c         ****     // The buffer now holds the block as it should look. Now we need to print
 419:lcd.c         ****     //  it, pixel by pixel, to the screen. I'm not going to go into the
 420:lcd.c         ****     //  nitty gritty details of how I figured this out- suffice it to say,
 421:lcd.c         ****     //  graph paper was involved.
 422:lcd.c         ****     switch(angle)
 423:lcd.c         ****     {
 424:lcd.c         ****       case '0':
 425:lcd.c         ****       for (uint8_t i = 0; i<8; i++)
 426:lcd.c         ****       {
 427:lcd.c         ****         for (uint8_t j = 0; j<8; j++)
 428:lcd.c         ****         {
 429:lcd.c         ****           if (pixel == ON)
 430:lcd.c         ****           {
 431:lcd.c         ****             if (buffer[i]&0x01) lcdDrawPixel(x+i,y+7-j,ON);
 432:lcd.c         ****             else lcdDrawPixel(x+i,y+7-j,OFF);
 433:lcd.c         ****           }
 434:lcd.c         ****           else
 435:lcd.c         ****           {
 436:lcd.c         ****             if (buffer[i]&0x01) lcdDrawPixel(x+i,y+7-j,OFF);
 437:lcd.c         ****             else lcdDrawPixel(x+i,y+7-j,ON);
 438:lcd.c         ****           }
 439:lcd.c         ****           buffer[i] = buffer[i]>>1;
 440:lcd.c         ****         }
 441:lcd.c         ****       }
 442:lcd.c         ****       break;
 443:lcd.c         ****       case '3':
 444:lcd.c         ****       for (uint8_t i = 0; i<8; i++)
 445:lcd.c         ****       {
 446:lcd.c         ****         for (uint8_t j = 0; j<8; j++)
 447:lcd.c         ****         {
 448:lcd.c         ****           if (pixel == ON)
 449:lcd.c         ****           {
 450:lcd.c         ****             if (buffer[i]&0x01) lcdDrawPixel(x+j,y+i,ON);
 451:lcd.c         ****             else lcdDrawPixel(x+j,y+i,OFF);
 452:lcd.c         ****           }
 453:lcd.c         ****           else
 454:lcd.c         ****           {
 455:lcd.c         ****             if (buffer[i]&0x01) lcdDrawPixel(x+j,y+i,OFF);
 456:lcd.c         ****             else lcdDrawPixel(x+j,y+i,ON);
 457:lcd.c         ****           }
 458:lcd.c         ****           buffer[i] = buffer[i]>>1;
 459:lcd.c         ****         }
 460:lcd.c         ****       }
 461:lcd.c         ****       break;
 462:lcd.c         ****       case '6':
 463:lcd.c         ****       for (uint8_t i = 0; i<8; i++)
 464:lcd.c         ****       {
 465:lcd.c         ****         for (uint8_t j = 0; j<8; j++)
 466:lcd.c         ****         {
 467:lcd.c         ****           if (pixel == ON)
 468:lcd.c         ****           {
 469:lcd.c         ****             if (buffer[i]&0x01) lcdDrawPixel(x+7-i,y+j,ON);
 470:lcd.c         ****             else lcdDrawPixel(x+7-i,y+j,OFF);
 471:lcd.c         ****           }
 472:lcd.c         ****           else
 473:lcd.c         ****           {
 474:lcd.c         ****             if (buffer[i]&0x01) lcdDrawPixel(x+7-i,y+j,OFF);
 475:lcd.c         ****             else lcdDrawPixel(x+7-i,y+j,ON);
 476:lcd.c         ****           }
 477:lcd.c         ****           buffer[i] = buffer[i]>>1;
 478:lcd.c         ****         }
 479:lcd.c         ****       }
 480:lcd.c         ****       break;
 481:lcd.c         ****       case '9':
 482:lcd.c         ****       for (uint8_t i = 0; i<8; i++)
 483:lcd.c         ****       {
 484:lcd.c         ****         for (uint8_t j = 0; j<8; j++)
 485:lcd.c         ****         {
 486:lcd.c         ****           if (pixel == ON)
 487:lcd.c         ****           {
 488:lcd.c         ****             if (buffer[i]&0x01) lcdDrawPixel(x+7-j,y+7-i,ON);
 489:lcd.c         ****             else lcdDrawPixel(x+7-j,y+7-i,OFF);
 490:lcd.c         ****           }
 491:lcd.c         ****           else
 492:lcd.c         ****           {
 493:lcd.c         ****             if (buffer[i]&0x01) lcdDrawPixel(x+7-j,y+7-i,OFF);
 494:lcd.c         ****             else lcdDrawPixel(x+7-j,y+7-i,ON);
 495:lcd.c         ****           }
 496:lcd.c         ****           buffer[i] = buffer[i]>>1;
 497:lcd.c         ****         }
 498:lcd.c         ****       }
 499:lcd.c         ****       break;
 500:lcd.c         ****     }
 501:lcd.c         ****   }
 502:lcd.c         **** 
 503:lcd.c         **** // This function has room for lots of improvement. We draw over the block to
 504:lcd.c         **** //   be erased pixel by pixel, but we *could* do it column by column on the
 505:lcd.c         **** //   ks0108b or row by row on the t6963.
 506:lcd.c         **** void lcdEraseBlock(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
 507:lcd.c         **** {
 508:lcd.c         ****   // We want to go from upper left to lower right- if some degenerate user
 509:lcd.c         ****   //   thinks to be cute, we want to make sure that our points are redefined
 510:lcd.c         ****   //   so that (x0,y0) is the upper left, and (x1,y1) is lower right.
 511:lcd.c         ****   if (x1<x0)
 512:lcd.c         ****   {
 513:lcd.c         ****     uint8_t xTemp = x0;
 514:lcd.c         ****     x0 = x1;
 515:lcd.c         ****     x1 = xTemp;
 516:lcd.c         ****   }
 517:lcd.c         ****   if (y1<y0)
 518:lcd.c         ****   {
 519:lcd.c         ****     uint8_t yTemp = y0;
 520:lcd.c         ****     y0 = y1;
 521:lcd.c         ****     y1 = yTemp;
 522:lcd.c         ****   }
 523:lcd.c         ****   // Now that we've got that settled, we'll start at point (x0,y0) and just
 524:lcd.c         ****   //   use the lcdPixelDraw() function to turn off each pixel in the block.
 525:lcd.c         ****   //   We'll do this by defining points (i,j), iterating across in x, then
 526:lcd.c         ****   //   down y.
 527:lcd.c         ****   for (uint8_t j = y0; j <= y1; j++)
 528:lcd.c         ****   {
 529:lcd.c         ****     for (uint8_t i = x0; i <= x1; i++)
 530:lcd.c         ****     {
 531:lcd.c         ****       lcdDrawPixel(i,j,OFF);
 532:lcd.c         ****     }
 533:lcd.c         ****   }
 534:lcd.c         **** }
 535:lcd.c         **** 
 536:lcd.c         **** // Draw the SparkFun logo, pixel by pixel. We do this as a splash screen.
 537:lcd.c         **** void lcdDrawLogo(void)
 538:lcd.c         **** {
 539:lcd.c         ****   // x and y are the left and top edges of the logo. We want to center the
 540:lcd.c         ****   //  logo; it's 16 pixels tall and 20 pixels wide. Thus, the center of the
 541:lcd.c         ****   //  screen is 10 pixels to far to the right and 8 pixels to far down.
 542:lcd.c         ****   uint8_t x = ((xDim/2)-10);
 543:lcd.c         ****   uint8_t y  = ((yDim/2)-8);
 544:lcd.c         **** 
 545:lcd.c         ****   // Now we're going to iterate over the bytes in the logo array, starting
 546:lcd.c         ****   //  with the top half. The logo is stored with the 10 bytes forming the
 547:lcd.c         ****   //  top half first in memory, then the 10 for the bottom half next.
 548:lcd.c         ****   for (uint8_t i = 0; i<10; i++)
 549:lcd.c         ****   {
 550:lcd.c         ****     // Pull in the next byte of the logo.
 551:lcd.c         ****     uint8_t colTemp = pgm_read_byte(&logoArray[i]);
 552:lcd.c         ****     // Iterate over the bits in that byte, drawing one pixel at a time by
 553:lcd.c         ****     //  looking at the lowest bit in the byte, and drawing according to
 554:lcd.c         ****     //  that pixel and the 'reverse' flag.
 555:lcd.c         ****     for (uint8_t j = 0; j<8; j++)
 556:lcd.c         ****     {
 557:lcd.c         ****       if (reverse == 0)
 558:lcd.c         ****       {
 559:lcd.c         ****         if (colTemp&0x01) lcdDrawPixel(x+i,y+j,ON);
 560:lcd.c         ****         else lcdDrawPixel(x+i,y+j,OFF);
 561:lcd.c         ****       }
 562:lcd.c         ****       else
 563:lcd.c         ****       {
 564:lcd.c         ****         if (colTemp&0x01) lcdDrawPixel(x+i,y+j,OFF);
 565:lcd.c         ****         else lcdDrawPixel(x+i,y+j,ON);
 566:lcd.c         ****       }
 567:lcd.c         ****       // By right shifting, we keep the LSb the bit we're interested in.
 568:lcd.c         ****       //  That way, we only need to mask it with 0x01 and get a zero/nonzero
 569:lcd.c         ****       //  reading on it.
 570:lcd.c         ****       colTemp = colTemp>>1;
 571:lcd.c         ****     }
 572:lcd.c         ****   }  
 573:lcd.c         ****   y+=8;  // Increment y, since we're drawing the lower half of the logo. Then
 574:lcd.c         ****          //  we do more or less exactly the same thing.
 575:lcd.c         ****   for (uint8_t i = 10; i<20; i++)
 576:lcd.c         ****   {
 577:lcd.c         ****     uint8_t colTemp = pgm_read_byte(&logoArray[i]);
 578:lcd.c         ****     for (uint8_t j = 0; j<8; j++)
 579:lcd.c         ****     {
 580:lcd.c         ****       if (reverse == 0)
 581:lcd.c         ****       {
 582:lcd.c         ****         if (colTemp&0x01) lcdDrawPixel(x+i-10,y+j,ON);
 583:lcd.c         ****         else lcdDrawPixel(x+i-10,y+j,OFF);
 584:lcd.c         ****       }
 585:lcd.c         ****       else
 586:lcd.c         ****       {
 587:lcd.c         ****         if (colTemp&0x01) lcdDrawPixel(x+i-10,y+j,OFF);
 588:lcd.c         ****         else lcdDrawPixel(x+i-10,y+j,ON);
 589:lcd.c         ****       }
 590:lcd.c         ****       colTemp = colTemp>>1;
 591:lcd.c         ****     }
 592:lcd.c         ****   }
 593:lcd.c         **** 
 594:lcd.c         **** }
 595:lcd.c         **** 
 596:lcd.c         **** // lcdDrawPixel() is the generic front end to the display-specific drawPixel
 597:lcd.c         **** //  commands. We gate the draw to save time- no point in drawing a pixel that
 598:lcd.c         **** //  is outside the display area, which can happen in the case of large
 599:lcd.c         **** //  circles or lines or boxes.
 600:lcd.c         **** void lcdDrawPixel(uint8_t x, uint8_t y, PIX_VAL pixel)
 601:lcd.c         **** {
  92               		.loc 1 601 0
  93               		.cfi_startproc
  94               	.LVL6:
  95               	/* prologue: function */
  96               	/* frame size = 0 */
  97               	/* stack size = 0 */
  98               	.L__stack_usage = 0
 602:lcd.c         **** 	if (display == SMALL)
  99               		.loc 1 602 0
 100 0058 9091 0000 		lds r25,display
 101 005c 9111      		cpse r25,__zero_reg__
 102 005e 00C0      		rjmp .L9
 603:lcd.c         **** 	{
 604:lcd.c         **** 		if (x<xDim && y<yDim) ks0108bDrawPixel(x, y, pixel);
 103               		.loc 1 604 0
 104 0060 9091 0000 		lds r25,xDim
 105 0064 8917      		cp r24,r25
 106 0066 00F4      		brsh .L8
 107               		.loc 1 604 0 is_stmt 0 discriminator 1
 108 0068 9091 0000 		lds r25,yDim
 109 006c 6917      		cp r22,r25
 110 006e 00F4      		brsh .L8
 111 0070 0C94 0000 		jmp ks0108bDrawPixel
 112               	.LVL7:
 113               	.L9:
 605:lcd.c         **** 	}
 606:lcd.c         ****   else if (display == LARGE)
 114               		.loc 1 606 0 is_stmt 1
 115 0074 9130      		cpi r25,lo8(1)
 116 0076 01F4      		brne .L8
 607:lcd.c         ****   {
 608:lcd.c         ****     if (x<xDim && y<yDim) t6963DrawPixel(x, y, pixel);
 117               		.loc 1 608 0
 118 0078 9091 0000 		lds r25,xDim
 119 007c 8917      		cp r24,r25
 120 007e 00F4      		brsh .L8
 121               	.LVL8:
 122               	.LBB4:
 123               	.LBB5:
 124 0080 9091 0000 		lds r25,yDim
 125 0084 6917      		cp r22,r25
 126 0086 00F4      		brsh .L8
 127 0088 0C94 0000 		jmp t6963DrawPixel
 128               	.LVL9:
 129               	.L8:
 130 008c 0895      		ret
 131               	.LBE5:
 132               	.LBE4:
 133               		.cfi_endproc
 134               	.LFE10:
 136               	.global	lcdDrawLine
 138               	lcdDrawLine:
 139               	.LFB3:
  91:lcd.c         ****     int16_t F, x, y;
 140               		.loc 1 91 0
 141               		.cfi_startproc
 142               	.LVL10:
 143 008e 2F92      		push r2
 144               	.LCFI0:
 145               		.cfi_def_cfa_offset 3
 146               		.cfi_offset 2, -2
 147 0090 3F92      		push r3
 148               	.LCFI1:
 149               		.cfi_def_cfa_offset 4
 150               		.cfi_offset 3, -3
 151 0092 4F92      		push r4
 152               	.LCFI2:
 153               		.cfi_def_cfa_offset 5
 154               		.cfi_offset 4, -4
 155 0094 5F92      		push r5
 156               	.LCFI3:
 157               		.cfi_def_cfa_offset 6
 158               		.cfi_offset 5, -5
 159 0096 6F92      		push r6
 160               	.LCFI4:
 161               		.cfi_def_cfa_offset 7
 162               		.cfi_offset 6, -6
 163 0098 7F92      		push r7
 164               	.LCFI5:
 165               		.cfi_def_cfa_offset 8
 166               		.cfi_offset 7, -7
 167 009a 8F92      		push r8
 168               	.LCFI6:
 169               		.cfi_def_cfa_offset 9
 170               		.cfi_offset 8, -8
 171 009c 9F92      		push r9
 172               	.LCFI7:
 173               		.cfi_def_cfa_offset 10
 174               		.cfi_offset 9, -9
 175 009e AF92      		push r10
 176               	.LCFI8:
 177               		.cfi_def_cfa_offset 11
 178               		.cfi_offset 10, -10
 179 00a0 BF92      		push r11
 180               	.LCFI9:
 181               		.cfi_def_cfa_offset 12
 182               		.cfi_offset 11, -11
 183 00a2 CF92      		push r12
 184               	.LCFI10:
 185               		.cfi_def_cfa_offset 13
 186               		.cfi_offset 12, -12
 187 00a4 DF92      		push r13
 188               	.LCFI11:
 189               		.cfi_def_cfa_offset 14
 190               		.cfi_offset 13, -13
 191 00a6 EF92      		push r14
 192               	.LCFI12:
 193               		.cfi_def_cfa_offset 15
 194               		.cfi_offset 14, -14
 195 00a8 FF92      		push r15
 196               	.LCFI13:
 197               		.cfi_def_cfa_offset 16
 198               		.cfi_offset 15, -15
 199 00aa 0F93      		push r16
 200               	.LCFI14:
 201               		.cfi_def_cfa_offset 17
 202               		.cfi_offset 16, -16
 203 00ac 1F93      		push r17
 204               	.LCFI15:
 205               		.cfi_def_cfa_offset 18
 206               		.cfi_offset 17, -17
 207 00ae CF93      		push r28
 208               	.LCFI16:
 209               		.cfi_def_cfa_offset 19
 210               		.cfi_offset 28, -18
 211 00b0 DF93      		push r29
 212               	.LCFI17:
 213               		.cfi_def_cfa_offset 20
 214               		.cfi_offset 29, -19
 215               	/* prologue: function */
 216               	/* frame size = 0 */
 217               	/* stack size = 18 */
 218               	.L__stack_usage = 18
 219 00b2 482E      		mov r4,r24
 220 00b4 562E      		mov r5,r22
  94:lcd.c         ****     {
 221               		.loc 1 94 0
 222 00b6 4817      		cp r20,r24
 223 00b8 00F4      		brsh .L12
 100:lcd.c         ****       p2y = y;
 224               		.loc 1 100 0
 225 00ba 522E      		mov r5,r18
 101:lcd.c         ****     }
 226               		.loc 1 101 0
 227 00bc 262F      		mov r18,r22
 228               	.LVL11:
 229 00be 842D      		mov r24,r4
 230               	.LVL12:
 231 00c0 442E      		mov r4,r20
 232               	.LVL13:
 233 00c2 482F      		mov r20,r24
 234               	.LVL14:
 235               	.L12:
 106:lcd.c         ****     {
 236               		.loc 1 106 0
 237 00c4 4412      		cpse r4,r20
 238 00c6 00C0      		rjmp .L13
 108:lcd.c         ****         {
 239               		.loc 1 108 0
 240 00c8 2515      		cp r18,r5
 241 00ca 00F4      		brsh .L14
 242 00cc 852D      		mov r24,r5
 243 00ce 522E      		mov r5,r18
 244               	.LVL15:
 245 00d0 282F      		mov r18,r24
 246               	.LVL16:
 247               	.L14:
 116:lcd.c         ****         {
 248               		.loc 1 116 0
 249 00d2 C0E0      		ldi r28,0
 250 00d4 D0E0      		ldi r29,0
 251 00d6 052D      		mov r16,r5
 252               	.LVL17:
 253 00d8 10E0      		ldi r17,0
 254 00da 622E      		mov r6,r18
 255 00dc 712C      		mov r7,__zero_reg__
 256               	.LVL18:
 257               	.L15:
 258 00de CE01      		movw r24,r28
 259 00e0 800F      		add r24,r16
 260 00e2 911F      		adc r25,r17
 116:lcd.c         ****         {
 261               		.loc 1 116 0 is_stmt 0 discriminator 1
 262 00e4 6816      		cp r6,r24
 263 00e6 7906      		cpc r7,r25
 264 00e8 04F4      		brge .+2
 265 00ea 00C0      		rjmp .L11
 266 00ec 6C2F      		mov r22,r28
 267 00ee 650D      		add r22,r5
 118:lcd.c         ****           y++;
 268               		.loc 1 118 0 is_stmt 1
 269 00f0 40E0      		ldi r20,0
 270 00f2 842D      		mov r24,r4
 271 00f4 0E94 0000 		call lcdDrawPixel
 272               	.LVL19:
 273 00f8 2196      		adiw r28,1
 274               	.LVL20:
 275 00fa 00C0      		rjmp .L15
 276               	.LVL21:
 277               	.L13:
 278 00fc A42C      		mov r10,r4
 279 00fe B12C      		mov r11,__zero_reg__
 280 0100 842E      		mov r8,r20
 281 0102 912C      		mov r9,__zero_reg__
 124:lcd.c         ****     {
 282               		.loc 1 124 0
 283 0104 5212      		cpse r5,r18
 284 0106 00C0      		rjmp .L17
 285               	.LVL22:
 129:lcd.c         ****         {
 286               		.loc 1 129 0
 287 0108 C0E0      		ldi r28,0
 288 010a D0E0      		ldi r29,0
 289               	.LVL23:
 290               	.L18:
 291 010c CE01      		movw r24,r28
 292 010e 8A0D      		add r24,r10
 293 0110 9B1D      		adc r25,r11
 129:lcd.c         ****         {
 294               		.loc 1 129 0 is_stmt 0 discriminator 1
 295 0112 8816      		cp r8,r24
 296 0114 9906      		cpc r9,r25
 297 0116 04F4      		brge .+2
 298 0118 00C0      		rjmp .L11
 131:lcd.c         ****           x++;
 299               		.loc 1 131 0 is_stmt 1
 300 011a 40E0      		ldi r20,0
 301 011c 652D      		mov r22,r5
 302 011e 8C2F      		mov r24,r28
 303 0120 840D      		add r24,r4
 304 0122 0E94 0000 		call lcdDrawPixel
 305               	.LVL24:
 306 0126 2196      		adiw r28,1
 307               	.LVL25:
 308 0128 00C0      		rjmp .L18
 309               	.LVL26:
 310               	.L17:
 137:lcd.c         ****     int16_t dx            = p2x - p1x;  // x-increment from p1 to p2
 311               		.loc 1 137 0
 312 012a 622E      		mov r6,r18
 313 012c 712C      		mov r7,__zero_reg__
 314 012e C52D      		mov r28,r5
 315 0130 D0E0      		ldi r29,0
 316 0132 9301      		movw r18,r6
 317               	.LVL27:
 318 0134 2C1B      		sub r18,r28
 319 0136 3D0B      		sbc r19,r29
 320               	.LVL28:
 138:lcd.c         ****     int16_t dy2           = (dy << 1);  // dy << 1 == 2*dy
 321               		.loc 1 138 0
 322 0138 8501      		movw r16,r10
 323               	.LVL29:
 324 013a A401      		movw r20,r8
 325 013c 4A19      		sub r20,r10
 326 013e 5B09      		sbc r21,r11
 327               	.LVL30:
 139:lcd.c         ****     int16_t dx2           = (dx << 1);
 328               		.loc 1 139 0
 329 0140 6901      		movw r12,r18
 330 0142 CC0C      		lsl r12
 331 0144 DD1C      		rol r13
 332               	.LVL31:
 140:lcd.c         ****     int16_t dy2_minus_dx2 = dy2 - dx2;  // precompute constant for speed up
 333               		.loc 1 140 0
 334 0146 7A01      		movw r14,r20
 335 0148 EE0C      		lsl r14
 336 014a FF1C      		rol r15
 337               	.LVL32:
 141:lcd.c         ****     int16_t dy2_plus_dx2  = dy2 + dx2;
 338               		.loc 1 141 0
 339 014c 1601      		movw r2,r12
 144:lcd.c         ****     {
 340               		.loc 1 144 0
 341 014e 37FD      		sbrc r19,7
 342 0150 00C0      		rjmp .L21
 141:lcd.c         ****     int16_t dy2_plus_dx2  = dy2 + dx2;
 343               		.loc 1 141 0
 344 0152 2E18      		sub r2,r14
 345 0154 3F08      		sbc r3,r15
 346               	.LVL33:
 147:lcd.c         ****         {
 347               		.loc 1 147 0
 348 0156 4217      		cp r20,r18
 349 0158 5307      		cpc r21,r19
 350 015a 04F0      		brlt .L22
 150:lcd.c         **** 
 351               		.loc 1 150 0
 352 015c 8601      		movw r16,r12
 353 015e 041B      		sub r16,r20
 354 0160 150B      		sbc r17,r21
 355               	.LVL34:
 154:lcd.c         ****             {
 356               		.loc 1 154 0
 357 0162 E12C      		mov r14,__zero_reg__
 358 0164 F12C      		mov r15,__zero_reg__
 359               	.LVL35:
 360               	.L23:
 361 0166 C701      		movw r24,r14
 362 0168 8A0D      		add r24,r10
 363 016a 9B1D      		adc r25,r11
 154:lcd.c         ****             {
 364               		.loc 1 154 0 is_stmt 0 discriminator 1
 365 016c 8816      		cp r8,r24
 366 016e 9906      		cpc r9,r25
 367 0170 04F4      		brge .+2
 368 0172 00C0      		rjmp .L11
 156:lcd.c         ****                 if (F <= 0)
 369               		.loc 1 156 0 is_stmt 1
 370 0174 40E0      		ldi r20,0
 371 0176 6C2F      		mov r22,r28
 372 0178 842D      		mov r24,r4
 373 017a 8E0D      		add r24,r14
 374 017c 0E94 0000 		call lcdDrawPixel
 375               	.LVL36:
 157:lcd.c         ****                 {
 376               		.loc 1 157 0
 377 0180 1016      		cp __zero_reg__,r16
 378 0182 1106      		cpc __zero_reg__,r17
 379 0184 04F0      		brlt .L24
 159:lcd.c         ****                 }
 380               		.loc 1 159 0
 381 0186 0C0D      		add r16,r12
 382 0188 1D1D      		adc r17,r13
 383               	.LVL37:
 384 018a 00C0      		rjmp .L25
 385               	.L24:
 386               	.LVL38:
 163:lcd.c         ****                     F += dy2_minus_dx2;
 387               		.loc 1 163 0
 388 018c 2196      		adiw r28,1
 389               	.LVL39:
 164:lcd.c         ****                 }
 390               		.loc 1 164 0
 391 018e 020D      		add r16,r2
 392 0190 131D      		adc r17,r3
 393               	.LVL40:
 394               	.L25:
 395 0192 8FEF      		ldi r24,-1
 396 0194 E81A      		sub r14,r24
 397 0196 F80A      		sbc r15,r24
 398               	.LVL41:
 399 0198 00C0      		rjmp .L23
 400               	.LVL42:
 401               	.L22:
 173:lcd.c         **** 
 402               		.loc 1 173 0
 403 019a 6701      		movw r12,r14
 404               	.LVL43:
 405 019c C21A      		sub r12,r18
 406 019e D30A      		sbc r13,r19
 407               	.LVL44:
 177:lcd.c         ****             {
 408               		.loc 1 177 0
 409 01a0 A12C      		mov r10,__zero_reg__
 410 01a2 B12C      		mov r11,__zero_reg__
 411               	.LVL45:
 412               	.L27:
 413 01a4 C501      		movw r24,r10
 414 01a6 8C0F      		add r24,r28
 415 01a8 9D1F      		adc r25,r29
 177:lcd.c         ****             {
 416               		.loc 1 177 0 is_stmt 0 discriminator 1
 417 01aa 6816      		cp r6,r24
 418 01ac 7906      		cpc r7,r25
 419 01ae 04F4      		brge .+2
 420 01b0 00C0      		rjmp .L11
 179:lcd.c         ****                 if (F <= 0)
 421               		.loc 1 179 0 is_stmt 1
 422 01b2 40E0      		ldi r20,0
 423 01b4 652D      		mov r22,r5
 424 01b6 6A0D      		add r22,r10
 425 01b8 802F      		mov r24,r16
 426 01ba 0E94 0000 		call lcdDrawPixel
 427               	.LVL46:
 180:lcd.c         ****                 {
 428               		.loc 1 180 0
 429 01be 1C14      		cp __zero_reg__,r12
 430 01c0 1D04      		cpc __zero_reg__,r13
 431 01c2 04F0      		brlt .L28
 182:lcd.c         ****                 }
 432               		.loc 1 182 0
 433 01c4 CE0C      		add r12,r14
 434 01c6 DF1C      		adc r13,r15
 435               	.LVL47:
 436 01c8 00C0      		rjmp .L29
 437               	.L28:
 438               	.LVL48:
 186:lcd.c         ****                     F -= dy2_minus_dx2;
 439               		.loc 1 186 0
 440 01ca 0F5F      		subi r16,-1
 441 01cc 1F4F      		sbci r17,-1
 442               	.LVL49:
 187:lcd.c         ****                 }
 443               		.loc 1 187 0
 444 01ce C218      		sub r12,r2
 445 01d0 D308      		sbc r13,r3
 446               	.LVL50:
 447               	.L29:
 448 01d2 8FEF      		ldi r24,-1
 449 01d4 A81A      		sub r10,r24
 450 01d6 B80A      		sbc r11,r24
 451               	.LVL51:
 452 01d8 00C0      		rjmp .L27
 453               	.LVL52:
 454               	.L21:
 142:lcd.c         **** 
 455               		.loc 1 142 0
 456 01da 2E0C      		add r2,r14
 457 01dc 3F1C      		adc r3,r15
 458               	.LVL53:
 196:lcd.c         ****         {
 459               		.loc 1 196 0
 460 01de EE27      		clr r30
 461 01e0 FF27      		clr r31
 462 01e2 E21B      		sub r30,r18
 463 01e4 F30B      		sbc r31,r19
 464 01e6 4E17      		cp r20,r30
 465 01e8 5F07      		cpc r21,r31
 466 01ea 04F0      		brlt .L31
 198:lcd.c         **** 
 467               		.loc 1 198 0
 468 01ec 0027      		clr r16
 469 01ee 1127      		clr r17
 470 01f0 0C19      		sub r16,r12
 471 01f2 1D09      		sbc r17,r13
 472 01f4 041B      		sub r16,r20
 473 01f6 150B      		sbc r17,r21
 474               	.LVL54:
 202:lcd.c         ****             {
 475               		.loc 1 202 0
 476 01f8 E12C      		mov r14,__zero_reg__
 477 01fa F12C      		mov r15,__zero_reg__
 478               	.LVL55:
 479               	.L32:
 480 01fc C701      		movw r24,r14
 481 01fe 8A0D      		add r24,r10
 482 0200 9B1D      		adc r25,r11
 202:lcd.c         ****             {
 483               		.loc 1 202 0 is_stmt 0 discriminator 1
 484 0202 8816      		cp r8,r24
 485 0204 9906      		cpc r9,r25
 486 0206 04F0      		brlt .L11
 204:lcd.c         ****                 if (F <= 0)
 487               		.loc 1 204 0 is_stmt 1
 488 0208 40E0      		ldi r20,0
 489 020a 6C2F      		mov r22,r28
 490 020c 842D      		mov r24,r4
 491 020e 8E0D      		add r24,r14
 492 0210 0E94 0000 		call lcdDrawPixel
 493               	.LVL56:
 205:lcd.c         ****                 {
 494               		.loc 1 205 0
 495 0214 1016      		cp __zero_reg__,r16
 496 0216 1106      		cpc __zero_reg__,r17
 497 0218 04F0      		brlt .L33
 207:lcd.c         ****                 }
 498               		.loc 1 207 0
 499 021a 0C19      		sub r16,r12
 500 021c 1D09      		sbc r17,r13
 501               	.LVL57:
 502 021e 00C0      		rjmp .L34
 503               	.L33:
 504               	.LVL58:
 211:lcd.c         ****                     F -= dy2_plus_dx2;
 505               		.loc 1 211 0
 506 0220 2197      		sbiw r28,1
 507               	.LVL59:
 212:lcd.c         ****                 }
 508               		.loc 1 212 0
 509 0222 0219      		sub r16,r2
 510 0224 1309      		sbc r17,r3
 511               	.LVL60:
 512               	.L34:
 513 0226 8FEF      		ldi r24,-1
 514 0228 E81A      		sub r14,r24
 515 022a F80A      		sbc r15,r24
 516               	.LVL61:
 517 022c 00C0      		rjmp .L32
 518               	.LVL62:
 519               	.L31:
 221:lcd.c         **** 
 520               		.loc 1 221 0
 521 022e 6701      		movw r12,r14
 522               	.LVL63:
 523 0230 C20E      		add r12,r18
 524 0232 D31E      		adc r13,r19
 525               	.LVL64:
 225:lcd.c         ****             {
 526               		.loc 1 225 0
 527 0234 A12C      		mov r10,__zero_reg__
 528 0236 B12C      		mov r11,__zero_reg__
 529               	.LVL65:
 530               	.L36:
 531 0238 CE01      		movw r24,r28
 532 023a 8A19      		sub r24,r10
 533 023c 9B09      		sbc r25,r11
 225:lcd.c         ****             {
 534               		.loc 1 225 0 is_stmt 0 discriminator 1
 535 023e 8615      		cp r24,r6
 536 0240 9705      		cpc r25,r7
 537 0242 04F0      		brlt .L11
 227:lcd.c         ****                 if (F <= 0)
 538               		.loc 1 227 0 is_stmt 1
 539 0244 40E0      		ldi r20,0
 540 0246 652D      		mov r22,r5
 541 0248 6A19      		sub r22,r10
 542 024a 802F      		mov r24,r16
 543 024c 0E94 0000 		call lcdDrawPixel
 544               	.LVL66:
 228:lcd.c         ****                 {
 545               		.loc 1 228 0
 546 0250 1C14      		cp __zero_reg__,r12
 547 0252 1D04      		cpc __zero_reg__,r13
 548 0254 04F0      		brlt .L37
 230:lcd.c         ****                 }
 549               		.loc 1 230 0
 550 0256 CE0C      		add r12,r14
 551 0258 DF1C      		adc r13,r15
 552               	.LVL67:
 553 025a 00C0      		rjmp .L38
 554               	.L37:
 555               	.LVL68:
 234:lcd.c         ****                     F += dy2_plus_dx2;
 556               		.loc 1 234 0
 557 025c 0F5F      		subi r16,-1
 558 025e 1F4F      		sbci r17,-1
 559               	.LVL69:
 235:lcd.c         ****                 }
 560               		.loc 1 235 0
 561 0260 C20C      		add r12,r2
 562 0262 D31C      		adc r13,r3
 563               	.LVL70:
 564               	.L38:
 565 0264 8FEF      		ldi r24,-1
 566 0266 A81A      		sub r10,r24
 567 0268 B80A      		sbc r11,r24
 568               	.LVL71:
 569 026a 00C0      		rjmp .L36
 570               	.LVL72:
 571               	.L11:
 572               	/* epilogue start */
 241:lcd.c         **** 
 573               		.loc 1 241 0
 574 026c DF91      		pop r29
 575 026e CF91      		pop r28
 576 0270 1F91      		pop r17
 577 0272 0F91      		pop r16
 578 0274 FF90      		pop r15
 579 0276 EF90      		pop r14
 580 0278 DF90      		pop r13
 581 027a CF90      		pop r12
 582 027c BF90      		pop r11
 583 027e AF90      		pop r10
 584 0280 9F90      		pop r9
 585 0282 8F90      		pop r8
 586 0284 7F90      		pop r7
 587 0286 6F90      		pop r6
 588 0288 5F90      		pop r5
 589               	.LVL73:
 590 028a 4F90      		pop r4
 591               	.LVL74:
 592 028c 3F90      		pop r3
 593 028e 2F90      		pop r2
 594 0290 0895      		ret
 595               		.cfi_endproc
 596               	.LFE3:
 598               	.global	lcdDrawBox
 600               	lcdDrawBox:
 601               	.LFB5:
 278:lcd.c         **** 	lcdDrawLine(p1x, p1y, p1x, p2y, pixel);
 602               		.loc 1 278 0
 603               		.cfi_startproc
 604               	.LVL75:
 605 0292 EF92      		push r14
 606               	.LCFI18:
 607               		.cfi_def_cfa_offset 3
 608               		.cfi_offset 14, -2
 609 0294 FF92      		push r15
 610               	.LCFI19:
 611               		.cfi_def_cfa_offset 4
 612               		.cfi_offset 15, -3
 613 0296 0F93      		push r16
 614               	.LCFI20:
 615               		.cfi_def_cfa_offset 5
 616               		.cfi_offset 16, -4
 617 0298 1F93      		push r17
 618               	.LCFI21:
 619               		.cfi_def_cfa_offset 6
 620               		.cfi_offset 17, -5
 621 029a CF93      		push r28
 622               	.LCFI22:
 623               		.cfi_def_cfa_offset 7
 624               		.cfi_offset 28, -6
 625 029c DF93      		push r29
 626               	.LCFI23:
 627               		.cfi_def_cfa_offset 8
 628               		.cfi_offset 29, -7
 629               	/* prologue: function */
 630               	/* frame size = 0 */
 631               	/* stack size = 6 */
 632               	.L__stack_usage = 6
 633 029e E82E      		mov r14,r24
 634 02a0 F62E      		mov r15,r22
 635 02a2 C42F      		mov r28,r20
 636 02a4 122F      		mov r17,r18
 279:lcd.c         **** 	lcdDrawLine(p1x, p1y, p2x, p1y, pixel);
 637               		.loc 1 279 0
 638 02a6 482F      		mov r20,r24
 639               	.LVL76:
 640 02a8 0E94 0000 		call lcdDrawLine
 641               	.LVL77:
 280:lcd.c         **** 	lcdDrawLine(p2x, p2y, p1x, p2y, pixel);
 642               		.loc 1 280 0
 643 02ac 2F2D      		mov r18,r15
 644 02ae 4C2F      		mov r20,r28
 645 02b0 6F2D      		mov r22,r15
 646 02b2 8E2D      		mov r24,r14
 647 02b4 0E94 0000 		call lcdDrawLine
 648               	.LVL78:
 281:lcd.c         **** 	lcdDrawLine(p2x, p2y, p2x, p1y, pixel);
 649               		.loc 1 281 0
 650 02b8 212F      		mov r18,r17
 651 02ba 4E2D      		mov r20,r14
 652 02bc 612F      		mov r22,r17
 653 02be 8C2F      		mov r24,r28
 654 02c0 0E94 0000 		call lcdDrawLine
 655               	.LVL79:
 282:lcd.c         **** }
 656               		.loc 1 282 0
 657 02c4 2F2D      		mov r18,r15
 658 02c6 4C2F      		mov r20,r28
 659 02c8 612F      		mov r22,r17
 660 02ca 8C2F      		mov r24,r28
 661 02cc 0E94 0000 		call lcdDrawLine
 662               	.LVL80:
 663               	/* epilogue start */
 283:lcd.c         **** 
 664               		.loc 1 283 0
 665 02d0 DF91      		pop r29
 666 02d2 CF91      		pop r28
 667               	.LVL81:
 668 02d4 1F91      		pop r17
 669               	.LVL82:
 670 02d6 0F91      		pop r16
 671               	.LVL83:
 672 02d8 FF90      		pop r15
 673               	.LVL84:
 674 02da EF90      		pop r14
 675               	.LVL85:
 676 02dc 0895      		ret
 677               		.cfi_endproc
 678               	.LFE5:
 680               	.global	lcdDrawCircle
 682               	lcdDrawCircle:
 683               	.LFB4:
 247:lcd.c         ****   int x = r, y = 0;
 684               		.loc 1 247 0
 685               		.cfi_startproc
 686               	.LVL86:
 687 02de 5F92      		push r5
 688               	.LCFI24:
 689               		.cfi_def_cfa_offset 3
 690               		.cfi_offset 5, -2
 691 02e0 6F92      		push r6
 692               	.LCFI25:
 693               		.cfi_def_cfa_offset 4
 694               		.cfi_offset 6, -3
 695 02e2 7F92      		push r7
 696               	.LCFI26:
 697               		.cfi_def_cfa_offset 5
 698               		.cfi_offset 7, -4
 699 02e4 8F92      		push r8
 700               	.LCFI27:
 701               		.cfi_def_cfa_offset 6
 702               		.cfi_offset 8, -5
 703 02e6 9F92      		push r9
 704               	.LCFI28:
 705               		.cfi_def_cfa_offset 7
 706               		.cfi_offset 9, -6
 707 02e8 AF92      		push r10
 708               	.LCFI29:
 709               		.cfi_def_cfa_offset 8
 710               		.cfi_offset 10, -7
 711 02ea BF92      		push r11
 712               	.LCFI30:
 713               		.cfi_def_cfa_offset 9
 714               		.cfi_offset 11, -8
 715 02ec CF92      		push r12
 716               	.LCFI31:
 717               		.cfi_def_cfa_offset 10
 718               		.cfi_offset 12, -9
 719 02ee DF92      		push r13
 720               	.LCFI32:
 721               		.cfi_def_cfa_offset 11
 722               		.cfi_offset 13, -10
 723 02f0 EF92      		push r14
 724               	.LCFI33:
 725               		.cfi_def_cfa_offset 12
 726               		.cfi_offset 14, -11
 727 02f2 FF92      		push r15
 728               	.LCFI34:
 729               		.cfi_def_cfa_offset 13
 730               		.cfi_offset 15, -12
 731 02f4 0F93      		push r16
 732               	.LCFI35:
 733               		.cfi_def_cfa_offset 14
 734               		.cfi_offset 16, -13
 735 02f6 1F93      		push r17
 736               	.LCFI36:
 737               		.cfi_def_cfa_offset 15
 738               		.cfi_offset 17, -14
 739 02f8 CF93      		push r28
 740               	.LCFI37:
 741               		.cfi_def_cfa_offset 16
 742               		.cfi_offset 28, -15
 743 02fa DF93      		push r29
 744               	.LCFI38:
 745               		.cfi_def_cfa_offset 17
 746               		.cfi_offset 29, -16
 747               	/* prologue: function */
 748               	/* frame size = 0 */
 749               	/* stack size = 15 */
 750               	.L__stack_usage = 15
 751 02fc B82E      		mov r11,r24
 752 02fe A62E      		mov r10,r22
 248:lcd.c         ****   int xChange = 1 - (r << 1);
 753               		.loc 1 248 0
 754 0300 042F      		mov r16,r20
 755 0302 10E0      		ldi r17,0
 756               	.LVL87:
 249:lcd.c         ****   int yChange = 0;
 757               		.loc 1 249 0
 758 0304 9801      		movw r18,r16
 759               	.LVL88:
 760 0306 220F      		lsl r18
 761 0308 331F      		rol r19
 762               	.LVL89:
 763 030a EE24      		clr r14
 764 030c E394      		inc r14
 765 030e F12C      		mov r15,__zero_reg__
 766 0310 E21A      		sub r14,r18
 767 0312 F30A      		sbc r15,r19
 768               	.LVL90:
 251:lcd.c         ****  
 769               		.loc 1 251 0
 770 0314 C12C      		mov r12,__zero_reg__
 771 0316 D12C      		mov r13,__zero_reg__
 248:lcd.c         ****   int xChange = 1 - (r << 1);
 772               		.loc 1 248 0
 773 0318 C0E0      		ldi r28,0
 774 031a D0E0      		ldi r29,0
 775               	.LVL91:
 776               	.L46:
 777 031c 8C2E      		mov r8,r28
 778 031e 8A0C      		add r8,r10
 255:lcd.c         ****     lcdDrawPixel(y + x0, x + y0, ON);
 779               		.loc 1 255 0
 780 0320 40E0      		ldi r20,0
 781 0322 682D      		mov r22,r8
 782 0324 7B2C      		mov r7,r11
 783 0326 700E      		add r7,r16
 784 0328 872D      		mov r24,r7
 785 032a 0E94 0000 		call lcdDrawPixel
 786               	.LVL92:
 787 032e 9C2E      		mov r9,r28
 788 0330 9B0C      		add r9,r11
 256:lcd.c         ****     lcdDrawPixel(-x + x0, y + y0, ON);
 789               		.loc 1 256 0
 790 0332 40E0      		ldi r20,0
 791 0334 6A2C      		mov r6,r10
 792 0336 600E      		add r6,r16
 793 0338 662D      		mov r22,r6
 794 033a 892D      		mov r24,r9
 795 033c 0E94 0000 		call lcdDrawPixel
 796               	.LVL93:
 257:lcd.c         ****     lcdDrawPixel(-y + x0, x + y0, ON);
 797               		.loc 1 257 0
 798 0340 40E0      		ldi r20,0
 799 0342 682D      		mov r22,r8
 800 0344 8B2C      		mov r8,r11
 801 0346 801A      		sub r8,r16
 802 0348 882D      		mov r24,r8
 803 034a 0E94 0000 		call lcdDrawPixel
 804               	.LVL94:
 805 034e 5B2C      		mov r5,r11
 806 0350 5C1A      		sub r5,r28
 258:lcd.c         ****     lcdDrawPixel(-x + x0, -y + y0, ON);
 807               		.loc 1 258 0
 808 0352 40E0      		ldi r20,0
 809 0354 662D      		mov r22,r6
 810 0356 852D      		mov r24,r5
 811 0358 0E94 0000 		call lcdDrawPixel
 812               	.LVL95:
 813 035c 6A2C      		mov r6,r10
 814 035e 6C1A      		sub r6,r28
 259:lcd.c         ****     lcdDrawPixel(-y + x0, -x + y0, ON);
 815               		.loc 1 259 0
 816 0360 40E0      		ldi r20,0
 817 0362 662D      		mov r22,r6
 818 0364 882D      		mov r24,r8
 819 0366 0E94 0000 		call lcdDrawPixel
 820               	.LVL96:
 260:lcd.c         ****     lcdDrawPixel(x + x0, -y + y0, ON);
 821               		.loc 1 260 0
 822 036a 40E0      		ldi r20,0
 823 036c 8A2C      		mov r8,r10
 824 036e 801A      		sub r8,r16
 825 0370 682D      		mov r22,r8
 826 0372 852D      		mov r24,r5
 827 0374 0E94 0000 		call lcdDrawPixel
 828               	.LVL97:
 261:lcd.c         ****     lcdDrawPixel(y + x0, -x + y0, ON);
 829               		.loc 1 261 0
 830 0378 40E0      		ldi r20,0
 831 037a 662D      		mov r22,r6
 832 037c 872D      		mov r24,r7
 833 037e 0E94 0000 		call lcdDrawPixel
 834               	.LVL98:
 262:lcd.c         ****  
 835               		.loc 1 262 0
 836 0382 40E0      		ldi r20,0
 837 0384 682D      		mov r22,r8
 838 0386 892D      		mov r24,r9
 839 0388 0E94 0000 		call lcdDrawPixel
 840               	.LVL99:
 265:lcd.c         ****     yChange += 2;
 841               		.loc 1 265 0
 842 038c 9E01      		movw r18,r28
 843 038e 220F      		lsl r18
 844 0390 331F      		rol r19
 845 0392 C20E      		add r12,r18
 846 0394 D31E      		adc r13,r19
 847               	.LVL100:
 848 0396 2196      		adiw r28,1
 849               	.LVL101:
 267:lcd.c         ****     {
 850               		.loc 1 267 0
 851 0398 9601      		movw r18,r12
 852 039a 220F      		lsl r18
 853 039c 331F      		rol r19
 854 039e 2E0D      		add r18,r14
 855 03a0 3F1D      		adc r19,r15
 856 03a2 1216      		cp __zero_reg__,r18
 857 03a4 1306      		cpc __zero_reg__,r19
 858 03a6 04F4      		brge .L44
 269:lcd.c         ****       radiusError += xChange;
 859               		.loc 1 269 0
 860 03a8 0150      		subi r16,1
 861 03aa 1109      		sbc r17,__zero_reg__
 862               	.LVL102:
 270:lcd.c         ****       xChange += 2;
 863               		.loc 1 270 0
 864 03ac CE0C      		add r12,r14
 865 03ae DF1C      		adc r13,r15
 866               	.LVL103:
 271:lcd.c         ****     }
 867               		.loc 1 271 0
 868 03b0 82E0      		ldi r24,2
 869 03b2 E80E      		add r14,r24
 870 03b4 F11C      		adc r15,__zero_reg__
 871               	.LVL104:
 872               	.L44:
 253:lcd.c         ****   {
 873               		.loc 1 253 0 discriminator 1
 874 03b6 0C17      		cp r16,r28
 875 03b8 1D07      		cpc r17,r29
 876 03ba 04F0      		brlt .+2
 877 03bc 00C0      		rjmp .L46
 878               	/* epilogue start */
 274:lcd.c         **** 
 879               		.loc 1 274 0
 880 03be DF91      		pop r29
 881 03c0 CF91      		pop r28
 882               	.LVL105:
 883 03c2 1F91      		pop r17
 884 03c4 0F91      		pop r16
 885               	.LVL106:
 886 03c6 FF90      		pop r15
 887 03c8 EF90      		pop r14
 888               	.LVL107:
 889 03ca DF90      		pop r13
 890 03cc CF90      		pop r12
 891               	.LVL108:
 892 03ce BF90      		pop r11
 893               	.LVL109:
 894 03d0 AF90      		pop r10
 895               	.LVL110:
 896 03d2 9F90      		pop r9
 897 03d4 8F90      		pop r8
 898 03d6 7F90      		pop r7
 899 03d8 6F90      		pop r6
 900 03da 5F90      		pop r5
 901 03dc 0895      		ret
 902               		.cfi_endproc
 903               	.LFE4:
 905               	.global	lcdDrawChar
 907               	lcdDrawChar:
 908               	.LFB6:
 288:lcd.c         ****   // So, we'll check our three special cases first: backspace and newline.
 909               		.loc 1 288 0
 910               		.cfi_startproc
 911               	.LVL111:
 912 03de EF92      		push r14
 913               	.LCFI39:
 914               		.cfi_def_cfa_offset 3
 915               		.cfi_offset 14, -2
 916 03e0 FF92      		push r15
 917               	.LCFI40:
 918               		.cfi_def_cfa_offset 4
 919               		.cfi_offset 15, -3
 920 03e2 0F93      		push r16
 921               	.LCFI41:
 922               		.cfi_def_cfa_offset 5
 923               		.cfi_offset 16, -4
 924 03e4 1F93      		push r17
 925               	.LCFI42:
 926               		.cfi_def_cfa_offset 6
 927               		.cfi_offset 17, -5
 928 03e6 CF93      		push r28
 929               	.LCFI43:
 930               		.cfi_def_cfa_offset 7
 931               		.cfi_offset 28, -6
 932 03e8 DF93      		push r29
 933               	.LCFI44:
 934               		.cfi_def_cfa_offset 8
 935               		.cfi_offset 29, -7
 936               	/* prologue: function */
 937               	/* frame size = 0 */
 938               	/* stack size = 6 */
 939               	.L__stack_usage = 6
 940 03ea C82F      		mov r28,r24
 290:lcd.c         ****   {
 941               		.loc 1 290 0
 942 03ec 8830      		cpi r24,lo8(8)
 943 03ee 01F0      		breq .L49
 944 03f0 8D30      		cpi r24,lo8(13)
 945 03f2 01F0      		breq .+2
 946 03f4 00C0      		rjmp .L48
 295:lcd.c         ****     {
 947               		.loc 1 295 0
 948 03f6 6091 0000 		lds r22,xDim
 949 03fa 70E0      		ldi r23,0
 950 03fc 6550      		subi r22,5
 951 03fe 7109      		sbc r23,__zero_reg__
 952 0400 4091 0000 		lds r20,textLength
 953 0404 5091 0000 		lds r21,textLength+1
 954 0408 E091 0000 		lds r30,cursorPos
 955               	.LVL112:
 956               	.L51:
 295:lcd.c         ****     {
 957               		.loc 1 295 0 is_stmt 0 discriminator 1
 958 040c 8E2F      		mov r24,r30
 959 040e 90E0      		ldi r25,0
 960 0410 EA5F      		subi r30,lo8(-(6))
 961 0412 9A01      		movw r18,r20
 962 0414 2F5F      		subi r18,-1
 963 0416 3F4F      		sbci r19,-1
 964 0418 8617      		cp r24,r22
 965 041a 9707      		cpc r25,r23
 966 041c 04F4      		brge .L81
 295:lcd.c         ****     {
 967               		.loc 1 295 0
 968 041e A901      		movw r20,r18
 969 0420 00C0      		rjmp .L51
 970               	.L81:
 971 0422 5093 0000 		sts textLength+1,r21
 972 0426 4093 0000 		sts textLength,r20
 302:lcd.c         ****     cursorPos[1] += 8;
 973               		.loc 1 302 0 is_stmt 1
 974 042a 8091 0000 		lds r24,textOrigin
 975 042e 8093 0000 		sts cursorPos,r24
 303:lcd.c         ****     // If we've reached the bottom of the screen, we want to wrap to the top
 976               		.loc 1 303 0
 977 0432 8091 0000 		lds r24,cursorPos+1
 978 0436 885F      		subi r24,lo8(-(8))
 979 0438 8093 0000 		sts cursorPos+1,r24
 307:lcd.c         ****     break;
 980               		.loc 1 307 0
 981 043c 90E0      		ldi r25,0
 982 043e 4091 0000 		lds r20,yDim
 983 0442 50E0      		ldi r21,0
 984 0444 4750      		subi r20,7
 985 0446 5109      		sbc r21,__zero_reg__
 986 0448 8417      		cp r24,r20
 987 044a 9507      		cpc r25,r21
 988 044c 04F4      		brge .+2
 989 044e 00C0      		rjmp .L48
 307:lcd.c         ****     break;
 990               		.loc 1 307 0 is_stmt 0 discriminator 1
 991 0450 8091 0000 		lds r24,textOrigin+1
 992 0454 8093 0000 		sts cursorPos+1,r24
 993 0458 00C0      		rjmp .L48
 994               	.LVL113:
 995               	.L49:
 311:lcd.c         ****     {
 996               		.loc 1 311 0 is_stmt 1
 997 045a 4091 0000 		lds r20,textLength
 998 045e 5091 0000 		lds r21,textLength+1
 999 0462 4115      		cp r20,__zero_reg__
 1000 0464 5105      		cpc r21,__zero_reg__
 1001 0466 01F4      		brne .+2
 1002 0468 00C0      		rjmp .L48
 313:lcd.c         ****       
 1003               		.loc 1 313 0
 1004 046a 4150      		subi r20,1
 1005 046c 5109      		sbc r21,__zero_reg__
 1006 046e 5093 0000 		sts textLength+1,r21
 1007 0472 4093 0000 		sts textLength,r20
 321:lcd.c         ****       {
 1008               		.loc 1 321 0
 1009 0476 2091 0000 		lds r18,cursorPos
 1010 047a 8091 0000 		lds r24,textOrigin
 1011               	.LVL114:
 1012 047e 2813      		cpse r18,r24
 1013 0480 00C0      		rjmp .L55
 326:lcd.c         ****         {
 1014               		.loc 1 326 0
 1015 0482 3091 0000 		lds r19,cursorPos+1
 1016 0486 8091 0000 		lds r24,textOrigin+1
 1017 048a 3813      		cpse r19,r24
 1018 048c 00C0      		rjmp .L56
 328:lcd.c         ****           while (cursorPos[0] <= (xDim-6)) cursorPos[0] += 6;
 1019               		.loc 1 328 0
 1020 048e 4091 0000 		lds r20,yDim
 1021 0492 50E0      		ldi r21,0
 1022 0494 4850      		subi r20,8
 1023 0496 5109      		sbc r21,__zero_reg__
 1024               	.L57:
 1025 0498 68E0      		ldi r22,lo8(8)
 1026 049a 630F      		add r22,r19
 328:lcd.c         ****           while (cursorPos[0] <= (xDim-6)) cursorPos[0] += 6;
 1027               		.loc 1 328 0 is_stmt 0 discriminator 1
 1028 049c 832F      		mov r24,r19
 1029 049e 90E0      		ldi r25,0
 1030 04a0 8417      		cp r24,r20
 1031 04a2 9507      		cpc r25,r21
 1032 04a4 04F4      		brge .L82
 328:lcd.c         ****           while (cursorPos[0] <= (xDim-6)) cursorPos[0] += 6;
 1033               		.loc 1 328 0 discriminator 2
 1034 04a6 362F      		mov r19,r22
 1035 04a8 00C0      		rjmp .L57
 1036               	.L82:
 1037 04aa 3093 0000 		sts cursorPos+1,r19
 329:lcd.c         ****           cursorPos[0]-=6;
 1038               		.loc 1 329 0 is_stmt 1
 1039 04ae 4091 0000 		lds r20,xDim
 1040 04b2 50E0      		ldi r21,0
 1041 04b4 4550      		subi r20,5
 1042 04b6 5109      		sbc r21,__zero_reg__
 1043               	.L59:
 1044 04b8 36E0      		ldi r19,lo8(6)
 1045 04ba 320F      		add r19,r18
 329:lcd.c         ****           cursorPos[0]-=6;
 1046               		.loc 1 329 0 is_stmt 0 discriminator 1
 1047 04bc 822F      		mov r24,r18
 1048 04be 90E0      		ldi r25,0
 1049 04c0 8417      		cp r24,r20
 1050 04c2 9507      		cpc r25,r21
 1051 04c4 04F4      		brge .L55
 329:lcd.c         ****           cursorPos[0]-=6;
 1052               		.loc 1 329 0 discriminator 2
 1053 04c6 232F      		mov r18,r19
 1054 04c8 00C0      		rjmp .L59
 1055               	.L56:
 334:lcd.c         ****           while (cursorPos[0] <= (xDim-6)) cursorPos[0] += 6;
 1056               		.loc 1 334 0 is_stmt 1
 1057 04ca 3850      		subi r19,lo8(-(-8))
 1058 04cc 3093 0000 		sts cursorPos+1,r19
 335:lcd.c         ****           cursorPos[0]-=6;
 1059               		.loc 1 335 0
 1060 04d0 4091 0000 		lds r20,xDim
 1061 04d4 50E0      		ldi r21,0
 1062 04d6 4550      		subi r20,5
 1063 04d8 5109      		sbc r21,__zero_reg__
 1064               	.L62:
 1065 04da 36E0      		ldi r19,lo8(6)
 1066 04dc 320F      		add r19,r18
 335:lcd.c         ****           cursorPos[0]-=6;
 1067               		.loc 1 335 0 is_stmt 0 discriminator 1
 1068 04de 822F      		mov r24,r18
 1069 04e0 90E0      		ldi r25,0
 1070 04e2 8417      		cp r24,r20
 1071 04e4 9507      		cpc r25,r21
 1072 04e6 04F4      		brge .L55
 335:lcd.c         ****           cursorPos[0]-=6;
 1073               		.loc 1 335 0 discriminator 2
 1074 04e8 232F      		mov r18,r19
 1075 04ea 00C0      		rjmp .L62
 1076               	.L55:
 342:lcd.c         ****       } 
 1077               		.loc 1 342 0 is_stmt 1
 1078 04ec 2650      		subi r18,lo8(-(-6))
 1079 04ee 2093 0000 		sts cursorPos,r18
 1080               	.LBB6:
 347:lcd.c         ****       {
 1081               		.loc 1 347 0
 1082 04f2 D091 0000 		lds r29,cursorPos
 1083               	.LVL115:
 1084               	.L64:
 347:lcd.c         ****       {
 1085               		.loc 1 347 0 is_stmt 0 discriminator 1
 1086 04f6 4091 0000 		lds r20,cursorPos
 1087 04fa 50E0      		ldi r21,0
 1088 04fc 4C5F      		subi r20,-4
 1089 04fe 5F4F      		sbci r21,-1
 1090 0500 6D2F      		mov r22,r29
 1091 0502 70E0      		ldi r23,0
 1092 0504 4617      		cp r20,r22
 1093 0506 5707      		cpc r21,r23
 1094 0508 04F0      		brlt .L48
 1095               	.LVL116:
 1096               	.LBB7:
 349:lcd.c         ****         {
 1097               		.loc 1 349 0 is_stmt 1
 1098 050a 1091 0000 		lds r17,cursorPos+1
 1099               	.LVL117:
 1100               	.L65:
 349:lcd.c         ****         {
 1101               		.loc 1 349 0 is_stmt 0 discriminator 1
 1102 050e 4091 0000 		lds r20,cursorPos+1
 1103 0512 50E0      		ldi r21,0
 1104 0514 495F      		subi r20,-7
 1105 0516 5F4F      		sbci r21,-1
 1106 0518 E12F      		mov r30,r17
 1107 051a F0E0      		ldi r31,0
 1108 051c 4E17      		cp r20,r30
 1109 051e 5F07      		cpc r21,r31
 1110 0520 04F0      		brlt .L83
 351:lcd.c         ****         }
 1111               		.loc 1 351 0 is_stmt 1 discriminator 2
 1112 0522 41E0      		ldi r20,lo8(1)
 1113 0524 612F      		mov r22,r17
 1114 0526 8D2F      		mov r24,r29
 1115 0528 0E94 0000 		call lcdDrawPixel
 1116               	.LVL118:
 349:lcd.c         ****         {
 1117               		.loc 1 349 0 discriminator 2
 1118 052c 1F5F      		subi r17,lo8(-(1))
 1119               	.LVL119:
 1120 052e 00C0      		rjmp .L65
 1121               	.L83:
 1122               	.LBE7:
 347:lcd.c         ****       {
 1123               		.loc 1 347 0
 1124 0530 DF5F      		subi r29,lo8(-(1))
 1125               	.LVL120:
 1126 0532 00C0      		rjmp .L64
 1127               	.LVL121:
 1128               	.L48:
 1129               	.LBE6:
 360:lcd.c         **** 	{
 1130               		.loc 1 360 0
 1131 0534 80EE      		ldi r24,lo8(-32)
 1132 0536 8C0F      		add r24,r28
 1133 0538 8F35      		cpi r24,lo8(95)
 1134 053a 00F0      		brlo .+2
 1135 053c 00C0      		rjmp .L47
 1136               	.LBB8:
 366:lcd.c         **** 		charOffset=5*charOffset;
 1137               		.loc 1 366 0
 1138 053e 2C2F      		mov r18,r28
 1139 0540 30E0      		ldi r19,0
 1140 0542 2052      		subi r18,32
 1141 0544 3109      		sbc r19,__zero_reg__
 1142               	.LVL122:
 368:lcd.c         ****     
 1143               		.loc 1 368 0
 1144 0546 8091 0000 		lds r24,textLength
 1145 054a 9091 0000 		lds r25,textLength+1
 1146 054e 0196      		adiw r24,1
 1147 0550 9093 0000 		sts textLength+1,r25
 1148 0554 8093 0000 		sts textLength,r24
 1149               	.LBB9:
 373:lcd.c         ****     {
 1150               		.loc 1 373 0
 1151 0558 F090 0000 		lds r15,cursorPos
 1152               	.LVL123:
 1153               	.LBE9:
 367:lcd.c         ****     textLength++;
 1154               		.loc 1 367 0
 1155 055c 85E0      		ldi r24,lo8(5)
 1156 055e 829F      		mul r24,r18
 1157 0560 E001      		movw r28,r0
 1158 0562 839F      		mul r24,r19
 1159 0564 D00D      		add r29,r0
 1160 0566 1124      		clr __zero_reg__
 1161               	.LVL124:
 1162 0568 C050      		subi r28,lo8(-(characterArray))
 1163 056a D040      		sbci r29,hi8(-(characterArray))
 1164               	.LVL125:
 1165               	.L70:
 1166               	.LBB13:
 373:lcd.c         ****     {
 1167               		.loc 1 373 0 discriminator 1
 1168 056c 8091 0000 		lds r24,cursorPos
 1169 0570 282F      		mov r18,r24
 1170 0572 30E0      		ldi r19,0
 1171 0574 2C5F      		subi r18,-4
 1172 0576 3F4F      		sbci r19,-1
 1173 0578 4F2D      		mov r20,r15
 1174 057a 50E0      		ldi r21,0
 1175 057c 2417      		cp r18,r20
 1176 057e 3507      		cpc r19,r21
 1177 0580 04F0      		brlt .L84
 1178               	.LVL126:
 1179               	.LBB10:
 1180               	.LBB11:
 375:lcd.c         ****       for (uint8_t y = cursorPos[1]; y<cursorPos[1]+8; y++)
 1181               		.loc 1 375 0
 1182 0582 FE01      		movw r30,r28
 1183               	/* #APP */
 1184               	 ;  375 "lcd.c" 1
 1185 0584 0491      		lpm r16, Z
 1186               		
 1187               	 ;  0 "" 2
 1188               	/* #NOAPP */
 1189               	.LBE11:
 1190               	.LBB12:
 376:lcd.c         ****       {
 1191               		.loc 1 376 0
 1192 0586 E090 0000 		lds r14,cursorPos+1
 1193               	.LVL127:
 378:lcd.c         ****         else lcdDrawPixel(x,y,OFF);
 1194               		.loc 1 378 0
 1195 058a 10E0      		ldi r17,0
 1196               	.L71:
 376:lcd.c         ****       {
 1197               		.loc 1 376 0 discriminator 1
 1198 058c 4091 0000 		lds r20,cursorPos+1
 1199 0590 50E0      		ldi r21,0
 1200 0592 2E2D      		mov r18,r14
 1201 0594 30E0      		ldi r19,0
 1202 0596 FA01      		movw r30,r20
 1203 0598 3796      		adiw r30,7
 1204 059a E217      		cp r30,r18
 1205 059c F307      		cpc r31,r19
 1206 059e 04F0      		brlt .L85
 378:lcd.c         ****         else lcdDrawPixel(x,y,OFF);
 1207               		.loc 1 378 0
 1208 05a0 241B      		sub r18,r20
 1209 05a2 350B      		sbc r19,r21
 1210 05a4 C801      		movw r24,r16
 1211 05a6 00C0      		rjmp 2f
 1212               		1:
 1213 05a8 9595      		asr r25
 1214 05aa 8795      		ror r24
 1215               		2:
 1216 05ac 2A95      		dec r18
 1217 05ae 02F4      		brpl 1b
 1218 05b0 80FF      		sbrs r24,0
 1219 05b2 00C0      		rjmp .L72
 378:lcd.c         ****         else lcdDrawPixel(x,y,OFF);
 1220               		.loc 1 378 0 is_stmt 0 discriminator 1
 1221 05b4 40E0      		ldi r20,0
 1222 05b6 00C0      		rjmp .L80
 1223               	.L72:
 379:lcd.c         ****       }
 1224               		.loc 1 379 0 is_stmt 1
 1225 05b8 41E0      		ldi r20,lo8(1)
 1226               	.L80:
 1227 05ba 6E2D      		mov r22,r14
 1228 05bc 8F2D      		mov r24,r15
 1229 05be 0E94 0000 		call lcdDrawPixel
 1230               	.LVL128:
 376:lcd.c         ****       {
 1231               		.loc 1 376 0
 1232 05c2 E394      		inc r14
 1233               	.LVL129:
 1234 05c4 00C0      		rjmp .L71
 1235               	.L85:
 1236               	.LBE12:
 1237               	.LBE10:
 373:lcd.c         ****     {
 1238               		.loc 1 373 0
 1239 05c6 F394      		inc r15
 1240               	.LVL130:
 1241 05c8 2196      		adiw r28,1
 1242               	.LVL131:
 1243 05ca 00C0      		rjmp .L70
 1244               	.LVL132:
 1245               	.L84:
 1246               	.LBE13:
 382:lcd.c         ****     // if we're at the end of the line, we need to wrap to the next line.
 1247               		.loc 1 382 0
 1248 05cc 26E0      		ldi r18,lo8(6)
 1249 05ce 280F      		add r18,r24
 1250 05d0 2093 0000 		sts cursorPos,r18
 384:lcd.c         ****     {
 1251               		.loc 1 384 0
 1252 05d4 30E0      		ldi r19,0
 1253 05d6 8091 0000 		lds r24,xDim
 1254 05da 90E0      		ldi r25,0
 1255 05dc 0697      		sbiw r24,6
 1256 05de 2817      		cp r18,r24
 1257 05e0 3907      		cpc r19,r25
 1258 05e2 04F0      		brlt .L47
 386:lcd.c         ****       cursorPos[1] += 8;
 1259               		.loc 1 386 0
 1260 05e4 8091 0000 		lds r24,textOrigin
 1261 05e8 8093 0000 		sts cursorPos,r24
 387:lcd.c         ****       if (cursorPos[1] >= (yDim-7)) cursorPos[1] = textOrigin[1];
 1262               		.loc 1 387 0
 1263 05ec 2091 0000 		lds r18,cursorPos+1
 1264 05f0 285F      		subi r18,lo8(-(8))
 1265 05f2 2093 0000 		sts cursorPos+1,r18
 388:lcd.c         ****     }
 1266               		.loc 1 388 0
 1267 05f6 30E0      		ldi r19,0
 1268 05f8 8091 0000 		lds r24,yDim
 1269 05fc 90E0      		ldi r25,0
 1270 05fe 0797      		sbiw r24,7
 1271 0600 2817      		cp r18,r24
 1272 0602 3907      		cpc r19,r25
 1273 0604 04F0      		brlt .L47
 388:lcd.c         ****     }
 1274               		.loc 1 388 0 is_stmt 0 discriminator 1
 1275 0606 8091 0000 		lds r24,textOrigin+1
 1276 060a 8093 0000 		sts cursorPos+1,r24
 1277               	.LVL133:
 1278               	.L47:
 1279               	/* epilogue start */
 1280               	.LBE8:
 391:lcd.c         **** 
 1281               		.loc 1 391 0 is_stmt 1
 1282 060e DF91      		pop r29
 1283 0610 CF91      		pop r28
 1284 0612 1F91      		pop r17
 1285 0614 0F91      		pop r16
 1286 0616 FF90      		pop r15
 1287 0618 EF90      		pop r14
 1288 061a 0895      		ret
 1289               		.cfi_endproc
 1290               	.LFE6:
 1292               	.global	lcdEraseBlock
 1294               	lcdEraseBlock:
 1295               	.LFB8:
 507:lcd.c         ****   // We want to go from upper left to lower right- if some degenerate user
 1296               		.loc 1 507 0
 1297               		.cfi_startproc
 1298               	.LVL134:
 1299 061c EF92      		push r14
 1300               	.LCFI45:
 1301               		.cfi_def_cfa_offset 3
 1302               		.cfi_offset 14, -2
 1303 061e FF92      		push r15
 1304               	.LCFI46:
 1305               		.cfi_def_cfa_offset 4
 1306               		.cfi_offset 15, -3
 1307 0620 0F93      		push r16
 1308               	.LCFI47:
 1309               		.cfi_def_cfa_offset 5
 1310               		.cfi_offset 16, -4
 1311 0622 1F93      		push r17
 1312               	.LCFI48:
 1313               		.cfi_def_cfa_offset 6
 1314               		.cfi_offset 17, -5
 1315 0624 CF93      		push r28
 1316               	.LCFI49:
 1317               		.cfi_def_cfa_offset 7
 1318               		.cfi_offset 28, -6
 1319 0626 DF93      		push r29
 1320               	.LCFI50:
 1321               		.cfi_def_cfa_offset 8
 1322               		.cfi_offset 29, -7
 1323 0628 1F92      		push __zero_reg__
 1324               	.LCFI51:
 1325               		.cfi_def_cfa_offset 9
 1326 062a CDB7      		in r28,__SP_L__
 1327 062c DEB7      		in r29,__SP_H__
 1328               	.LCFI52:
 1329               		.cfi_def_cfa_register 28
 1330               	/* prologue: function */
 1331               	/* frame size = 1 */
 1332               	/* stack size = 7 */
 1333               	.L__stack_usage = 7
 1334 062e E82E      		mov r14,r24
 1335 0630 F62E      		mov r15,r22
 1336 0632 142F      		mov r17,r20
 511:lcd.c         ****   {
 1337               		.loc 1 511 0
 1338 0634 4817      		cp r20,r24
 1339 0636 00F4      		brsh .L87
 1340 0638 E42E      		mov r14,r20
 1341 063a 182F      		mov r17,r24
 1342               	.L87:
 1343               	.LVL135:
 517:lcd.c         ****   {
 1344               		.loc 1 517 0
 1345 063c 2F15      		cp r18,r15
 1346 063e 00F4      		brsh .L89
 1347 0640 8F2D      		mov r24,r15
 1348 0642 F22E      		mov r15,r18
 1349 0644 282F      		mov r18,r24
 1350               	.LVL136:
 1351               	.LBB14:
 527:lcd.c         ****   {
 1352               		.loc 1 527 0
 1353 0646 00C0      		rjmp .L89
 1354               	.LVL137:
 1355               	.L95:
 1356 0648 F394      		inc r15
 1357               	.LVL138:
 1358               	.L89:
 527:lcd.c         ****   {
 1359               		.loc 1 527 0 is_stmt 0 discriminator 1
 1360 064a 2F15      		cp r18,r15
 1361 064c 00F0      		brlo .L86
 527:lcd.c         ****   {
 1362               		.loc 1 527 0
 1363 064e 0E2D      		mov r16,r14
 1364               	.L92:
 1365               	.LVL139:
 1366               	.LBB15:
 529:lcd.c         ****     {
 1367               		.loc 1 529 0 is_stmt 1 discriminator 1
 1368 0650 1017      		cp r17,r16
 1369 0652 00F0      		brlo .L95
 531:lcd.c         ****     }
 1370               		.loc 1 531 0 discriminator 2
 1371 0654 41E0      		ldi r20,lo8(1)
 1372 0656 6F2D      		mov r22,r15
 1373 0658 802F      		mov r24,r16
 1374 065a 2983      		std Y+1,r18
 1375 065c 0E94 0000 		call lcdDrawPixel
 1376               	.LVL140:
 529:lcd.c         ****     {
 1377               		.loc 1 529 0 discriminator 2
 1378 0660 0F5F      		subi r16,lo8(-(1))
 1379               	.LVL141:
 1380 0662 2981      		ldd r18,Y+1
 1381 0664 00C0      		rjmp .L92
 1382               	.LVL142:
 1383               	.L86:
 1384               	/* epilogue start */
 1385               	.LBE15:
 1386               	.LBE14:
 534:lcd.c         **** 
 1387               		.loc 1 534 0
 1388 0666 0F90      		pop __tmp_reg__
 1389 0668 DF91      		pop r29
 1390 066a CF91      		pop r28
 1391 066c 1F91      		pop r17
 1392               	.LVL143:
 1393 066e 0F91      		pop r16
 1394 0670 FF90      		pop r15
 1395               	.LVL144:
 1396 0672 EF90      		pop r14
 1397               	.LVL145:
 1398 0674 0895      		ret
 1399               		.cfi_endproc
 1400               	.LFE8:
 1402               	.global	lcdDrawLogo
 1404               	lcdDrawLogo:
 1405               	.LFB9:
 538:lcd.c         ****   // x and y are the left and top edges of the logo. We want to center the
 1406               		.loc 1 538 0
 1407               		.cfi_startproc
 1408 0676 BF92      		push r11
 1409               	.LCFI53:
 1410               		.cfi_def_cfa_offset 3
 1411               		.cfi_offset 11, -2
 1412 0678 CF92      		push r12
 1413               	.LCFI54:
 1414               		.cfi_def_cfa_offset 4
 1415               		.cfi_offset 12, -3
 1416 067a DF92      		push r13
 1417               	.LCFI55:
 1418               		.cfi_def_cfa_offset 5
 1419               		.cfi_offset 13, -4
 1420 067c EF92      		push r14
 1421               	.LCFI56:
 1422               		.cfi_def_cfa_offset 6
 1423               		.cfi_offset 14, -5
 1424 067e FF92      		push r15
 1425               	.LCFI57:
 1426               		.cfi_def_cfa_offset 7
 1427               		.cfi_offset 15, -6
 1428 0680 0F93      		push r16
 1429               	.LCFI58:
 1430               		.cfi_def_cfa_offset 8
 1431               		.cfi_offset 16, -7
 1432 0682 1F93      		push r17
 1433               	.LCFI59:
 1434               		.cfi_def_cfa_offset 9
 1435               		.cfi_offset 17, -8
 1436 0684 CF93      		push r28
 1437               	.LCFI60:
 1438               		.cfi_def_cfa_offset 10
 1439               		.cfi_offset 28, -9
 1440 0686 DF93      		push r29
 1441               	.LCFI61:
 1442               		.cfi_def_cfa_offset 11
 1443               		.cfi_offset 29, -10
 1444               	/* prologue: function */
 1445               	/* frame size = 0 */
 1446               	/* stack size = 9 */
 1447               	.L__stack_usage = 9
 542:lcd.c         ****   uint8_t y  = ((yDim/2)-8);
 1448               		.loc 1 542 0
 1449 0688 E090 0000 		lds r14,xDim
 1450 068c E694      		lsr r14
 1451 068e E6EF      		ldi r30,lo8(-10)
 1452 0690 CE2E      		mov r12,r30
 1453 0692 CE0C      		add r12,r14
 1454               	.LVL146:
 543:lcd.c         **** 
 1455               		.loc 1 543 0
 1456 0694 D090 0000 		lds r13,yDim
 1457 0698 D694      		lsr r13
 1458 069a F8EF      		ldi r31,lo8(-8)
 1459 069c BF2E      		mov r11,r31
 1460 069e BD0C      		add r11,r13
 1461               	.LVL147:
 1462 06a0 C0E0      		ldi r28,lo8(logoArray)
 1463 06a2 D0E0      		ldi r29,hi8(logoArray)
 1464 06a4 0C2D      		mov r16,r12
 1465               	.LVL148:
 1466               	.L104:
 1467               	.LBB16:
 1468               	.LBB17:
 1469               	.LBB18:
 551:lcd.c         ****     // Iterate over the bits in that byte, drawing one pixel at a time by
 1470               		.loc 1 551 0
 1471 06a6 FE01      		movw r30,r28
 1472               	/* #APP */
 1473               	 ;  551 "lcd.c" 1
 1474 06a8 1491      		lpm r17, Z
 1475               		
 1476               	 ;  0 "" 2
 1477               	.LVL149:
 1478               	/* #NOAPP */
 1479 06aa FB2C      		mov r15,r11
 1480               	.LVL150:
 1481               	.L102:
 1482               	.LBE18:
 1483               	.LBB19:
 557:lcd.c         ****       {
 1484               		.loc 1 557 0
 1485 06ac 9091 0000 		lds r25,reverse
 1486 06b0 812F      		mov r24,r17
 1487 06b2 8170      		andi r24,lo8(1)
 1488 06b4 9111      		cpse r25,__zero_reg__
 1489 06b6 00C0      		rjmp .L97
 559:lcd.c         ****         else lcdDrawPixel(x+i,y+j,OFF);
 1490               		.loc 1 559 0
 1491 06b8 01F0      		breq .L115
 1492 06ba 00C0      		rjmp .L100
 1493               	.L97:
 564:lcd.c         ****         else lcdDrawPixel(x+i,y+j,ON);
 1494               		.loc 1 564 0
 1495 06bc 8823      		tst r24
 1496 06be 01F0      		breq .L100
 1497               	.L115:
 564:lcd.c         ****         else lcdDrawPixel(x+i,y+j,ON);
 1498               		.loc 1 564 0 is_stmt 0 discriminator 1
 1499 06c0 41E0      		ldi r20,lo8(1)
 1500 06c2 00C0      		rjmp .L113
 1501               	.L100:
 565:lcd.c         ****       }
 1502               		.loc 1 565 0 is_stmt 1
 1503 06c4 40E0      		ldi r20,0
 1504               	.L113:
 1505 06c6 6F2D      		mov r22,r15
 1506 06c8 802F      		mov r24,r16
 1507 06ca 0E94 0000 		call lcdDrawPixel
 1508               	.LVL151:
 570:lcd.c         ****     }
 1509               		.loc 1 570 0
 1510 06ce 1695      		lsr r17
 1511               	.LVL152:
 1512 06d0 F394      		inc r15
 1513               	.LVL153:
 555:lcd.c         ****     {
 1514               		.loc 1 555 0
 1515 06d2 FD10      		cpse r15,r13
 1516 06d4 00C0      		rjmp .L102
 1517               	.LVL154:
 1518 06d6 2196      		adiw r28,1
 1519               	.LVL155:
 1520 06d8 0F5F      		subi r16,lo8(-(1))
 1521               	.LVL156:
 1522               	.LBE19:
 1523               	.LBE17:
 548:lcd.c         ****   {
 1524               		.loc 1 548 0
 1525 06da 0E11      		cpse r16,r14
 1526 06dc 00C0      		rjmp .L104
 1527 06de C0E0      		ldi r28,lo8(logoArray+10)
 1528 06e0 D0E0      		ldi r29,hi8(logoArray+10)
 1529               	.LVL157:
 1530 06e2 1C2D      		mov r17,r12
 1531               	.LVL158:
 1532               	.L112:
 1533               	.LBE16:
 1534               	.LBB20:
 1535               	.LBB21:
 1536               	.LBB22:
 577:lcd.c         ****     for (uint8_t j = 0; j<8; j++)
 1537               		.loc 1 577 0
 1538 06e4 FE01      		movw r30,r28
 1539               	/* #APP */
 1540               	 ;  577 "lcd.c" 1
 1541 06e6 C490      		lpm r12, Z
 1542               		
 1543               	 ;  0 "" 2
 1544               	.LVL159:
 1545               	/* #NOAPP */
 1546 06e8 0D2D      		mov r16,r13
 1547               	.LBE22:
 1548               	.LBB23:
 578:lcd.c         ****     {
 1549               		.loc 1 578 0
 1550 06ea F12C      		mov r15,__zero_reg__
 1551               	.LVL160:
 1552               	.L110:
 580:lcd.c         ****       {
 1553               		.loc 1 580 0
 1554 06ec 9091 0000 		lds r25,reverse
 1555 06f0 8C2D      		mov r24,r12
 1556 06f2 8170      		andi r24,lo8(1)
 1557 06f4 9111      		cpse r25,__zero_reg__
 1558 06f6 00C0      		rjmp .L105
 582:lcd.c         ****         else lcdDrawPixel(x+i-10,y+j,OFF);
 1559               		.loc 1 582 0
 1560 06f8 01F0      		breq .L116
 1561 06fa 00C0      		rjmp .L108
 1562               	.L105:
 587:lcd.c         ****         else lcdDrawPixel(x+i-10,y+j,ON);
 1563               		.loc 1 587 0
 1564 06fc 8823      		tst r24
 1565 06fe 01F0      		breq .L108
 1566               	.L116:
 587:lcd.c         ****         else lcdDrawPixel(x+i-10,y+j,ON);
 1567               		.loc 1 587 0 is_stmt 0 discriminator 1
 1568 0700 41E0      		ldi r20,lo8(1)
 1569 0702 00C0      		rjmp .L114
 1570               	.L108:
 588:lcd.c         ****       }
 1571               		.loc 1 588 0 is_stmt 1
 1572 0704 40E0      		ldi r20,0
 1573               	.L114:
 1574 0706 602F      		mov r22,r16
 1575 0708 812F      		mov r24,r17
 1576 070a 0E94 0000 		call lcdDrawPixel
 1577               	.LVL161:
 590:lcd.c         ****     }
 1578               		.loc 1 590 0
 1579 070e C694      		lsr r12
 1580               	.LVL162:
 578:lcd.c         ****     {
 1581               		.loc 1 578 0
 1582 0710 F394      		inc r15
 1583               	.LVL163:
 1584 0712 0F5F      		subi r16,lo8(-(1))
 1585 0714 F8E0      		ldi r31,lo8(8)
 1586 0716 FF12      		cpse r15,r31
 1587 0718 00C0      		rjmp .L110
 1588               	.LVL164:
 1589 071a 2196      		adiw r28,1
 1590               	.LVL165:
 1591 071c 1F5F      		subi r17,lo8(-(1))
 1592               	.LVL166:
 1593               	.LBE23:
 1594               	.LBE21:
 575:lcd.c         ****   {
 1595               		.loc 1 575 0
 1596 071e 1E11      		cpse r17,r14
 1597 0720 00C0      		rjmp .L112
 1598               	/* epilogue start */
 1599               	.LBE20:
 594:lcd.c         **** 
 1600               		.loc 1 594 0
 1601 0722 DF91      		pop r29
 1602 0724 CF91      		pop r28
 1603               	.LVL167:
 1604 0726 1F91      		pop r17
 1605               	.LVL168:
 1606 0728 0F91      		pop r16
 1607 072a FF90      		pop r15
 1608               	.LVL169:
 1609 072c EF90      		pop r14
 1610               	.LVL170:
 1611 072e DF90      		pop r13
 1612 0730 CF90      		pop r12
 1613               	.LVL171:
 1614 0732 BF90      		pop r11
 1615               	.LVL172:
 1616 0734 0895      		ret
 1617               		.cfi_endproc
 1618               	.LFE9:
 1620               	.global	lcdGetDataBlock
 1622               	lcdGetDataBlock:
 1623               	.LFB11:
 609:lcd.c         ****   }
 610:lcd.c         **** }
 611:lcd.c         **** 
 612:lcd.c         **** // Front-end for the display specific readBlock functions. This gets used in
 613:lcd.c         **** //  the draw sprite function to allow sprites to be drawn over the existing
 614:lcd.c         **** //  background. The data comes back as a block of 8 bytes; bit 0 is the upper
 615:lcd.c         **** //  pixel; byte 0 is the leftmost column. Both types of display use this
 616:lcd.c         **** //  structure but it's easier for the ks0108b.
 617:lcd.c         **** void lcdGetDataBlock(uint8_t x, uint8_t y, uint8_t *buffer)
 618:lcd.c         **** {
 1624               		.loc 1 618 0
 1625               		.cfi_startproc
 1626               	.LVL173:
 1627               	/* prologue: function */
 1628               	/* frame size = 0 */
 1629               	/* stack size = 0 */
 1630               	.L__stack_usage = 0
 619:lcd.c         ****   if (display == SMALL) ks0108bReadBlock(x, y, buffer);
 1631               		.loc 1 619 0
 1632 0736 9091 0000 		lds r25,display
 1633 073a 9111      		cpse r25,__zero_reg__
 1634 073c 00C0      		rjmp .L118
 1635               		.loc 1 619 0 is_stmt 0 discriminator 1
 1636 073e 0C94 0000 		jmp ks0108bReadBlock
 1637               	.LVL174:
 1638               	.L118:
 620:lcd.c         ****   else                  t6963ReadBlock(x, y, buffer);
 1639               		.loc 1 620 0 is_stmt 1
 1640 0742 0C94 0000 		jmp t6963ReadBlock
 1641               	.LVL175:
 1642               		.cfi_endproc
 1643               	.LFE11:
 1645               	.global	lcdDrawSprite
 1647               	lcdDrawSprite:
 1648               	.LFB7:
 401:lcd.c         ****     uint16_t spriteIndex = sprite*8; // Index of the first byte of our sprite.
 1649               		.loc 1 401 0
 1650               		.cfi_startproc
 1651               	.LVL176:
 1652 0746 9F92      		push r9
 1653               	.LCFI62:
 1654               		.cfi_def_cfa_offset 3
 1655               		.cfi_offset 9, -2
 1656 0748 AF92      		push r10
 1657               	.LCFI63:
 1658               		.cfi_def_cfa_offset 4
 1659               		.cfi_offset 10, -3
 1660 074a BF92      		push r11
 1661               	.LCFI64:
 1662               		.cfi_def_cfa_offset 5
 1663               		.cfi_offset 11, -4
 1664 074c CF92      		push r12
 1665               	.LCFI65:
 1666               		.cfi_def_cfa_offset 6
 1667               		.cfi_offset 12, -5
 1668 074e DF92      		push r13
 1669               	.LCFI66:
 1670               		.cfi_def_cfa_offset 7
 1671               		.cfi_offset 13, -6
 1672 0750 EF92      		push r14
 1673               	.LCFI67:
 1674               		.cfi_def_cfa_offset 8
 1675               		.cfi_offset 14, -7
 1676 0752 FF92      		push r15
 1677               	.LCFI68:
 1678               		.cfi_def_cfa_offset 9
 1679               		.cfi_offset 15, -8
 1680 0754 0F93      		push r16
 1681               	.LCFI69:
 1682               		.cfi_def_cfa_offset 10
 1683               		.cfi_offset 16, -9
 1684 0756 1F93      		push r17
 1685               	.LCFI70:
 1686               		.cfi_def_cfa_offset 11
 1687               		.cfi_offset 17, -10
 1688 0758 CF93      		push r28
 1689               	.LCFI71:
 1690               		.cfi_def_cfa_offset 12
 1691               		.cfi_offset 28, -11
 1692 075a DF93      		push r29
 1693               	.LCFI72:
 1694               		.cfi_def_cfa_offset 13
 1695               		.cfi_offset 29, -12
 1696 075c CDB7      		in r28,__SP_L__
 1697 075e DEB7      		in r29,__SP_H__
 1698               	.LCFI73:
 1699               		.cfi_def_cfa_register 28
 1700 0760 2997      		sbiw r28,9
 1701               	.LCFI74:
 1702               		.cfi_def_cfa_offset 22
 1703 0762 0FB6      		in __tmp_reg__,__SREG__
 1704 0764 F894      		cli
 1705 0766 DEBF      		out __SP_H__,r29
 1706 0768 0FBE      		out __SREG__,__tmp_reg__
 1707 076a CDBF      		out __SP_L__,r28
 1708               	/* prologue: function */
 1709               	/* frame size = 9 */
 1710               	/* stack size = 20 */
 1711               	.L__stack_usage = 20
 1712 076c B82E      		mov r11,r24
 1713 076e 162F      		mov r17,r22
 402:lcd.c         ****     uint8_t buffer[8]; // We'll use this buffer, along with the mask, to
 1714               		.loc 1 402 0
 1715 0770 88E0      		ldi r24,lo8(8)
 1716               	.LVL177:
 1717 0772 489F      		mul r20,r24
 1718 0774 7001      		movw r14,r0
 1719 0776 1124      		clr __zero_reg__
 1720               	.LVL178:
 406:lcd.c         ****     // Okay, now our buffer is full of the contents of the landing zone for
 1721               		.loc 1 406 0
 1722 0778 AE01      		movw r20,r28
 1723               	.LVL179:
 1724 077a 4F5F      		subi r20,-1
 1725 077c 5F4F      		sbci r21,-1
 1726 077e 8B2D      		mov r24,r11
 1727 0780 2987      		std Y+9,r18
 1728 0782 0E94 0000 		call lcdGetDataBlock
 1729               	.LVL180:
 1730               	.LBB24:
 412:lcd.c         ****     {
 1731               		.loc 1 412 0
 1732 0786 DE01      		movw r26,r28
 1733 0788 1196      		adiw r26,1
 1734 078a A701      		movw r20,r14
 1735 078c C701      		movw r24,r14
 1736 078e 0896      		adiw r24,8
 1737 0790 2985      		ldd r18,Y+9
 1738               	.LVL181:
 1739               	.L120:
 412:lcd.c         ****     {
 1740               		.loc 1 412 0 is_stmt 0 discriminator 1
 1741 0792 4817      		cp r20,r24
 1742 0794 5907      		cpc r21,r25
 1743 0796 00F4      		brsh .L170
 414:lcd.c         ****       buffer[i-spriteIndex] &= pgm_read_byte(&maskArray[i]);
 1744               		.loc 1 414 0 is_stmt 1
 1745 0798 3091 0000 		lds r19,reverse
 1746 079c 3323      		tst r19
 1747 079e 01F0      		breq .L121
 414:lcd.c         ****       buffer[i-spriteIndex] &= pgm_read_byte(&maskArray[i]);
 1748               		.loc 1 414 0 is_stmt 0 discriminator 1
 1749 07a0 3C91      		ld r19,X
 1750 07a2 3095      		com r19
 1751 07a4 3C93      		st X,r19
 1752               	.L121:
 1753               	.LVL182:
 1754 07a6 FA01      		movw r30,r20
 1755 07a8 E050      		subi r30,lo8(-(maskArray))
 1756 07aa F040      		sbci r31,hi8(-(maskArray))
 1757               	.LVL183:
 1758               	.LBB25:
 415:lcd.c         ****       buffer[i-spriteIndex] |= pgm_read_byte(&spriteArray[i]);
 1759               		.loc 1 415 0 is_stmt 1
 1760               	/* #APP */
 1761               	 ;  415 "lcd.c" 1
 1762 07ac 3491      		lpm r19, Z
 1763               		
 1764               	 ;  0 "" 2
 1765               	.LVL184:
 1766               	/* #NOAPP */
 1767 07ae FA01      		movw r30,r20
 1768               	.LVL185:
 1769 07b0 E050      		subi r30,lo8(-(spriteArray))
 1770 07b2 F040      		sbci r31,hi8(-(spriteArray))
 1771               	.LVL186:
 1772               	.LBE25:
 1773               	.LBB26:
 416:lcd.c         ****     }
 1774               		.loc 1 416 0
 1775               	/* #APP */
 1776               	 ;  416 "lcd.c" 1
 1777 07b4 E491      		lpm r30, Z
 1778               		
 1779               	 ;  0 "" 2
 1780               	.LVL187:
 1781               	/* #NOAPP */
 1782               	.LBE26:
 415:lcd.c         ****       buffer[i-spriteIndex] |= pgm_read_byte(&spriteArray[i]);
 1783               		.loc 1 415 0
 1784 07b6 6C91      		ld r22,X
 1785 07b8 3623      		and r19,r22
 1786               	.LVL188:
 416:lcd.c         ****     }
 1787               		.loc 1 416 0
 1788 07ba 3E2B      		or r19,r30
 1789 07bc 3D93      		st X+,r19
 412:lcd.c         ****     {
 1790               		.loc 1 412 0
 1791 07be 4F5F      		subi r20,-1
 1792 07c0 5F4F      		sbci r21,-1
 1793               	.LVL189:
 1794 07c2 00C0      		rjmp .L120
 1795               	.LVL190:
 1796               	.L170:
 1797               	.LBE24:
 422:lcd.c         ****     {
 1798               		.loc 1 422 0
 1799 07c4 2333      		cpi r18,lo8(51)
 1800 07c6 01F0      		breq .L124
 1801 07c8 00F4      		brsh .L125
 1802 07ca 2033      		cpi r18,lo8(48)
 1803 07cc 01F0      		breq .+2
 1804 07ce 00C0      		rjmp .L119
 1805 07d0 6E01      		movw r12,r28
 1806 07d2 F9E0      		ldi r31,9
 1807 07d4 CF0E      		add r12,r31
 1808 07d6 D11C      		adc r13,__zero_reg__
 1809 07d8 CE01      		movw r24,r28
 1810 07da 0196      		adiw r24,1
 1811 07dc 7C01      		movw r14,r24
 1812               	.LVL191:
 1813 07de A7E0      		ldi r26,lo8(7)
 1814 07e0 9A2E      		mov r9,r26
 1815 07e2 910E      		add r9,r17
 1816 07e4 1150      		subi r17,lo8(-(-1))
 1817               	.LVL192:
 1818 07e6 00C0      		rjmp .L132
 1819               	.LVL193:
 1820               	.L125:
 1821 07e8 2633      		cpi r18,lo8(54)
 1822 07ea 01F0      		breq .L127
 1823 07ec 2933      		cpi r18,lo8(57)
 1824 07ee 01F0      		breq .+2
 1825 07f0 00C0      		rjmp .L119
 1826 07f2 87E0      		ldi r24,lo8(7)
 1827 07f4 C82E      		mov r12,r24
 1828 07f6 C10E      		add r12,r17
 1829 07f8 AA24      		clr r10
 1830 07fa AA94      		dec r10
 1831 07fc A10E      		add r10,r17
 1832 07fe FE01      		movw r30,r28
 1833 0800 3196      		adiw r30,1
 1834 0802 7F01      		movw r14,r30
 1835               	.LVL194:
 1836 0804 17E0      		ldi r17,lo8(7)
 1837               	.LVL195:
 1838 0806 1B0D      		add r17,r11
 1839 0808 BA94      		dec r11
 1840               	.LVL196:
 1841 080a 00C0      		rjmp .L129
 1842               	.LVL197:
 1843               	.L127:
 1844 080c B7E0      		ldi r27,lo8(7)
 1845 080e DB2E      		mov r13,r27
 1846 0810 DB0C      		add r13,r11
 1847 0812 BA94      		dec r11
 1848               	.LVL198:
 1849 0814 CE01      		movw r24,r28
 1850 0816 0196      		adiw r24,1
 1851 0818 7C01      		movw r14,r24
 1852               	.LVL199:
 1853 081a 00C0      		rjmp .L130
 1854               	.LVL200:
 1855               	.L124:
 1856 081c 6E01      		movw r12,r28
 1857 081e 99E0      		ldi r25,9
 1858 0820 C90E      		add r12,r25
 1859 0822 D11C      		adc r13,__zero_reg__
 1860 0824 FE01      		movw r30,r28
 1861 0826 3196      		adiw r30,1
 1862 0828 7F01      		movw r14,r30
 1863               	.LVL201:
 1864 082a 00C0      		rjmp .L131
 1865               	.LVL202:
 1866               	.L139:
 1867               	.LBB27:
 1868               	.LBB28:
 431:lcd.c         ****             else lcdDrawPixel(x+i,y+7-j,OFF);
 1869               		.loc 1 431 0
 1870 082c F701      		movw r30,r14
 1871 082e 8081      		ld r24,Z
 429:lcd.c         ****           {
 1872               		.loc 1 429 0
 1873 0830 0111      		cpse r16,__zero_reg__
 1874 0832 00C0      		rjmp .L133
 431:lcd.c         ****             else lcdDrawPixel(x+i,y+7-j,OFF);
 1875               		.loc 1 431 0
 1876 0834 80FD      		sbrc r24,0
 1877 0836 00C0      		rjmp .L136
 1878               	.L166:
 436:lcd.c         ****             else lcdDrawPixel(x+i,y+7-j,ON);
 1879               		.loc 1 436 0 discriminator 1
 1880 0838 41E0      		ldi r20,lo8(1)
 1881               	.L162:
 437:lcd.c         ****           }
 1882               		.loc 1 437 0
 1883 083a 6A2D      		mov r22,r10
 1884 083c 8B2D      		mov r24,r11
 1885 083e 0E94 0000 		call lcdDrawPixel
 1886               	.LVL203:
 439:lcd.c         ****         }
 1887               		.loc 1 439 0
 1888 0842 F701      		movw r30,r14
 1889 0844 8081      		ld r24,Z
 1890 0846 8695      		lsr r24
 1891 0848 8083      		st Z,r24
 1892               	.LVL204:
 1893 084a AA94      		dec r10
 1894               	.LVL205:
 427:lcd.c         ****         {
 1895               		.loc 1 427 0
 1896 084c A112      		cpse r10,r17
 1897 084e 00C0      		rjmp .L139
 1898               	.LVL206:
 1899 0850 FFEF      		ldi r31,-1
 1900 0852 EF1A      		sub r14,r31
 1901 0854 FF0A      		sbc r15,r31
 1902 0856 B394      		inc r11
 1903               	.LVL207:
 1904               	.LBE28:
 425:lcd.c         ****       {
 1905               		.loc 1 425 0
 1906 0858 EC14      		cp r14,r12
 1907 085a FD04      		cpc r15,r13
 1908 085c 01F4      		brne .+2
 1909 085e 00C0      		rjmp .L119
 1910               	.LVL208:
 1911               	.L132:
 1912 0860 A92C      		mov r10,r9
 1913 0862 00C0      		rjmp .L139
 1914               	.LVL209:
 1915               	.L133:
 1916               	.LBB29:
 436:lcd.c         ****             else lcdDrawPixel(x+i,y+7-j,ON);
 1917               		.loc 1 436 0
 1918 0864 80FD      		sbrc r24,0
 1919 0866 00C0      		rjmp .L166
 1920               	.L136:
 437:lcd.c         ****           }
 1921               		.loc 1 437 0
 1922 0868 40E0      		ldi r20,0
 1923 086a 00C0      		rjmp .L162
 1924               	.LVL210:
 1925               	.L146:
 1926               	.LBE29:
 1927               	.LBE27:
 1928               	.LBB30:
 1929               	.LBB31:
 450:lcd.c         ****             else lcdDrawPixel(x+j,y+i,OFF);
 1930               		.loc 1 450 0
 1931 086c F701      		movw r30,r14
 1932 086e 8081      		ld r24,Z
 448:lcd.c         ****           {
 1933               		.loc 1 448 0
 1934 0870 0111      		cpse r16,__zero_reg__
 1935 0872 00C0      		rjmp .L140
 450:lcd.c         ****             else lcdDrawPixel(x+j,y+i,OFF);
 1936               		.loc 1 450 0
 1937 0874 80FD      		sbrc r24,0
 1938 0876 00C0      		rjmp .L143
 1939               	.L167:
 455:lcd.c         ****             else lcdDrawPixel(x+j,y+i,ON);
 1940               		.loc 1 455 0 discriminator 1
 1941 0878 41E0      		ldi r20,lo8(1)
 1942               	.L163:
 456:lcd.c         ****           }
 1943               		.loc 1 456 0
 1944 087a 612F      		mov r22,r17
 1945 087c 8A2D      		mov r24,r10
 1946 087e 0E94 0000 		call lcdDrawPixel
 1947               	.LVL211:
 458:lcd.c         ****         }
 1948               		.loc 1 458 0
 1949 0882 F701      		movw r30,r14
 1950 0884 8081      		ld r24,Z
 1951 0886 8695      		lsr r24
 1952 0888 8083      		st Z,r24
 446:lcd.c         ****         {
 1953               		.loc 1 446 0
 1954 088a 9394      		inc r9
 1955               	.LVL212:
 1956 088c A394      		inc r10
 1957 088e F8E0      		ldi r31,lo8(8)
 1958               	.LVL213:
 1959 0890 9F12      		cpse r9,r31
 1960 0892 00C0      		rjmp .L146
 1961               	.LVL214:
 1962 0894 8FEF      		ldi r24,-1
 1963 0896 E81A      		sub r14,r24
 1964 0898 F80A      		sbc r15,r24
 1965 089a 1F5F      		subi r17,lo8(-(1))
 1966               	.LVL215:
 1967               	.LBE31:
 444:lcd.c         ****       {
 1968               		.loc 1 444 0
 1969 089c EC14      		cp r14,r12
 1970 089e FD04      		cpc r15,r13
 1971 08a0 01F4      		brne .+2
 1972 08a2 00C0      		rjmp .L119
 1973               	.LVL216:
 1974               	.L131:
 1975               	.LBE30:
 422:lcd.c         ****     {
 1976               		.loc 1 422 0 discriminator 1
 1977 08a4 AB2C      		mov r10,r11
 1978 08a6 912C      		mov r9,__zero_reg__
 1979 08a8 00C0      		rjmp .L146
 1980               	.LVL217:
 1981               	.L140:
 1982               	.LBB33:
 1983               	.LBB32:
 455:lcd.c         ****             else lcdDrawPixel(x+j,y+i,ON);
 1984               		.loc 1 455 0
 1985 08aa 80FD      		sbrc r24,0
 1986 08ac 00C0      		rjmp .L167
 1987               	.L143:
 456:lcd.c         ****           }
 1988               		.loc 1 456 0
 1989 08ae 40E0      		ldi r20,0
 1990 08b0 00C0      		rjmp .L163
 1991               	.LVL218:
 1992               	.L152:
 1993               	.LBE32:
 1994               	.LBE33:
 1995               	.LBB34:
 1996               	.LBB35:
 469:lcd.c         ****             else lcdDrawPixel(x+7-i,y+j,OFF);
 1997               		.loc 1 469 0
 1998 08b2 F701      		movw r30,r14
 1999 08b4 8081      		ld r24,Z
 467:lcd.c         ****           {
 2000               		.loc 1 467 0
 2001 08b6 0111      		cpse r16,__zero_reg__
 2002 08b8 00C0      		rjmp .L147
 469:lcd.c         ****             else lcdDrawPixel(x+7-i,y+j,OFF);
 2003               		.loc 1 469 0
 2004 08ba 80FD      		sbrc r24,0
 2005 08bc 00C0      		rjmp .L150
 2006               	.L168:
 474:lcd.c         ****             else lcdDrawPixel(x+7-i,y+j,ON);
 2007               		.loc 1 474 0 discriminator 1
 2008 08be 41E0      		ldi r20,lo8(1)
 2009               	.L164:
 475:lcd.c         ****           }
 2010               		.loc 1 475 0
 2011 08c0 6C2D      		mov r22,r12
 2012 08c2 8D2D      		mov r24,r13
 2013 08c4 0E94 0000 		call lcdDrawPixel
 2014               	.LVL219:
 477:lcd.c         ****         }
 2015               		.loc 1 477 0
 2016 08c8 F701      		movw r30,r14
 2017 08ca 8081      		ld r24,Z
 2018 08cc 8695      		lsr r24
 2019 08ce 8083      		st Z,r24
 465:lcd.c         ****         {
 2020               		.loc 1 465 0
 2021 08d0 A394      		inc r10
 2022               	.LVL220:
 2023 08d2 C394      		inc r12
 2024 08d4 F8E0      		ldi r31,lo8(8)
 2025               	.LVL221:
 2026 08d6 AF12      		cpse r10,r31
 2027 08d8 00C0      		rjmp .L152
 2028               	.LVL222:
 2029 08da 8FEF      		ldi r24,-1
 2030 08dc E81A      		sub r14,r24
 2031 08de F80A      		sbc r15,r24
 2032 08e0 DA94      		dec r13
 2033               	.LBE35:
 463:lcd.c         ****       {
 2034               		.loc 1 463 0
 2035 08e2 DB14      		cp r13,r11
 2036 08e4 01F0      		breq .L119
 2037               	.LVL223:
 2038               	.L130:
 2039               	.LBE34:
 422:lcd.c         ****     {
 2040               		.loc 1 422 0 discriminator 1
 2041 08e6 C12E      		mov r12,r17
 2042 08e8 A12C      		mov r10,__zero_reg__
 2043 08ea 00C0      		rjmp .L152
 2044               	.LVL224:
 2045               	.L147:
 2046               	.LBB37:
 2047               	.LBB36:
 474:lcd.c         ****             else lcdDrawPixel(x+7-i,y+j,ON);
 2048               		.loc 1 474 0
 2049 08ec 80FD      		sbrc r24,0
 2050 08ee 00C0      		rjmp .L168
 2051               	.L150:
 475:lcd.c         ****           }
 2052               		.loc 1 475 0
 2053 08f0 40E0      		ldi r20,0
 2054 08f2 00C0      		rjmp .L164
 2055               	.LVL225:
 2056               	.L158:
 2057               	.LBE36:
 2058               	.LBE37:
 2059               	.LBB38:
 2060               	.LBB39:
 488:lcd.c         ****             else lcdDrawPixel(x+7-j,y+7-i,OFF);
 2061               		.loc 1 488 0
 2062 08f4 F701      		movw r30,r14
 2063 08f6 8081      		ld r24,Z
 486:lcd.c         ****           {
 2064               		.loc 1 486 0
 2065 08f8 0111      		cpse r16,__zero_reg__
 2066 08fa 00C0      		rjmp .L153
 488:lcd.c         ****             else lcdDrawPixel(x+7-j,y+7-i,OFF);
 2067               		.loc 1 488 0
 2068 08fc 80FD      		sbrc r24,0
 2069 08fe 00C0      		rjmp .L156
 2070               	.L169:
 493:lcd.c         ****             else lcdDrawPixel(x+7-j,y+7-i,ON);
 2071               		.loc 1 493 0 discriminator 1
 2072 0900 41E0      		ldi r20,lo8(1)
 2073               	.L165:
 494:lcd.c         ****           }
 2074               		.loc 1 494 0
 2075 0902 6C2D      		mov r22,r12
 2076 0904 8D2D      		mov r24,r13
 2077 0906 0E94 0000 		call lcdDrawPixel
 2078               	.LVL226:
 496:lcd.c         ****         }
 2079               		.loc 1 496 0
 2080 090a F701      		movw r30,r14
 2081 090c 8081      		ld r24,Z
 2082 090e 8695      		lsr r24
 2083 0910 8083      		st Z,r24
 2084               	.LVL227:
 2085 0912 DA94      		dec r13
 2086               	.LVL228:
 484:lcd.c         ****         {
 2087               		.loc 1 484 0
 2088 0914 DB10      		cpse r13,r11
 2089 0916 00C0      		rjmp .L158
 2090               	.LVL229:
 2091 0918 FFEF      		ldi r31,-1
 2092 091a EF1A      		sub r14,r31
 2093 091c FF0A      		sbc r15,r31
 2094 091e CA94      		dec r12
 2095               	.LBE39:
 482:lcd.c         ****       {
 2096               		.loc 1 482 0
 2097 0920 CA14      		cp r12,r10
 2098 0922 01F0      		breq .L119
 2099               	.LVL230:
 2100               	.L129:
 2101 0924 D12E      		mov r13,r17
 2102 0926 00C0      		rjmp .L158
 2103               	.LVL231:
 2104               	.L153:
 2105               	.LBB40:
 493:lcd.c         ****             else lcdDrawPixel(x+7-j,y+7-i,ON);
 2106               		.loc 1 493 0
 2107 0928 80FD      		sbrc r24,0
 2108 092a 00C0      		rjmp .L169
 2109               	.L156:
 494:lcd.c         ****           }
 2110               		.loc 1 494 0
 2111 092c 40E0      		ldi r20,0
 2112 092e 00C0      		rjmp .L165
 2113               	.LVL232:
 2114               	.L119:
 2115               	/* epilogue start */
 2116               	.LBE40:
 2117               	.LBE38:
 501:lcd.c         **** 
 2118               		.loc 1 501 0
 2119 0930 2996      		adiw r28,9
 2120 0932 0FB6      		in __tmp_reg__,__SREG__
 2121 0934 F894      		cli
 2122 0936 DEBF      		out __SP_H__,r29
 2123 0938 0FBE      		out __SREG__,__tmp_reg__
 2124 093a CDBF      		out __SP_L__,r28
 2125 093c DF91      		pop r29
 2126 093e CF91      		pop r28
 2127 0940 1F91      		pop r17
 2128 0942 0F91      		pop r16
 2129               	.LVL233:
 2130 0944 FF90      		pop r15
 2131 0946 EF90      		pop r14
 2132 0948 DF90      		pop r13
 2133 094a CF90      		pop r12
 2134 094c BF90      		pop r11
 2135 094e AF90      		pop r10
 2136 0950 9F90      		pop r9
 2137 0952 0895      		ret
 2138               		.cfi_endproc
 2139               	.LFE7:
 2141               	.global	lcdDrawBig
 2143               	lcdDrawBig:
 2144               	.LFB12:
 621:lcd.c         **** }
 622:lcd.c         **** 
 623:lcd.c         **** 
 624:lcd.c         **** 
 625:lcd.c         **** 
 626:lcd.c         **** void lcdDrawBig(uint8_t x, uint8_t y, uint8_t digit)
 627:lcd.c         **** {
 2145               		.loc 1 627 0
 2146               		.cfi_startproc
 2147               	.LVL234:
 2148 0954 7F92      		push r7
 2149               	.LCFI75:
 2150               		.cfi_def_cfa_offset 3
 2151               		.cfi_offset 7, -2
 2152 0956 8F92      		push r8
 2153               	.LCFI76:
 2154               		.cfi_def_cfa_offset 4
 2155               		.cfi_offset 8, -3
 2156 0958 9F92      		push r9
 2157               	.LCFI77:
 2158               		.cfi_def_cfa_offset 5
 2159               		.cfi_offset 9, -4
 2160 095a AF92      		push r10
 2161               	.LCFI78:
 2162               		.cfi_def_cfa_offset 6
 2163               		.cfi_offset 10, -5
 2164 095c BF92      		push r11
 2165               	.LCFI79:
 2166               		.cfi_def_cfa_offset 7
 2167               		.cfi_offset 11, -6
 2168 095e CF92      		push r12
 2169               	.LCFI80:
 2170               		.cfi_def_cfa_offset 8
 2171               		.cfi_offset 12, -7
 2172 0960 DF92      		push r13
 2173               	.LCFI81:
 2174               		.cfi_def_cfa_offset 9
 2175               		.cfi_offset 13, -8
 2176 0962 EF92      		push r14
 2177               	.LCFI82:
 2178               		.cfi_def_cfa_offset 10
 2179               		.cfi_offset 14, -9
 2180 0964 FF92      		push r15
 2181               	.LCFI83:
 2182               		.cfi_def_cfa_offset 11
 2183               		.cfi_offset 15, -10
 2184 0966 0F93      		push r16
 2185               	.LCFI84:
 2186               		.cfi_def_cfa_offset 12
 2187               		.cfi_offset 16, -11
 2188 0968 1F93      		push r17
 2189               	.LCFI85:
 2190               		.cfi_def_cfa_offset 13
 2191               		.cfi_offset 17, -12
 2192 096a CF93      		push r28
 2193               	.LCFI86:
 2194               		.cfi_def_cfa_offset 14
 2195               		.cfi_offset 28, -13
 2196 096c DF93      		push r29
 2197               	.LCFI87:
 2198               		.cfi_def_cfa_offset 15
 2199               		.cfi_offset 29, -14
 2200               	/* prologue: function */
 2201               	/* frame size = 0 */
 2202               	/* stack size = 13 */
 2203               	.L__stack_usage = 13
 2204 096e 782E      		mov r7,r24
 2205               	.LVL235:
 2206               	.LBB41:
 2207               	.LBB42:
 2208               	.LBB43:
 2209               	.LBB44:
 628:lcd.c         **** 	for(uint8_t j = 0;j<64;j++){	// Iterate down by lines
 629:lcd.c         **** 		for(uint8_t i = 0;i<5;i++){	// Iterator across line by bytes
 630:lcd.c         **** 			uint8_t byteTemp = pgm_read_byte(&bigNumArray[digit*320+5*j+i]);
 2210               		.loc 1 630 0
 2211 0970 20E4      		ldi r18,lo8(64)
 2212 0972 31E0      		ldi r19,lo8(1)
 2213 0974 429F      		mul r20,r18
 2214 0976 6001      		movw r12,r0
 2215 0978 439F      		mul r20,r19
 2216 097a D00C      		add r13,r0
 2217 097c 1124      		clr __zero_reg__
 2218 097e B62E      		mov r11,r22
 2219 0980 C0E0      		ldi r28,0
 2220 0982 D0E0      		ldi r29,0
 2221               	.LVL236:
 2222               	.L172:
 2223               	.LBE44:
 2224               	.LBE43:
 2225               	.LBE42:
 2226               	.LBE41:
 627:lcd.c         **** 	for(uint8_t j = 0;j<64;j++){	// Iterate down by lines
 2227               		.loc 1 627 0 discriminator 1
 2228 0984 972C      		mov r9,r7
 2229 0986 00E0      		ldi r16,0
 2230 0988 10E0      		ldi r17,0
 2231 098a 7E01      		movw r14,r28
 2232 098c EC0C      		add r14,r12
 2233 098e FD1C      		adc r15,r13
 2234 0990 C701      		movw r24,r14
 2235 0992 8050      		subi r24,lo8(-(bigNumArray))
 2236 0994 9040      		sbci r25,hi8(-(bigNumArray))
 2237 0996 7C01      		movw r14,r24
 2238               	.LVL237:
 2239               	.L181:
 2240 0998 F701      		movw r30,r14
 2241 099a E00F      		add r30,r16
 2242 099c F11F      		adc r31,r17
 2243               	.LBB49:
 2244               	.LBB48:
 2245               	.LBB47:
 2246               	.LBB45:
 2247               		.loc 1 630 0
 2248               	/* #APP */
 2249               	 ;  630 "lcd.c" 1
 2250 099e 8490      		lpm r8, Z
 2251               		
 2252               	 ;  0 "" 2
 2253               	.LVL238:
 2254               	/* #NOAPP */
 2255               	.LBE45:
 2256               	.LBB46:
 631:lcd.c         **** 			for(uint8_t b = 0;b<8;b++){	// Iterate through byte by bit-shifting
 2257               		.loc 1 631 0
 2258 09a0 A12C      		mov r10,__zero_reg__
 2259               	.LVL239:
 2260               	.L178:
 632:lcd.c         **** 				if (reverse == 0)
 2261               		.loc 1 632 0
 2262 09a2 2091 0000 		lds r18,reverse
 2263 09a6 982D      		mov r25,r8
 2264 09a8 9170      		andi r25,lo8(1)
 2265 09aa 8A2D      		mov r24,r10
 2266 09ac 890D      		add r24,r9
 2267 09ae 2111      		cpse r18,__zero_reg__
 2268 09b0 00C0      		rjmp .L173
 633:lcd.c         **** 				{
 634:lcd.c         **** 					if (byteTemp&0x01) lcdDrawPixel(x+8*i+b,y+j,ON);
 2269               		.loc 1 634 0
 2270 09b2 9923      		tst r25
 2271 09b4 01F0      		breq .L183
 2272 09b6 00C0      		rjmp .L176
 2273               	.L173:
 635:lcd.c         **** 					else lcdDrawPixel(x+8*i+b,y+j,OFF);
 636:lcd.c         **** 				}
 637:lcd.c         **** 				else
 638:lcd.c         **** 				{
 639:lcd.c         **** 					if (byteTemp&0x01) lcdDrawPixel(x+8*i+b,y+j,OFF);
 2274               		.loc 1 639 0
 2275 09b8 9923      		tst r25
 2276 09ba 01F0      		breq .L176
 2277               	.L183:
 2278               		.loc 1 639 0 is_stmt 0 discriminator 1
 2279 09bc 41E0      		ldi r20,lo8(1)
 2280 09be 00C0      		rjmp .L182
 2281               	.L176:
 640:lcd.c         **** 					else lcdDrawPixel(x+8*i+b,y+j,ON);
 2282               		.loc 1 640 0 is_stmt 1
 2283 09c0 40E0      		ldi r20,0
 2284               	.L182:
 2285 09c2 6B2D      		mov r22,r11
 2286 09c4 0E94 0000 		call lcdDrawPixel
 2287               	.LVL240:
 641:lcd.c         **** 				}
 642:lcd.c         **** 				byteTemp = byteTemp>>1;
 2288               		.loc 1 642 0
 2289 09c8 8694      		lsr r8
 2290               	.LVL241:
 631:lcd.c         **** 				if (reverse == 0)
 2291               		.loc 1 631 0
 2292 09ca A394      		inc r10
 2293               	.LVL242:
 2294 09cc 88E0      		ldi r24,lo8(8)
 2295 09ce A812      		cpse r10,r24
 2296 09d0 00C0      		rjmp .L178
 2297               	.LVL243:
 2298 09d2 0F5F      		subi r16,-1
 2299 09d4 1F4F      		sbci r17,-1
 2300               	.LVL244:
 2301 09d6 980E      		add r9,r24
 2302               	.LBE46:
 2303               	.LBE47:
 629:lcd.c         **** 			uint8_t byteTemp = pgm_read_byte(&bigNumArray[digit*320+5*j+i]);
 2304               		.loc 1 629 0
 2305 09d8 0530      		cpi r16,5
 2306 09da 1105      		cpc r17,__zero_reg__
 2307 09dc 01F4      		brne .L181
 2308               	.LVL245:
 2309 09de B394      		inc r11
 2310               	.LVL246:
 2311 09e0 2596      		adiw r28,5
 2312               	.LVL247:
 2313               	.LBE48:
 628:lcd.c         **** 		for(uint8_t i = 0;i<5;i++){	// Iterator across line by bytes
 2314               		.loc 1 628 0
 2315 09e2 C034      		cpi r28,64
 2316 09e4 91E0      		ldi r25,1
 2317 09e6 D907      		cpc r29,r25
 2318 09e8 01F4      		brne .L172
 2319               	/* epilogue start */
 2320               	.LBE49:
 643:lcd.c         **** 			}
 644:lcd.c         **** 		}
 645:lcd.c         **** 	}
 646:lcd.c         **** 	
 647:lcd.c         **** 	
 648:lcd.c         **** 	
 649:lcd.c         **** }...
 2321               		.loc 1 649 0
 2322 09ea DF91      		pop r29
 2323 09ec CF91      		pop r28
 2324               	.LVL248:
 2325 09ee 1F91      		pop r17
 2326 09f0 0F91      		pop r16
 2327               	.LVL249:
 2328 09f2 FF90      		pop r15
 2329 09f4 EF90      		pop r14
 2330 09f6 DF90      		pop r13
 2331 09f8 CF90      		pop r12
 2332 09fa BF90      		pop r11
 2333               	.LVL250:
 2334 09fc AF90      		pop r10
 2335               	.LVL251:
 2336 09fe 9F90      		pop r9
 2337 0a00 8F90      		pop r8
 2338               	.LVL252:
 2339 0a02 7F90      		pop r7
 2340               	.LVL253:
 2341 0a04 0895      		ret
 2342               		.cfi_endproc
 2343               	.LFE12:
 2345               	.global	yDim
 2346               		.data
 2349               	yDim:
 2350 0000 40        		.byte	64
 2351               	.global	xDim
 2354               	xDim:
 2355 0001 80        		.byte	-128
 2356               	.global	textLength
 2357               		.section .bss
 2360               	textLength:
 2361 0000 0000      		.zero	2
 2362               	.global	textOrigin
 2365               	textOrigin:
 2366 0002 0000      		.zero	2
 2367               	.global	cursorPos
 2370               	cursorPos:
 2371 0004 0000      		.zero	2
 2372               		.section	.progmem.data,"a",@progbits
 2375               	bigNumArray:
 2376 0000 00        		.byte	0
 2377 0001 00        		.byte	0
 2378 0002 00        		.byte	0
 2379 0003 00        		.byte	0
 2380 0004 00        		.byte	0
 2381 0005 00        		.byte	0
 2382 0006 00        		.byte	0
 2383 0007 00        		.byte	0
 2384 0008 00        		.byte	0
 2385 0009 00        		.byte	0
 2386 000a 00        		.byte	0
 2387 000b 00        		.byte	0
 2388 000c 00        		.byte	0
 2389 000d 00        		.byte	0
 2390 000e 00        		.byte	0
 2391 000f 00        		.byte	0
 2392 0010 00        		.byte	0
 2393 0011 00        		.byte	0
 2394 0012 00        		.byte	0
 2395 0013 00        		.byte	0
 2396 0014 07        		.byte	7
 2397 0015 FF        		.byte	-1
 2398 0016 FF        		.byte	-1
 2399 0017 FF        		.byte	-1
 2400 0018 E0        		.byte	-32
 2401 0019 0F        		.byte	15
 2402 001a FF        		.byte	-1
 2403 001b FF        		.byte	-1
 2404 001c FF        		.byte	-1
 2405 001d F0        		.byte	-16
 2406 001e 1F        		.byte	31
 2407 001f FF        		.byte	-1
 2408 0020 FF        		.byte	-1
 2409 0021 FF        		.byte	-1
 2410 0022 F8        		.byte	-8
 2411 0023 1F        		.byte	31
 2412 0024 FF        		.byte	-1
 2413 0025 FF        		.byte	-1
 2414 0026 FF        		.byte	-1
 2415 0027 F8        		.byte	-8
 2416 0028 1F        		.byte	31
 2417 0029 FF        		.byte	-1
 2418 002a FF        		.byte	-1
 2419 002b FF        		.byte	-1
 2420 002c F8        		.byte	-8
 2421 002d 1F        		.byte	31
 2422 002e FF        		.byte	-1
 2423 002f FF        		.byte	-1
 2424 0030 FF        		.byte	-1
 2425 0031 F8        		.byte	-8
 2426 0032 1F        		.byte	31
 2427 0033 FF        		.byte	-1
 2428 0034 FF        		.byte	-1
 2429 0035 FF        		.byte	-1
 2430 0036 F8        		.byte	-8
 2431 0037 1F        		.byte	31
 2432 0038 FF        		.byte	-1
 2433 0039 FF        		.byte	-1
 2434 003a FF        		.byte	-1
 2435 003b F8        		.byte	-8
 2436 003c 1F        		.byte	31
 2437 003d E0        		.byte	-32
 2438 003e 00        		.byte	0
 2439 003f 07        		.byte	7
 2440 0040 F8        		.byte	-8
 2441 0041 1F        		.byte	31
 2442 0042 E0        		.byte	-32
 2443 0043 00        		.byte	0
 2444 0044 07        		.byte	7
 2445 0045 F8        		.byte	-8
 2446 0046 1F        		.byte	31
 2447 0047 E0        		.byte	-32
 2448 0048 00        		.byte	0
 2449 0049 07        		.byte	7
 2450 004a F8        		.byte	-8
 2451 004b 1F        		.byte	31
 2452 004c E0        		.byte	-32
 2453 004d 00        		.byte	0
 2454 004e 07        		.byte	7
 2455 004f F8        		.byte	-8
 2456 0050 1F        		.byte	31
 2457 0051 E0        		.byte	-32
 2458 0052 00        		.byte	0
 2459 0053 07        		.byte	7
 2460 0054 F8        		.byte	-8
 2461 0055 1F        		.byte	31
 2462 0056 E0        		.byte	-32
 2463 0057 00        		.byte	0
 2464 0058 07        		.byte	7
 2465 0059 F8        		.byte	-8
 2466 005a 1F        		.byte	31
 2467 005b E0        		.byte	-32
 2468 005c 00        		.byte	0
 2469 005d 07        		.byte	7
 2470 005e F8        		.byte	-8
 2471 005f 1F        		.byte	31
 2472 0060 E0        		.byte	-32
 2473 0061 00        		.byte	0
 2474 0062 07        		.byte	7
 2475 0063 F8        		.byte	-8
 2476 0064 1F        		.byte	31
 2477 0065 E0        		.byte	-32
 2478 0066 00        		.byte	0
 2479 0067 07        		.byte	7
 2480 0068 F8        		.byte	-8
 2481 0069 1F        		.byte	31
 2482 006a E0        		.byte	-32
 2483 006b 00        		.byte	0
 2484 006c 07        		.byte	7
 2485 006d F8        		.byte	-8
 2486 006e 1F        		.byte	31
 2487 006f E0        		.byte	-32
 2488 0070 00        		.byte	0
 2489 0071 07        		.byte	7
 2490 0072 F8        		.byte	-8
 2491 0073 1F        		.byte	31
 2492 0074 E0        		.byte	-32
 2493 0075 00        		.byte	0
 2494 0076 07        		.byte	7
 2495 0077 F8        		.byte	-8
 2496 0078 1F        		.byte	31
 2497 0079 E0        		.byte	-32
 2498 007a 00        		.byte	0
 2499 007b 07        		.byte	7
 2500 007c F8        		.byte	-8
 2501 007d 1F        		.byte	31
 2502 007e E0        		.byte	-32
 2503 007f 00        		.byte	0
 2504 0080 07        		.byte	7
 2505 0081 F8        		.byte	-8
 2506 0082 1F        		.byte	31
 2507 0083 E0        		.byte	-32
 2508 0084 00        		.byte	0
 2509 0085 07        		.byte	7
 2510 0086 F8        		.byte	-8
 2511 0087 1F        		.byte	31
 2512 0088 E0        		.byte	-32
 2513 0089 00        		.byte	0
 2514 008a 07        		.byte	7
 2515 008b F8        		.byte	-8
 2516 008c 1F        		.byte	31
 2517 008d E0        		.byte	-32
 2518 008e 00        		.byte	0
 2519 008f 07        		.byte	7
 2520 0090 F8        		.byte	-8
 2521 0091 1F        		.byte	31
 2522 0092 E0        		.byte	-32
 2523 0093 00        		.byte	0
 2524 0094 07        		.byte	7
 2525 0095 F8        		.byte	-8
 2526 0096 1F        		.byte	31
 2527 0097 E0        		.byte	-32
 2528 0098 00        		.byte	0
 2529 0099 07        		.byte	7
 2530 009a F8        		.byte	-8
 2531 009b 1F        		.byte	31
 2532 009c E0        		.byte	-32
 2533 009d 00        		.byte	0
 2534 009e 07        		.byte	7
 2535 009f F8        		.byte	-8
 2536 00a0 1F        		.byte	31
 2537 00a1 E0        		.byte	-32
 2538 00a2 00        		.byte	0
 2539 00a3 07        		.byte	7
 2540 00a4 F8        		.byte	-8
 2541 00a5 1F        		.byte	31
 2542 00a6 E0        		.byte	-32
 2543 00a7 00        		.byte	0
 2544 00a8 07        		.byte	7
 2545 00a9 F8        		.byte	-8
 2546 00aa 1F        		.byte	31
 2547 00ab E0        		.byte	-32
 2548 00ac 00        		.byte	0
 2549 00ad 07        		.byte	7
 2550 00ae F8        		.byte	-8
 2551 00af 1F        		.byte	31
 2552 00b0 E0        		.byte	-32
 2553 00b1 00        		.byte	0
 2554 00b2 07        		.byte	7
 2555 00b3 F8        		.byte	-8
 2556 00b4 1F        		.byte	31
 2557 00b5 E0        		.byte	-32
 2558 00b6 00        		.byte	0
 2559 00b7 07        		.byte	7
 2560 00b8 F8        		.byte	-8
 2561 00b9 1F        		.byte	31
 2562 00ba E0        		.byte	-32
 2563 00bb 00        		.byte	0
 2564 00bc 07        		.byte	7
 2565 00bd F8        		.byte	-8
 2566 00be 1F        		.byte	31
 2567 00bf E0        		.byte	-32
 2568 00c0 00        		.byte	0
 2569 00c1 07        		.byte	7
 2570 00c2 F8        		.byte	-8
 2571 00c3 1F        		.byte	31
 2572 00c4 E0        		.byte	-32
 2573 00c5 00        		.byte	0
 2574 00c6 07        		.byte	7
 2575 00c7 F8        		.byte	-8
 2576 00c8 1F        		.byte	31
 2577 00c9 E0        		.byte	-32
 2578 00ca 00        		.byte	0
 2579 00cb 07        		.byte	7
 2580 00cc F8        		.byte	-8
 2581 00cd 1F        		.byte	31
 2582 00ce E0        		.byte	-32
 2583 00cf 00        		.byte	0
 2584 00d0 07        		.byte	7
 2585 00d1 F8        		.byte	-8
 2586 00d2 1F        		.byte	31
 2587 00d3 E0        		.byte	-32
 2588 00d4 00        		.byte	0
 2589 00d5 07        		.byte	7
 2590 00d6 F8        		.byte	-8
 2591 00d7 1F        		.byte	31
 2592 00d8 E0        		.byte	-32
 2593 00d9 00        		.byte	0
 2594 00da 07        		.byte	7
 2595 00db F8        		.byte	-8
 2596 00dc 1F        		.byte	31
 2597 00dd E0        		.byte	-32
 2598 00de 00        		.byte	0
 2599 00df 07        		.byte	7
 2600 00e0 F8        		.byte	-8
 2601 00e1 1F        		.byte	31
 2602 00e2 E0        		.byte	-32
 2603 00e3 00        		.byte	0
 2604 00e4 07        		.byte	7
 2605 00e5 F8        		.byte	-8
 2606 00e6 1F        		.byte	31
 2607 00e7 E0        		.byte	-32
 2608 00e8 00        		.byte	0
 2609 00e9 07        		.byte	7
 2610 00ea F8        		.byte	-8
 2611 00eb 1F        		.byte	31
 2612 00ec E0        		.byte	-32
 2613 00ed 00        		.byte	0
 2614 00ee 07        		.byte	7
 2615 00ef F8        		.byte	-8
 2616 00f0 1F        		.byte	31
 2617 00f1 E0        		.byte	-32
 2618 00f2 00        		.byte	0
 2619 00f3 07        		.byte	7
 2620 00f4 F8        		.byte	-8
 2621 00f5 1F        		.byte	31
 2622 00f6 E0        		.byte	-32
 2623 00f7 00        		.byte	0
 2624 00f8 07        		.byte	7
 2625 00f9 F8        		.byte	-8
 2626 00fa 1F        		.byte	31
 2627 00fb E0        		.byte	-32
 2628 00fc 00        		.byte	0
 2629 00fd 07        		.byte	7
 2630 00fe F8        		.byte	-8
 2631 00ff 1F        		.byte	31
 2632 0100 E0        		.byte	-32
 2633 0101 00        		.byte	0
 2634 0102 07        		.byte	7
 2635 0103 F8        		.byte	-8
 2636 0104 1F        		.byte	31
 2637 0105 FF        		.byte	-1
 2638 0106 FF        		.byte	-1
 2639 0107 FF        		.byte	-1
 2640 0108 F8        		.byte	-8
 2641 0109 1F        		.byte	31
 2642 010a FF        		.byte	-1
 2643 010b FF        		.byte	-1
 2644 010c FF        		.byte	-1
 2645 010d F8        		.byte	-8
 2646 010e 1F        		.byte	31
 2647 010f FF        		.byte	-1
 2648 0110 FF        		.byte	-1
 2649 0111 FF        		.byte	-1
 2650 0112 F8        		.byte	-8
 2651 0113 1F        		.byte	31
 2652 0114 FF        		.byte	-1
 2653 0115 FF        		.byte	-1
 2654 0116 FF        		.byte	-1
 2655 0117 F8        		.byte	-8
 2656 0118 1F        		.byte	31
 2657 0119 FF        		.byte	-1
 2658 011a FF        		.byte	-1
 2659 011b FF        		.byte	-1
 2660 011c F8        		.byte	-8
 2661 011d 1F        		.byte	31
 2662 011e FF        		.byte	-1
 2663 011f FF        		.byte	-1
 2664 0120 FF        		.byte	-1
 2665 0121 F8        		.byte	-8
 2666 0122 0F        		.byte	15
 2667 0123 FF        		.byte	-1
 2668 0124 FF        		.byte	-1
 2669 0125 FF        		.byte	-1
 2670 0126 F0        		.byte	-16
 2671 0127 07        		.byte	7
 2672 0128 FF        		.byte	-1
 2673 0129 FF        		.byte	-1
 2674 012a FF        		.byte	-1
 2675 012b E0        		.byte	-32
 2676 012c 00        		.byte	0
 2677 012d 00        		.byte	0
 2678 012e 00        		.byte	0
 2679 012f 00        		.byte	0
 2680 0130 00        		.byte	0
 2681 0131 00        		.byte	0
 2682 0132 00        		.byte	0
 2683 0133 00        		.byte	0
 2684 0134 00        		.byte	0
 2685 0135 00        		.byte	0
 2686 0136 00        		.byte	0
 2687 0137 00        		.byte	0
 2688 0138 00        		.byte	0
 2689 0139 00        		.byte	0
 2690 013a 00        		.byte	0
 2691 013b 00        		.byte	0
 2692 013c 00        		.byte	0
 2693 013d 00        		.byte	0
 2694 013e 00        		.byte	0
 2695 013f 00        		.byte	0
 2696 0140 00        		.byte	0
 2697 0141 00        		.byte	0
 2698 0142 00        		.byte	0
 2699 0143 00        		.byte	0
 2700 0144 00        		.byte	0
 2701 0145 00        		.byte	0
 2702 0146 00        		.byte	0
 2703 0147 00        		.byte	0
 2704 0148 00        		.byte	0
 2705 0149 00        		.byte	0
 2706 014a 00        		.byte	0
 2707 014b 00        		.byte	0
 2708 014c 00        		.byte	0
 2709 014d 00        		.byte	0
 2710 014e 00        		.byte	0
 2711 014f 00        		.byte	0
 2712 0150 00        		.byte	0
 2713 0151 00        		.byte	0
 2714 0152 00        		.byte	0
 2715 0153 00        		.byte	0
 2716 0154 00        		.byte	0
 2717 0155 00        		.byte	0
 2718 0156 3F        		.byte	63
 2719 0157 80        		.byte	-128
 2720 0158 00        		.byte	0
 2721 0159 00        		.byte	0
 2722 015a 00        		.byte	0
 2723 015b FF        		.byte	-1
 2724 015c C0        		.byte	-64
 2725 015d 00        		.byte	0
 2726 015e 00        		.byte	0
 2727 015f 01        		.byte	1
 2728 0160 FF        		.byte	-1
 2729 0161 C0        		.byte	-64
 2730 0162 00        		.byte	0
 2731 0163 00        		.byte	0
 2732 0164 07        		.byte	7
 2733 0165 FF        		.byte	-1
 2734 0166 C0        		.byte	-64
 2735 0167 00        		.byte	0
 2736 0168 00        		.byte	0
 2737 0169 1F        		.byte	31
 2738 016a FF        		.byte	-1
 2739 016b C0        		.byte	-64
 2740 016c 00        		.byte	0
 2741 016d 00        		.byte	0
 2742 016e 3F        		.byte	63
 2743 016f FF        		.byte	-1
 2744 0170 C0        		.byte	-64
 2745 0171 00        		.byte	0
 2746 0172 00        		.byte	0
 2747 0173 FF        		.byte	-1
 2748 0174 FF        		.byte	-1
 2749 0175 C0        		.byte	-64
 2750 0176 00        		.byte	0
 2751 0177 01        		.byte	1
 2752 0178 FF        		.byte	-1
 2753 0179 FF        		.byte	-1
 2754 017a C0        		.byte	-64
 2755 017b 00        		.byte	0
 2756 017c 01        		.byte	1
 2757 017d FF        		.byte	-1
 2758 017e FF        		.byte	-1
 2759 017f C0        		.byte	-64
 2760 0180 00        		.byte	0
 2761 0181 01        		.byte	1
 2762 0182 FF        		.byte	-1
 2763 0183 FF        		.byte	-1
 2764 0184 C0        		.byte	-64
 2765 0185 00        		.byte	0
 2766 0186 01        		.byte	1
 2767 0187 FF        		.byte	-1
 2768 0188 FF        		.byte	-1
 2769 0189 C0        		.byte	-64
 2770 018a 00        		.byte	0
 2771 018b 01        		.byte	1
 2772 018c FF        		.byte	-1
 2773 018d FF        		.byte	-1
 2774 018e C0        		.byte	-64
 2775 018f 00        		.byte	0
 2776 0190 01        		.byte	1
 2777 0191 FF        		.byte	-1
 2778 0192 FF        		.byte	-1
 2779 0193 C0        		.byte	-64
 2780 0194 00        		.byte	0
 2781 0195 01        		.byte	1
 2782 0196 FF        		.byte	-1
 2783 0197 FF        		.byte	-1
 2784 0198 C0        		.byte	-64
 2785 0199 00        		.byte	0
 2786 019a 00        		.byte	0
 2787 019b 00        		.byte	0
 2788 019c FF        		.byte	-1
 2789 019d C0        		.byte	-64
 2790 019e 00        		.byte	0
 2791 019f 00        		.byte	0
 2792 01a0 00        		.byte	0
 2793 01a1 FF        		.byte	-1
 2794 01a2 C0        		.byte	-64
 2795 01a3 00        		.byte	0
 2796 01a4 00        		.byte	0
 2797 01a5 00        		.byte	0
 2798 01a6 FF        		.byte	-1
 2799 01a7 C0        		.byte	-64
 2800 01a8 00        		.byte	0
 2801 01a9 00        		.byte	0
 2802 01aa 00        		.byte	0
 2803 01ab FF        		.byte	-1
 2804 01ac C0        		.byte	-64
 2805 01ad 00        		.byte	0
 2806 01ae 00        		.byte	0
 2807 01af 00        		.byte	0
 2808 01b0 FF        		.byte	-1
 2809 01b1 C0        		.byte	-64
 2810 01b2 00        		.byte	0
 2811 01b3 00        		.byte	0
 2812 01b4 00        		.byte	0
 2813 01b5 FF        		.byte	-1
 2814 01b6 C0        		.byte	-64
 2815 01b7 00        		.byte	0
 2816 01b8 00        		.byte	0
 2817 01b9 00        		.byte	0
 2818 01ba FF        		.byte	-1
 2819 01bb C0        		.byte	-64
 2820 01bc 00        		.byte	0
 2821 01bd 00        		.byte	0
 2822 01be 00        		.byte	0
 2823 01bf FF        		.byte	-1
 2824 01c0 C0        		.byte	-64
 2825 01c1 00        		.byte	0
 2826 01c2 00        		.byte	0
 2827 01c3 00        		.byte	0
 2828 01c4 FF        		.byte	-1
 2829 01c5 C0        		.byte	-64
 2830 01c6 00        		.byte	0
 2831 01c7 00        		.byte	0
 2832 01c8 00        		.byte	0
 2833 01c9 FF        		.byte	-1
 2834 01ca C0        		.byte	-64
 2835 01cb 00        		.byte	0
 2836 01cc 00        		.byte	0
 2837 01cd 00        		.byte	0
 2838 01ce FF        		.byte	-1
 2839 01cf C0        		.byte	-64
 2840 01d0 00        		.byte	0
 2841 01d1 00        		.byte	0
 2842 01d2 00        		.byte	0
 2843 01d3 FF        		.byte	-1
 2844 01d4 C0        		.byte	-64
 2845 01d5 00        		.byte	0
 2846 01d6 00        		.byte	0
 2847 01d7 00        		.byte	0
 2848 01d8 FF        		.byte	-1
 2849 01d9 C0        		.byte	-64
 2850 01da 00        		.byte	0
 2851 01db 00        		.byte	0
 2852 01dc 00        		.byte	0
 2853 01dd FF        		.byte	-1
 2854 01de C0        		.byte	-64
 2855 01df 00        		.byte	0
 2856 01e0 00        		.byte	0
 2857 01e1 00        		.byte	0
 2858 01e2 FF        		.byte	-1
 2859 01e3 C0        		.byte	-64
 2860 01e4 00        		.byte	0
 2861 01e5 00        		.byte	0
 2862 01e6 00        		.byte	0
 2863 01e7 FF        		.byte	-1
 2864 01e8 C0        		.byte	-64
 2865 01e9 00        		.byte	0
 2866 01ea 00        		.byte	0
 2867 01eb 00        		.byte	0
 2868 01ec FF        		.byte	-1
 2869 01ed C0        		.byte	-64
 2870 01ee 00        		.byte	0
 2871 01ef 00        		.byte	0
 2872 01f0 00        		.byte	0
 2873 01f1 FF        		.byte	-1
 2874 01f2 C0        		.byte	-64
 2875 01f3 00        		.byte	0
 2876 01f4 00        		.byte	0
 2877 01f5 00        		.byte	0
 2878 01f6 FF        		.byte	-1
 2879 01f7 C0        		.byte	-64
 2880 01f8 00        		.byte	0
 2881 01f9 00        		.byte	0
 2882 01fa 00        		.byte	0
 2883 01fb FF        		.byte	-1
 2884 01fc C0        		.byte	-64
 2885 01fd 00        		.byte	0
 2886 01fe 00        		.byte	0
 2887 01ff 00        		.byte	0
 2888 0200 FF        		.byte	-1
 2889 0201 C0        		.byte	-64
 2890 0202 00        		.byte	0
 2891 0203 00        		.byte	0
 2892 0204 00        		.byte	0
 2893 0205 FF        		.byte	-1
 2894 0206 C0        		.byte	-64
 2895 0207 00        		.byte	0
 2896 0208 00        		.byte	0
 2897 0209 00        		.byte	0
 2898 020a FF        		.byte	-1
 2899 020b C0        		.byte	-64
 2900 020c 00        		.byte	0
 2901 020d 00        		.byte	0
 2902 020e 00        		.byte	0
 2903 020f FF        		.byte	-1
 2904 0210 C0        		.byte	-64
 2905 0211 00        		.byte	0
 2906 0212 00        		.byte	0
 2907 0213 00        		.byte	0
 2908 0214 FF        		.byte	-1
 2909 0215 C0        		.byte	-64
 2910 0216 00        		.byte	0
 2911 0217 00        		.byte	0
 2912 0218 00        		.byte	0
 2913 0219 FF        		.byte	-1
 2914 021a C0        		.byte	-64
 2915 021b 00        		.byte	0
 2916 021c 00        		.byte	0
 2917 021d 00        		.byte	0
 2918 021e FF        		.byte	-1
 2919 021f C0        		.byte	-64
 2920 0220 00        		.byte	0
 2921 0221 00        		.byte	0
 2922 0222 00        		.byte	0
 2923 0223 FF        		.byte	-1
 2924 0224 C0        		.byte	-64
 2925 0225 00        		.byte	0
 2926 0226 00        		.byte	0
 2927 0227 00        		.byte	0
 2928 0228 FF        		.byte	-1
 2929 0229 C0        		.byte	-64
 2930 022a 00        		.byte	0
 2931 022b 00        		.byte	0
 2932 022c 00        		.byte	0
 2933 022d FF        		.byte	-1
 2934 022e C0        		.byte	-64
 2935 022f 00        		.byte	0
 2936 0230 00        		.byte	0
 2937 0231 00        		.byte	0
 2938 0232 FF        		.byte	-1
 2939 0233 C0        		.byte	-64
 2940 0234 00        		.byte	0
 2941 0235 00        		.byte	0
 2942 0236 00        		.byte	0
 2943 0237 FF        		.byte	-1
 2944 0238 C0        		.byte	-64
 2945 0239 00        		.byte	0
 2946 023a 00        		.byte	0
 2947 023b 00        		.byte	0
 2948 023c FF        		.byte	-1
 2949 023d C0        		.byte	-64
 2950 023e 00        		.byte	0
 2951 023f 00        		.byte	0
 2952 0240 00        		.byte	0
 2953 0241 FF        		.byte	-1
 2954 0242 C0        		.byte	-64
 2955 0243 00        		.byte	0
 2956 0244 00        		.byte	0
 2957 0245 00        		.byte	0
 2958 0246 FF        		.byte	-1
 2959 0247 C0        		.byte	-64
 2960 0248 00        		.byte	0
 2961 0249 00        		.byte	0
 2962 024a 00        		.byte	0
 2963 024b FF        		.byte	-1
 2964 024c C0        		.byte	-64
 2965 024d 00        		.byte	0
 2966 024e 00        		.byte	0
 2967 024f 00        		.byte	0
 2968 0250 FF        		.byte	-1
 2969 0251 C0        		.byte	-64
 2970 0252 00        		.byte	0
 2971 0253 00        		.byte	0
 2972 0254 00        		.byte	0
 2973 0255 FF        		.byte	-1
 2974 0256 C0        		.byte	-64
 2975 0257 00        		.byte	0
 2976 0258 00        		.byte	0
 2977 0259 00        		.byte	0
 2978 025a FF        		.byte	-1
 2979 025b C0        		.byte	-64
 2980 025c 00        		.byte	0
 2981 025d 00        		.byte	0
 2982 025e 00        		.byte	0
 2983 025f FF        		.byte	-1
 2984 0260 C0        		.byte	-64
 2985 0261 00        		.byte	0
 2986 0262 00        		.byte	0
 2987 0263 00        		.byte	0
 2988 0264 FF        		.byte	-1
 2989 0265 C0        		.byte	-64
 2990 0266 00        		.byte	0
 2991 0267 00        		.byte	0
 2992 0268 00        		.byte	0
 2993 0269 FF        		.byte	-1
 2994 026a C0        		.byte	-64
 2995 026b 00        		.byte	0
 2996 026c 00        		.byte	0
 2997 026d 00        		.byte	0
 2998 026e 00        		.byte	0
 2999 026f 00        		.byte	0
 3000 0270 00        		.byte	0
 3001 0271 00        		.byte	0
 3002 0272 00        		.byte	0
 3003 0273 00        		.byte	0
 3004 0274 00        		.byte	0
 3005 0275 00        		.byte	0
 3006 0276 00        		.byte	0
 3007 0277 00        		.byte	0
 3008 0278 00        		.byte	0
 3009 0279 00        		.byte	0
 3010 027a 00        		.byte	0
 3011 027b 00        		.byte	0
 3012 027c 00        		.byte	0
 3013 027d 00        		.byte	0
 3014 027e 00        		.byte	0
 3015 027f 00        		.byte	0
 3016 0280 00        		.byte	0
 3017 0281 00        		.byte	0
 3018 0282 00        		.byte	0
 3019 0283 00        		.byte	0
 3020 0284 00        		.byte	0
 3021 0285 00        		.byte	0
 3022 0286 00        		.byte	0
 3023 0287 00        		.byte	0
 3024 0288 00        		.byte	0
 3025 0289 00        		.byte	0
 3026 028a 00        		.byte	0
 3027 028b 00        		.byte	0
 3028 028c 00        		.byte	0
 3029 028d 00        		.byte	0
 3030 028e 00        		.byte	0
 3031 028f 00        		.byte	0
 3032 0290 00        		.byte	0
 3033 0291 00        		.byte	0
 3034 0292 00        		.byte	0
 3035 0293 00        		.byte	0
 3036 0294 03        		.byte	3
 3037 0295 FF        		.byte	-1
 3038 0296 FF        		.byte	-1
 3039 0297 FF        		.byte	-1
 3040 0298 E0        		.byte	-32
 3041 0299 07        		.byte	7
 3042 029a FF        		.byte	-1
 3043 029b FF        		.byte	-1
 3044 029c FF        		.byte	-1
 3045 029d F0        		.byte	-16
 3046 029e 0F        		.byte	15
 3047 029f FF        		.byte	-1
 3048 02a0 FF        		.byte	-1
 3049 02a1 FF        		.byte	-1
 3050 02a2 F8        		.byte	-8
 3051 02a3 1F        		.byte	31
 3052 02a4 FF        		.byte	-1
 3053 02a5 FF        		.byte	-1
 3054 02a6 FF        		.byte	-1
 3055 02a7 F8        		.byte	-8
 3056 02a8 1F        		.byte	31
 3057 02a9 FF        		.byte	-1
 3058 02aa FF        		.byte	-1
 3059 02ab FF        		.byte	-1
 3060 02ac F8        		.byte	-8
 3061 02ad 1F        		.byte	31
 3062 02ae FF        		.byte	-1
 3063 02af FF        		.byte	-1
 3064 02b0 FF        		.byte	-1
 3065 02b1 F8        		.byte	-8
 3066 02b2 1F        		.byte	31
 3067 02b3 FF        		.byte	-1
 3068 02b4 FF        		.byte	-1
 3069 02b5 FF        		.byte	-1
 3070 02b6 F8        		.byte	-8
 3071 02b7 1F        		.byte	31
 3072 02b8 FF        		.byte	-1
 3073 02b9 FF        		.byte	-1
 3074 02ba FF        		.byte	-1
 3075 02bb F8        		.byte	-8
 3076 02bc 1F        		.byte	31
 3077 02bd FF        		.byte	-1
 3078 02be FF        		.byte	-1
 3079 02bf FF        		.byte	-1
 3080 02c0 F8        		.byte	-8
 3081 02c1 00        		.byte	0
 3082 02c2 00        		.byte	0
 3083 02c3 00        		.byte	0
 3084 02c4 1F        		.byte	31
 3085 02c5 F8        		.byte	-8
 3086 02c6 00        		.byte	0
 3087 02c7 00        		.byte	0
 3088 02c8 00        		.byte	0
 3089 02c9 0F        		.byte	15
 3090 02ca F8        		.byte	-8
 3091 02cb 00        		.byte	0
 3092 02cc 00        		.byte	0
 3093 02cd 00        		.byte	0
 3094 02ce 0F        		.byte	15
 3095 02cf F8        		.byte	-8
 3096 02d0 00        		.byte	0
 3097 02d1 00        		.byte	0
 3098 02d2 00        		.byte	0
 3099 02d3 0F        		.byte	15
 3100 02d4 F8        		.byte	-8
 3101 02d5 00        		.byte	0
 3102 02d6 00        		.byte	0
 3103 02d7 00        		.byte	0
 3104 02d8 0F        		.byte	15
 3105 02d9 F8        		.byte	-8
 3106 02da 00        		.byte	0
 3107 02db 00        		.byte	0
 3108 02dc 00        		.byte	0
 3109 02dd 0F        		.byte	15
 3110 02de F8        		.byte	-8
 3111 02df 00        		.byte	0
 3112 02e0 00        		.byte	0
 3113 02e1 00        		.byte	0
 3114 02e2 0F        		.byte	15
 3115 02e3 F8        		.byte	-8
 3116 02e4 00        		.byte	0
 3117 02e5 00        		.byte	0
 3118 02e6 00        		.byte	0
 3119 02e7 0F        		.byte	15
 3120 02e8 F8        		.byte	-8
 3121 02e9 00        		.byte	0
 3122 02ea 00        		.byte	0
 3123 02eb 00        		.byte	0
 3124 02ec 0F        		.byte	15
 3125 02ed F8        		.byte	-8
 3126 02ee 00        		.byte	0
 3127 02ef 00        		.byte	0
 3128 02f0 00        		.byte	0
 3129 02f1 0F        		.byte	15
 3130 02f2 F8        		.byte	-8
 3131 02f3 00        		.byte	0
 3132 02f4 00        		.byte	0
 3133 02f5 00        		.byte	0
 3134 02f6 0F        		.byte	15
 3135 02f7 F8        		.byte	-8
 3136 02f8 00        		.byte	0
 3137 02f9 00        		.byte	0
 3138 02fa 00        		.byte	0
 3139 02fb 0F        		.byte	15
 3140 02fc F8        		.byte	-8
 3141 02fd 00        		.byte	0
 3142 02fe 00        		.byte	0
 3143 02ff 00        		.byte	0
 3144 0300 0F        		.byte	15
 3145 0301 F8        		.byte	-8
 3146 0302 00        		.byte	0
 3147 0303 00        		.byte	0
 3148 0304 00        		.byte	0
 3149 0305 0F        		.byte	15
 3150 0306 F8        		.byte	-8
 3151 0307 00        		.byte	0
 3152 0308 00        		.byte	0
 3153 0309 00        		.byte	0
 3154 030a 1F        		.byte	31
 3155 030b F8        		.byte	-8
 3156 030c 07        		.byte	7
 3157 030d FF        		.byte	-1
 3158 030e FF        		.byte	-1
 3159 030f FF        		.byte	-1
 3160 0310 F8        		.byte	-8
 3161 0311 0F        		.byte	15
 3162 0312 FF        		.byte	-1
 3163 0313 FF        		.byte	-1
 3164 0314 FF        		.byte	-1
 3165 0315 F8        		.byte	-8
 3166 0316 1F        		.byte	31
 3167 0317 FF        		.byte	-1
 3168 0318 FF        		.byte	-1
 3169 0319 FF        		.byte	-1
 3170 031a F8        		.byte	-8
 3171 031b 1F        		.byte	31
 3172 031c FF        		.byte	-1
 3173 031d FF        		.byte	-1
 3174 031e FF        		.byte	-1
 3175 031f F8        		.byte	-8
 3176 0320 1F        		.byte	31
 3177 0321 FF        		.byte	-1
 3178 0322 FF        		.byte	-1
 3179 0323 FF        		.byte	-1
 3180 0324 F8        		.byte	-8
 3181 0325 1F        		.byte	31
 3182 0326 FF        		.byte	-1
 3183 0327 FF        		.byte	-1
 3184 0328 FF        		.byte	-1
 3185 0329 F8        		.byte	-8
 3186 032a 1F        		.byte	31
 3187 032b FF        		.byte	-1
 3188 032c FF        		.byte	-1
 3189 032d FF        		.byte	-1
 3190 032e F8        		.byte	-8
 3191 032f 1F        		.byte	31
 3192 0330 FF        		.byte	-1
 3193 0331 FF        		.byte	-1
 3194 0332 FF        		.byte	-1
 3195 0333 F0        		.byte	-16
 3196 0334 1F        		.byte	31
 3197 0335 FF        		.byte	-1
 3198 0336 FF        		.byte	-1
 3199 0337 FF        		.byte	-1
 3200 0338 E0        		.byte	-32
 3201 0339 1F        		.byte	31
 3202 033a F0        		.byte	-16
 3203 033b 00        		.byte	0
 3204 033c 00        		.byte	0
 3205 033d 00        		.byte	0
 3206 033e 1F        		.byte	31
 3207 033f E0        		.byte	-32
 3208 0340 00        		.byte	0
 3209 0341 00        		.byte	0
 3210 0342 00        		.byte	0
 3211 0343 1F        		.byte	31
 3212 0344 E0        		.byte	-32
 3213 0345 00        		.byte	0
 3214 0346 00        		.byte	0
 3215 0347 00        		.byte	0
 3216 0348 1F        		.byte	31
 3217 0349 E0        		.byte	-32
 3218 034a 00        		.byte	0
 3219 034b 00        		.byte	0
 3220 034c 00        		.byte	0
 3221 034d 1F        		.byte	31
 3222 034e E0        		.byte	-32
 3223 034f 00        		.byte	0
 3224 0350 00        		.byte	0
 3225 0351 00        		.byte	0
 3226 0352 1F        		.byte	31
 3227 0353 E0        		.byte	-32
 3228 0354 00        		.byte	0
 3229 0355 00        		.byte	0
 3230 0356 00        		.byte	0
 3231 0357 1F        		.byte	31
 3232 0358 E0        		.byte	-32
 3233 0359 00        		.byte	0
 3234 035a 00        		.byte	0
 3235 035b 00        		.byte	0
 3236 035c 1F        		.byte	31
 3237 035d E0        		.byte	-32
 3238 035e 00        		.byte	0
 3239 035f 00        		.byte	0
 3240 0360 00        		.byte	0
 3241 0361 1F        		.byte	31
 3242 0362 E0        		.byte	-32
 3243 0363 00        		.byte	0
 3244 0364 00        		.byte	0
 3245 0365 00        		.byte	0
 3246 0366 1F        		.byte	31
 3247 0367 E0        		.byte	-32
 3248 0368 00        		.byte	0
 3249 0369 00        		.byte	0
 3250 036a 00        		.byte	0
 3251 036b 1F        		.byte	31
 3252 036c E0        		.byte	-32
 3253 036d 00        		.byte	0
 3254 036e 00        		.byte	0
 3255 036f 00        		.byte	0
 3256 0370 1F        		.byte	31
 3257 0371 E0        		.byte	-32
 3258 0372 00        		.byte	0
 3259 0373 00        		.byte	0
 3260 0374 00        		.byte	0
 3261 0375 1F        		.byte	31
 3262 0376 E0        		.byte	-32
 3263 0377 00        		.byte	0
 3264 0378 00        		.byte	0
 3265 0379 00        		.byte	0
 3266 037a 1F        		.byte	31
 3267 037b F0        		.byte	-16
 3268 037c 00        		.byte	0
 3269 037d 00        		.byte	0
 3270 037e 00        		.byte	0
 3271 037f 1F        		.byte	31
 3272 0380 FF        		.byte	-1
 3273 0381 FF        		.byte	-1
 3274 0382 FF        		.byte	-1
 3275 0383 F8        		.byte	-8
 3276 0384 1F        		.byte	31
 3277 0385 FF        		.byte	-1
 3278 0386 FF        		.byte	-1
 3279 0387 FF        		.byte	-1
 3280 0388 F8        		.byte	-8
 3281 0389 1F        		.byte	31
 3282 038a FF        		.byte	-1
 3283 038b FF        		.byte	-1
 3284 038c FF        		.byte	-1
 3285 038d F8        		.byte	-8
 3286 038e 1F        		.byte	31
 3287 038f FF        		.byte	-1
 3288 0390 FF        		.byte	-1
 3289 0391 FF        		.byte	-1
 3290 0392 F8        		.byte	-8
 3291 0393 1F        		.byte	31
 3292 0394 FF        		.byte	-1
 3293 0395 FF        		.byte	-1
 3294 0396 FF        		.byte	-1
 3295 0397 F8        		.byte	-8
 3296 0398 1F        		.byte	31
 3297 0399 FF        		.byte	-1
 3298 039a FF        		.byte	-1
 3299 039b FF        		.byte	-1
 3300 039c F8        		.byte	-8
 3301 039d 1F        		.byte	31
 3302 039e FF        		.byte	-1
 3303 039f FF        		.byte	-1
 3304 03a0 FF        		.byte	-1
 3305 03a1 F8        		.byte	-8
 3306 03a2 1F        		.byte	31
 3307 03a3 FF        		.byte	-1
 3308 03a4 FF        		.byte	-1
 3309 03a5 FF        		.byte	-1
 3310 03a6 F8        		.byte	-8
 3311 03a7 1F        		.byte	31
 3312 03a8 FF        		.byte	-1
 3313 03a9 FF        		.byte	-1
 3314 03aa FF        		.byte	-1
 3315 03ab F8        		.byte	-8
 3316 03ac 00        		.byte	0
 3317 03ad 00        		.byte	0
 3318 03ae 00        		.byte	0
 3319 03af 00        		.byte	0
 3320 03b0 00        		.byte	0
 3321 03b1 00        		.byte	0
 3322 03b2 00        		.byte	0
 3323 03b3 00        		.byte	0
 3324 03b4 00        		.byte	0
 3325 03b5 00        		.byte	0
 3326 03b6 00        		.byte	0
 3327 03b7 00        		.byte	0
 3328 03b8 00        		.byte	0
 3329 03b9 00        		.byte	0
 3330 03ba 00        		.byte	0
 3331 03bb 00        		.byte	0
 3332 03bc 00        		.byte	0
 3333 03bd 00        		.byte	0
 3334 03be 00        		.byte	0
 3335 03bf 00        		.byte	0
 3336 03c0 00        		.byte	0
 3337 03c1 00        		.byte	0
 3338 03c2 00        		.byte	0
 3339 03c3 00        		.byte	0
 3340 03c4 00        		.byte	0
 3341 03c5 00        		.byte	0
 3342 03c6 00        		.byte	0
 3343 03c7 00        		.byte	0
 3344 03c8 00        		.byte	0
 3345 03c9 00        		.byte	0
 3346 03ca 00        		.byte	0
 3347 03cb 00        		.byte	0
 3348 03cc 00        		.byte	0
 3349 03cd 00        		.byte	0
 3350 03ce 00        		.byte	0
 3351 03cf 00        		.byte	0
 3352 03d0 00        		.byte	0
 3353 03d1 00        		.byte	0
 3354 03d2 00        		.byte	0
 3355 03d3 00        		.byte	0
 3356 03d4 07        		.byte	7
 3357 03d5 FF        		.byte	-1
 3358 03d6 FF        		.byte	-1
 3359 03d7 FF        		.byte	-1
 3360 03d8 E0        		.byte	-32
 3361 03d9 0F        		.byte	15
 3362 03da FF        		.byte	-1
 3363 03db FF        		.byte	-1
 3364 03dc FF        		.byte	-1
 3365 03dd F0        		.byte	-16
 3366 03de 1F        		.byte	31
 3367 03df FF        		.byte	-1
 3368 03e0 FF        		.byte	-1
 3369 03e1 FF        		.byte	-1
 3370 03e2 F8        		.byte	-8
 3371 03e3 1F        		.byte	31
 3372 03e4 FF        		.byte	-1
 3373 03e5 FF        		.byte	-1
 3374 03e6 FF        		.byte	-1
 3375 03e7 F8        		.byte	-8
 3376 03e8 1F        		.byte	31
 3377 03e9 FF        		.byte	-1
 3378 03ea FF        		.byte	-1
 3379 03eb FF        		.byte	-1
 3380 03ec F8        		.byte	-8
 3381 03ed 1F        		.byte	31
 3382 03ee FF        		.byte	-1
 3383 03ef FF        		.byte	-1
 3384 03f0 FF        		.byte	-1
 3385 03f1 F8        		.byte	-8
 3386 03f2 1F        		.byte	31
 3387 03f3 FF        		.byte	-1
 3388 03f4 FF        		.byte	-1
 3389 03f5 FF        		.byte	-1
 3390 03f6 F8        		.byte	-8
 3391 03f7 1F        		.byte	31
 3392 03f8 FF        		.byte	-1
 3393 03f9 FF        		.byte	-1
 3394 03fa FF        		.byte	-1
 3395 03fb F8        		.byte	-8
 3396 03fc 0F        		.byte	15
 3397 03fd FF        		.byte	-1
 3398 03fe FF        		.byte	-1
 3399 03ff FF        		.byte	-1
 3400 0400 F8        		.byte	-8
 3401 0401 00        		.byte	0
 3402 0402 00        		.byte	0
 3403 0403 00        		.byte	0
 3404 0404 0F        		.byte	15
 3405 0405 F8        		.byte	-8
 3406 0406 00        		.byte	0
 3407 0407 00        		.byte	0
 3408 0408 00        		.byte	0
 3409 0409 0F        		.byte	15
 3410 040a F8        		.byte	-8
 3411 040b 00        		.byte	0
 3412 040c 00        		.byte	0
 3413 040d 00        		.byte	0
 3414 040e 0F        		.byte	15
 3415 040f F8        		.byte	-8
 3416 0410 00        		.byte	0
 3417 0411 00        		.byte	0
 3418 0412 00        		.byte	0
 3419 0413 0F        		.byte	15
 3420 0414 F8        		.byte	-8
 3421 0415 00        		.byte	0
 3422 0416 00        		.byte	0
 3423 0417 00        		.byte	0
 3424 0418 0F        		.byte	15
 3425 0419 F8        		.byte	-8
 3426 041a 00        		.byte	0
 3427 041b 00        		.byte	0
 3428 041c 00        		.byte	0
 3429 041d 0F        		.byte	15
 3430 041e F8        		.byte	-8
 3431 041f 00        		.byte	0
 3432 0420 00        		.byte	0
 3433 0421 00        		.byte	0
 3434 0422 0F        		.byte	15
 3435 0423 F8        		.byte	-8
 3436 0424 00        		.byte	0
 3437 0425 00        		.byte	0
 3438 0426 00        		.byte	0
 3439 0427 0F        		.byte	15
 3440 0428 F8        		.byte	-8
 3441 0429 00        		.byte	0
 3442 042a 00        		.byte	0
 3443 042b 00        		.byte	0
 3444 042c 0F        		.byte	15
 3445 042d F8        		.byte	-8
 3446 042e 00        		.byte	0
 3447 042f 00        		.byte	0
 3448 0430 00        		.byte	0
 3449 0431 0F        		.byte	15
 3450 0432 F8        		.byte	-8
 3451 0433 00        		.byte	0
 3452 0434 00        		.byte	0
 3453 0435 00        		.byte	0
 3454 0436 0F        		.byte	15
 3455 0437 F8        		.byte	-8
 3456 0438 00        		.byte	0
 3457 0439 00        		.byte	0
 3458 043a 00        		.byte	0
 3459 043b 0F        		.byte	15
 3460 043c F8        		.byte	-8
 3461 043d 00        		.byte	0
 3462 043e 00        		.byte	0
 3463 043f 00        		.byte	0
 3464 0440 0F        		.byte	15
 3465 0441 F8        		.byte	-8
 3466 0442 00        		.byte	0
 3467 0443 00        		.byte	0
 3468 0444 00        		.byte	0
 3469 0445 0F        		.byte	15
 3470 0446 F8        		.byte	-8
 3471 0447 00        		.byte	0
 3472 0448 3F        		.byte	63
 3473 0449 FF        		.byte	-1
 3474 044a FF        		.byte	-1
 3475 044b F8        		.byte	-8
 3476 044c 00        		.byte	0
 3477 044d 3F        		.byte	63
 3478 044e FF        		.byte	-1
 3479 044f FF        		.byte	-1
 3480 0450 F8        		.byte	-8
 3481 0451 00        		.byte	0
 3482 0452 3F        		.byte	63
 3483 0453 FF        		.byte	-1
 3484 0454 FF        		.byte	-1
 3485 0455 F8        		.byte	-8
 3486 0456 00        		.byte	0
 3487 0457 3F        		.byte	63
 3488 0458 FF        		.byte	-1
 3489 0459 FF        		.byte	-1
 3490 045a F8        		.byte	-8
 3491 045b 00        		.byte	0
 3492 045c 3F        		.byte	63
 3493 045d FF        		.byte	-1
 3494 045e FF        		.byte	-1
 3495 045f F8        		.byte	-8
 3496 0460 00        		.byte	0
 3497 0461 3F        		.byte	63
 3498 0462 FF        		.byte	-1
 3499 0463 FF        		.byte	-1
 3500 0464 F8        		.byte	-8
 3501 0465 00        		.byte	0
 3502 0466 3F        		.byte	63
 3503 0467 FF        		.byte	-1
 3504 0468 FF        		.byte	-1
 3505 0469 F8        		.byte	-8
 3506 046a 00        		.byte	0
 3507 046b 3F        		.byte	63
 3508 046c FF        		.byte	-1
 3509 046d FF        		.byte	-1
 3510 046e F8        		.byte	-8
 3511 046f 00        		.byte	0
 3512 0470 3F        		.byte	63
 3513 0471 FF        		.byte	-1
 3514 0472 FF        		.byte	-1
 3515 0473 F8        		.byte	-8
 3516 0474 00        		.byte	0
 3517 0475 00        		.byte	0
 3518 0476 00        		.byte	0
 3519 0477 0F        		.byte	15
 3520 0478 F8        		.byte	-8
 3521 0479 00        		.byte	0
 3522 047a 00        		.byte	0
 3523 047b 00        		.byte	0
 3524 047c 0F        		.byte	15
 3525 047d F8        		.byte	-8
 3526 047e 00        		.byte	0
 3527 047f 00        		.byte	0
 3528 0480 00        		.byte	0
 3529 0481 0F        		.byte	15
 3530 0482 F8        		.byte	-8
 3531 0483 00        		.byte	0
 3532 0484 00        		.byte	0
 3533 0485 00        		.byte	0
 3534 0486 0F        		.byte	15
 3535 0487 F8        		.byte	-8
 3536 0488 00        		.byte	0
 3537 0489 00        		.byte	0
 3538 048a 00        		.byte	0
 3539 048b 0F        		.byte	15
 3540 048c F8        		.byte	-8
 3541 048d 00        		.byte	0
 3542 048e 00        		.byte	0
 3543 048f 00        		.byte	0
 3544 0490 0F        		.byte	15
 3545 0491 F8        		.byte	-8
 3546 0492 00        		.byte	0
 3547 0493 00        		.byte	0
 3548 0494 00        		.byte	0
 3549 0495 0F        		.byte	15
 3550 0496 F8        		.byte	-8
 3551 0497 00        		.byte	0
 3552 0498 00        		.byte	0
 3553 0499 00        		.byte	0
 3554 049a 0F        		.byte	15
 3555 049b F8        		.byte	-8
 3556 049c 00        		.byte	0
 3557 049d 00        		.byte	0
 3558 049e 00        		.byte	0
 3559 049f 0F        		.byte	15
 3560 04a0 F8        		.byte	-8
 3561 04a1 00        		.byte	0
 3562 04a2 00        		.byte	0
 3563 04a3 00        		.byte	0
 3564 04a4 0F        		.byte	15
 3565 04a5 F8        		.byte	-8
 3566 04a6 00        		.byte	0
 3567 04a7 00        		.byte	0
 3568 04a8 00        		.byte	0
 3569 04a9 0F        		.byte	15
 3570 04aa F8        		.byte	-8
 3571 04ab 00        		.byte	0
 3572 04ac 00        		.byte	0
 3573 04ad 00        		.byte	0
 3574 04ae 0F        		.byte	15
 3575 04af F8        		.byte	-8
 3576 04b0 00        		.byte	0
 3577 04b1 00        		.byte	0
 3578 04b2 00        		.byte	0
 3579 04b3 0F        		.byte	15
 3580 04b4 F8        		.byte	-8
 3581 04b5 00        		.byte	0
 3582 04b6 00        		.byte	0
 3583 04b7 00        		.byte	0
 3584 04b8 0F        		.byte	15
 3585 04b9 F8        		.byte	-8
 3586 04ba 00        		.byte	0
 3587 04bb 00        		.byte	0
 3588 04bc 00        		.byte	0
 3589 04bd 0F        		.byte	15
 3590 04be F8        		.byte	-8
 3591 04bf 0F        		.byte	15
 3592 04c0 FF        		.byte	-1
 3593 04c1 FF        		.byte	-1
 3594 04c2 FF        		.byte	-1
 3595 04c3 F8        		.byte	-8
 3596 04c4 1F        		.byte	31
 3597 04c5 FF        		.byte	-1
 3598 04c6 FF        		.byte	-1
 3599 04c7 FF        		.byte	-1
 3600 04c8 F8        		.byte	-8
 3601 04c9 1F        		.byte	31
 3602 04ca FF        		.byte	-1
 3603 04cb FF        		.byte	-1
 3604 04cc FF        		.byte	-1
 3605 04cd F8        		.byte	-8
 3606 04ce 1F        		.byte	31
 3607 04cf FF        		.byte	-1
 3608 04d0 FF        		.byte	-1
 3609 04d1 FF        		.byte	-1
 3610 04d2 F8        		.byte	-8
 3611 04d3 1F        		.byte	31
 3612 04d4 FF        		.byte	-1
 3613 04d5 FF        		.byte	-1
 3614 04d6 FF        		.byte	-1
 3615 04d7 F8        		.byte	-8
 3616 04d8 1F        		.byte	31
 3617 04d9 FF        		.byte	-1
 3618 04da FF        		.byte	-1
 3619 04db FF        		.byte	-1
 3620 04dc F8        		.byte	-8
 3621 04dd 1F        		.byte	31
 3622 04de FF        		.byte	-1
 3623 04df FF        		.byte	-1
 3624 04e0 FF        		.byte	-1
 3625 04e1 F8        		.byte	-8
 3626 04e2 1F        		.byte	31
 3627 04e3 FF        		.byte	-1
 3628 04e4 FF        		.byte	-1
 3629 04e5 FF        		.byte	-1
 3630 04e6 F8        		.byte	-8
 3631 04e7 0F        		.byte	15
 3632 04e8 FF        		.byte	-1
 3633 04e9 FF        		.byte	-1
 3634 04ea FF        		.byte	-1
 3635 04eb F0        		.byte	-16
 3636 04ec 00        		.byte	0
 3637 04ed 00        		.byte	0
 3638 04ee 00        		.byte	0
 3639 04ef 00        		.byte	0
 3640 04f0 00        		.byte	0
 3641 04f1 00        		.byte	0
 3642 04f2 00        		.byte	0
 3643 04f3 00        		.byte	0
 3644 04f4 00        		.byte	0
 3645 04f5 00        		.byte	0
 3646 04f6 00        		.byte	0
 3647 04f7 00        		.byte	0
 3648 04f8 00        		.byte	0
 3649 04f9 00        		.byte	0
 3650 04fa 00        		.byte	0
 3651 04fb 00        		.byte	0
 3652 04fc 00        		.byte	0
 3653 04fd 00        		.byte	0
 3654 04fe 00        		.byte	0
 3655 04ff 00        		.byte	0
 3656 0500 00        		.byte	0
 3657 0501 00        		.byte	0
 3658 0502 00        		.byte	0
 3659 0503 00        		.byte	0
 3660 0504 00        		.byte	0
 3661 0505 00        		.byte	0
 3662 0506 00        		.byte	0
 3663 0507 00        		.byte	0
 3664 0508 00        		.byte	0
 3665 0509 00        		.byte	0
 3666 050a 00        		.byte	0
 3667 050b 00        		.byte	0
 3668 050c 00        		.byte	0
 3669 050d 00        		.byte	0
 3670 050e 00        		.byte	0
 3671 050f 00        		.byte	0
 3672 0510 00        		.byte	0
 3673 0511 00        		.byte	0
 3674 0512 00        		.byte	0
 3675 0513 00        		.byte	0
 3676 0514 07        		.byte	7
 3677 0515 F0        		.byte	-16
 3678 0516 00        		.byte	0
 3679 0517 0F        		.byte	15
 3680 0518 E0        		.byte	-32
 3681 0519 0F        		.byte	15
 3682 051a F0        		.byte	-16
 3683 051b 00        		.byte	0
 3684 051c 0F        		.byte	15
 3685 051d F0        		.byte	-16
 3686 051e 1F        		.byte	31
 3687 051f F0        		.byte	-16
 3688 0520 00        		.byte	0
 3689 0521 0F        		.byte	15
 3690 0522 F8        		.byte	-8
 3691 0523 1F        		.byte	31
 3692 0524 F0        		.byte	-16
 3693 0525 00        		.byte	0
 3694 0526 0F        		.byte	15
 3695 0527 F8        		.byte	-8
 3696 0528 1F        		.byte	31
 3697 0529 F0        		.byte	-16
 3698 052a 00        		.byte	0
 3699 052b 0F        		.byte	15
 3700 052c F8        		.byte	-8
 3701 052d 1F        		.byte	31
 3702 052e F0        		.byte	-16
 3703 052f 00        		.byte	0
 3704 0530 0F        		.byte	15
 3705 0531 F8        		.byte	-8
 3706 0532 1F        		.byte	31
 3707 0533 F0        		.byte	-16
 3708 0534 00        		.byte	0
 3709 0535 0F        		.byte	15
 3710 0536 F8        		.byte	-8
 3711 0537 1F        		.byte	31
 3712 0538 F0        		.byte	-16
 3713 0539 00        		.byte	0
 3714 053a 0F        		.byte	15
 3715 053b F8        		.byte	-8
 3716 053c 1F        		.byte	31
 3717 053d F0        		.byte	-16
 3718 053e 00        		.byte	0
 3719 053f 0F        		.byte	15
 3720 0540 F8        		.byte	-8
 3721 0541 1F        		.byte	31
 3722 0542 F0        		.byte	-16
 3723 0543 00        		.byte	0
 3724 0544 0F        		.byte	15
 3725 0545 F8        		.byte	-8
 3726 0546 1F        		.byte	31
 3727 0547 F0        		.byte	-16
 3728 0548 00        		.byte	0
 3729 0549 0F        		.byte	15
 3730 054a F8        		.byte	-8
 3731 054b 1F        		.byte	31
 3732 054c F0        		.byte	-16
 3733 054d 00        		.byte	0
 3734 054e 0F        		.byte	15
 3735 054f F8        		.byte	-8
 3736 0550 1F        		.byte	31
 3737 0551 F0        		.byte	-16
 3738 0552 00        		.byte	0
 3739 0553 0F        		.byte	15
 3740 0554 F8        		.byte	-8
 3741 0555 1F        		.byte	31
 3742 0556 F0        		.byte	-16
 3743 0557 00        		.byte	0
 3744 0558 0F        		.byte	15
 3745 0559 F8        		.byte	-8
 3746 055a 1F        		.byte	31
 3747 055b F0        		.byte	-16
 3748 055c 00        		.byte	0
 3749 055d 0F        		.byte	15
 3750 055e F8        		.byte	-8
 3751 055f 1F        		.byte	31
 3752 0560 F0        		.byte	-16
 3753 0561 00        		.byte	0
 3754 0562 0F        		.byte	15
 3755 0563 F8        		.byte	-8
 3756 0564 1F        		.byte	31
 3757 0565 F0        		.byte	-16
 3758 0566 00        		.byte	0
 3759 0567 0F        		.byte	15
 3760 0568 F8        		.byte	-8
 3761 0569 1F        		.byte	31
 3762 056a F0        		.byte	-16
 3763 056b 00        		.byte	0
 3764 056c 0F        		.byte	15
 3765 056d F8        		.byte	-8
 3766 056e 1F        		.byte	31
 3767 056f F0        		.byte	-16
 3768 0570 00        		.byte	0
 3769 0571 0F        		.byte	15
 3770 0572 F8        		.byte	-8
 3771 0573 1F        		.byte	31
 3772 0574 F0        		.byte	-16
 3773 0575 00        		.byte	0
 3774 0576 0F        		.byte	15
 3775 0577 F8        		.byte	-8
 3776 0578 1F        		.byte	31
 3777 0579 F0        		.byte	-16
 3778 057a 00        		.byte	0
 3779 057b 0F        		.byte	15
 3780 057c F8        		.byte	-8
 3781 057d 1F        		.byte	31
 3782 057e F0        		.byte	-16
 3783 057f 00        		.byte	0
 3784 0580 0F        		.byte	15
 3785 0581 F8        		.byte	-8
 3786 0582 1F        		.byte	31
 3787 0583 F0        		.byte	-16
 3788 0584 00        		.byte	0
 3789 0585 0F        		.byte	15
 3790 0586 F8        		.byte	-8
 3791 0587 1F        		.byte	31
 3792 0588 FF        		.byte	-1
 3793 0589 FF        		.byte	-1
 3794 058a FF        		.byte	-1
 3795 058b F8        		.byte	-8
 3796 058c 1F        		.byte	31
 3797 058d FF        		.byte	-1
 3798 058e FF        		.byte	-1
 3799 058f FF        		.byte	-1
 3800 0590 F8        		.byte	-8
 3801 0591 1F        		.byte	31
 3802 0592 FF        		.byte	-1
 3803 0593 FF        		.byte	-1
 3804 0594 FF        		.byte	-1
 3805 0595 F8        		.byte	-8
 3806 0596 1F        		.byte	31
 3807 0597 FF        		.byte	-1
 3808 0598 FF        		.byte	-1
 3809 0599 FF        		.byte	-1
 3810 059a F8        		.byte	-8
 3811 059b 1F        		.byte	31
 3812 059c FF        		.byte	-1
 3813 059d FF        		.byte	-1
 3814 059e FF        		.byte	-1
 3815 059f F8        		.byte	-8
 3816 05a0 1F        		.byte	31
 3817 05a1 FF        		.byte	-1
 3818 05a2 FF        		.byte	-1
 3819 05a3 FF        		.byte	-1
 3820 05a4 F8        		.byte	-8
 3821 05a5 1F        		.byte	31
 3822 05a6 FF        		.byte	-1
 3823 05a7 FF        		.byte	-1
 3824 05a8 FF        		.byte	-1
 3825 05a9 F8        		.byte	-8
 3826 05aa 1F        		.byte	31
 3827 05ab FF        		.byte	-1
 3828 05ac FF        		.byte	-1
 3829 05ad FF        		.byte	-1
 3830 05ae F8        		.byte	-8
 3831 05af 1F        		.byte	31
 3832 05b0 FF        		.byte	-1
 3833 05b1 FF        		.byte	-1
 3834 05b2 FF        		.byte	-1
 3835 05b3 F8        		.byte	-8
 3836 05b4 00        		.byte	0
 3837 05b5 00        		.byte	0
 3838 05b6 00        		.byte	0
 3839 05b7 0F        		.byte	15
 3840 05b8 F8        		.byte	-8
 3841 05b9 00        		.byte	0
 3842 05ba 00        		.byte	0
 3843 05bb 00        		.byte	0
 3844 05bc 0F        		.byte	15
 3845 05bd F8        		.byte	-8
 3846 05be 00        		.byte	0
 3847 05bf 00        		.byte	0
 3848 05c0 00        		.byte	0
 3849 05c1 0F        		.byte	15
 3850 05c2 F8        		.byte	-8
 3851 05c3 00        		.byte	0
 3852 05c4 00        		.byte	0
 3853 05c5 00        		.byte	0
 3854 05c6 0F        		.byte	15
 3855 05c7 F8        		.byte	-8
 3856 05c8 00        		.byte	0
 3857 05c9 00        		.byte	0
 3858 05ca 00        		.byte	0
 3859 05cb 0F        		.byte	15
 3860 05cc F8        		.byte	-8
 3861 05cd 00        		.byte	0
 3862 05ce 00        		.byte	0
 3863 05cf 00        		.byte	0
 3864 05d0 0F        		.byte	15
 3865 05d1 F8        		.byte	-8
 3866 05d2 00        		.byte	0
 3867 05d3 00        		.byte	0
 3868 05d4 00        		.byte	0
 3869 05d5 0F        		.byte	15
 3870 05d6 F8        		.byte	-8
 3871 05d7 00        		.byte	0
 3872 05d8 00        		.byte	0
 3873 05d9 00        		.byte	0
 3874 05da 0F        		.byte	15
 3875 05db F8        		.byte	-8
 3876 05dc 00        		.byte	0
 3877 05dd 00        		.byte	0
 3878 05de 00        		.byte	0
 3879 05df 0F        		.byte	15
 3880 05e0 F8        		.byte	-8
 3881 05e1 00        		.byte	0
 3882 05e2 00        		.byte	0
 3883 05e3 00        		.byte	0
 3884 05e4 0F        		.byte	15
 3885 05e5 F8        		.byte	-8
 3886 05e6 00        		.byte	0
 3887 05e7 00        		.byte	0
 3888 05e8 00        		.byte	0
 3889 05e9 0F        		.byte	15
 3890 05ea F8        		.byte	-8
 3891 05eb 00        		.byte	0
 3892 05ec 00        		.byte	0
 3893 05ed 00        		.byte	0
 3894 05ee 0F        		.byte	15
 3895 05ef F8        		.byte	-8
 3896 05f0 00        		.byte	0
 3897 05f1 00        		.byte	0
 3898 05f2 00        		.byte	0
 3899 05f3 0F        		.byte	15
 3900 05f4 F8        		.byte	-8
 3901 05f5 00        		.byte	0
 3902 05f6 00        		.byte	0
 3903 05f7 00        		.byte	0
 3904 05f8 0F        		.byte	15
 3905 05f9 F8        		.byte	-8
 3906 05fa 00        		.byte	0
 3907 05fb 00        		.byte	0
 3908 05fc 00        		.byte	0
 3909 05fd 0F        		.byte	15
 3910 05fe F8        		.byte	-8
 3911 05ff 00        		.byte	0
 3912 0600 00        		.byte	0
 3913 0601 00        		.byte	0
 3914 0602 0F        		.byte	15
 3915 0603 F8        		.byte	-8
 3916 0604 00        		.byte	0
 3917 0605 00        		.byte	0
 3918 0606 00        		.byte	0
 3919 0607 0F        		.byte	15
 3920 0608 F8        		.byte	-8
 3921 0609 00        		.byte	0
 3922 060a 00        		.byte	0
 3923 060b 00        		.byte	0
 3924 060c 0F        		.byte	15
 3925 060d F8        		.byte	-8
 3926 060e 00        		.byte	0
 3927 060f 00        		.byte	0
 3928 0610 00        		.byte	0
 3929 0611 0F        		.byte	15
 3930 0612 F8        		.byte	-8
 3931 0613 00        		.byte	0
 3932 0614 00        		.byte	0
 3933 0615 00        		.byte	0
 3934 0616 0F        		.byte	15
 3935 0617 F8        		.byte	-8
 3936 0618 00        		.byte	0
 3937 0619 00        		.byte	0
 3938 061a 00        		.byte	0
 3939 061b 0F        		.byte	15
 3940 061c F8        		.byte	-8
 3941 061d 00        		.byte	0
 3942 061e 00        		.byte	0
 3943 061f 00        		.byte	0
 3944 0620 0F        		.byte	15
 3945 0621 F8        		.byte	-8
 3946 0622 00        		.byte	0
 3947 0623 00        		.byte	0
 3948 0624 00        		.byte	0
 3949 0625 0F        		.byte	15
 3950 0626 F8        		.byte	-8
 3951 0627 00        		.byte	0
 3952 0628 00        		.byte	0
 3953 0629 00        		.byte	0
 3954 062a 0F        		.byte	15
 3955 062b F0        		.byte	-16
 3956 062c 00        		.byte	0
 3957 062d 00        		.byte	0
 3958 062e 00        		.byte	0
 3959 062f 00        		.byte	0
 3960 0630 00        		.byte	0
 3961 0631 00        		.byte	0
 3962 0632 00        		.byte	0
 3963 0633 00        		.byte	0
 3964 0634 00        		.byte	0
 3965 0635 00        		.byte	0
 3966 0636 00        		.byte	0
 3967 0637 00        		.byte	0
 3968 0638 00        		.byte	0
 3969 0639 00        		.byte	0
 3970 063a 00        		.byte	0
 3971 063b 00        		.byte	0
 3972 063c 00        		.byte	0
 3973 063d 00        		.byte	0
 3974 063e 00        		.byte	0
 3975 063f 00        		.byte	0
 3976 0640 00        		.byte	0
 3977 0641 00        		.byte	0
 3978 0642 00        		.byte	0
 3979 0643 00        		.byte	0
 3980 0644 00        		.byte	0
 3981 0645 00        		.byte	0
 3982 0646 00        		.byte	0
 3983 0647 00        		.byte	0
 3984 0648 00        		.byte	0
 3985 0649 00        		.byte	0
 3986 064a 00        		.byte	0
 3987 064b 00        		.byte	0
 3988 064c 00        		.byte	0
 3989 064d 00        		.byte	0
 3990 064e 00        		.byte	0
 3991 064f 00        		.byte	0
 3992 0650 00        		.byte	0
 3993 0651 00        		.byte	0
 3994 0652 00        		.byte	0
 3995 0653 00        		.byte	0
 3996 0654 03        		.byte	3
 3997 0655 FF        		.byte	-1
 3998 0656 FF        		.byte	-1
 3999 0657 FF        		.byte	-1
 4000 0658 C0        		.byte	-64
 4001 0659 07        		.byte	7
 4002 065a FF        		.byte	-1
 4003 065b FF        		.byte	-1
 4004 065c FF        		.byte	-1
 4005 065d E0        		.byte	-32
 4006 065e 0F        		.byte	15
 4007 065f FF        		.byte	-1
 4008 0660 FF        		.byte	-1
 4009 0661 FF        		.byte	-1
 4010 0662 F0        		.byte	-16
 4011 0663 1F        		.byte	31
 4012 0664 FF        		.byte	-1
 4013 0665 FF        		.byte	-1
 4014 0666 FF        		.byte	-1
 4015 0667 F8        		.byte	-8
 4016 0668 1F        		.byte	31
 4017 0669 FF        		.byte	-1
 4018 066a FF        		.byte	-1
 4019 066b FF        		.byte	-1
 4020 066c F8        		.byte	-8
 4021 066d 1F        		.byte	31
 4022 066e FF        		.byte	-1
 4023 066f FF        		.byte	-1
 4024 0670 FF        		.byte	-1
 4025 0671 F8        		.byte	-8
 4026 0672 1F        		.byte	31
 4027 0673 FF        		.byte	-1
 4028 0674 FF        		.byte	-1
 4029 0675 FF        		.byte	-1
 4030 0676 F8        		.byte	-8
 4031 0677 1F        		.byte	31
 4032 0678 FF        		.byte	-1
 4033 0679 FF        		.byte	-1
 4034 067a FF        		.byte	-1
 4035 067b F8        		.byte	-8
 4036 067c 1F        		.byte	31
 4037 067d FF        		.byte	-1
 4038 067e FF        		.byte	-1
 4039 067f FF        		.byte	-1
 4040 0680 F8        		.byte	-8
 4041 0681 1F        		.byte	31
 4042 0682 F8        		.byte	-8
 4043 0683 00        		.byte	0
 4044 0684 00        		.byte	0
 4045 0685 00        		.byte	0
 4046 0686 1F        		.byte	31
 4047 0687 F0        		.byte	-16
 4048 0688 00        		.byte	0
 4049 0689 00        		.byte	0
 4050 068a 00        		.byte	0
 4051 068b 1F        		.byte	31
 4052 068c F0        		.byte	-16
 4053 068d 00        		.byte	0
 4054 068e 00        		.byte	0
 4055 068f 00        		.byte	0
 4056 0690 1F        		.byte	31
 4057 0691 F0        		.byte	-16
 4058 0692 00        		.byte	0
 4059 0693 00        		.byte	0
 4060 0694 00        		.byte	0
 4061 0695 1F        		.byte	31
 4062 0696 F0        		.byte	-16
 4063 0697 00        		.byte	0
 4064 0698 00        		.byte	0
 4065 0699 00        		.byte	0
 4066 069a 1F        		.byte	31
 4067 069b F0        		.byte	-16
 4068 069c 00        		.byte	0
 4069 069d 00        		.byte	0
 4070 069e 00        		.byte	0
 4071 069f 1F        		.byte	31
 4072 06a0 F0        		.byte	-16
 4073 06a1 00        		.byte	0
 4074 06a2 00        		.byte	0
 4075 06a3 00        		.byte	0
 4076 06a4 1F        		.byte	31
 4077 06a5 F0        		.byte	-16
 4078 06a6 00        		.byte	0
 4079 06a7 00        		.byte	0
 4080 06a8 00        		.byte	0
 4081 06a9 1F        		.byte	31
 4082 06aa F0        		.byte	-16
 4083 06ab 00        		.byte	0
 4084 06ac 00        		.byte	0
 4085 06ad 00        		.byte	0
 4086 06ae 1F        		.byte	31
 4087 06af F0        		.byte	-16
 4088 06b0 00        		.byte	0
 4089 06b1 00        		.byte	0
 4090 06b2 00        		.byte	0
 4091 06b3 1F        		.byte	31
 4092 06b4 F0        		.byte	-16
 4093 06b5 00        		.byte	0
 4094 06b6 00        		.byte	0
 4095 06b7 00        		.byte	0
 4096 06b8 1F        		.byte	31
 4097 06b9 F0        		.byte	-16
 4098 06ba 00        		.byte	0
 4099 06bb 00        		.byte	0
 4100 06bc 00        		.byte	0
 4101 06bd 1F        		.byte	31
 4102 06be F0        		.byte	-16
 4103 06bf 00        		.byte	0
 4104 06c0 00        		.byte	0
 4105 06c1 00        		.byte	0
 4106 06c2 1F        		.byte	31
 4107 06c3 F8        		.byte	-8
 4108 06c4 00        		.byte	0
 4109 06c5 00        		.byte	0
 4110 06c6 00        		.byte	0
 4111 06c7 1F        		.byte	31
 4112 06c8 FF        		.byte	-1
 4113 06c9 FF        		.byte	-1
 4114 06ca FF        		.byte	-1
 4115 06cb C0        		.byte	-64
 4116 06cc 1F        		.byte	31
 4117 06cd FF        		.byte	-1
 4118 06ce FF        		.byte	-1
 4119 06cf FF        		.byte	-1
 4120 06d0 E0        		.byte	-32
 4121 06d1 1F        		.byte	31
 4122 06d2 FF        		.byte	-1
 4123 06d3 FF        		.byte	-1
 4124 06d4 FF        		.byte	-1
 4125 06d5 F0        		.byte	-16
 4126 06d6 1F        		.byte	31
 4127 06d7 FF        		.byte	-1
 4128 06d8 FF        		.byte	-1
 4129 06d9 FF        		.byte	-1
 4130 06da F8        		.byte	-8
 4131 06db 1F        		.byte	31
 4132 06dc FF        		.byte	-1
 4133 06dd FF        		.byte	-1
 4134 06de FF        		.byte	-1
 4135 06df F8        		.byte	-8
 4136 06e0 1F        		.byte	31
 4137 06e1 FF        		.byte	-1
 4138 06e2 FF        		.byte	-1
 4139 06e3 FF        		.byte	-1
 4140 06e4 F8        		.byte	-8
 4141 06e5 1F        		.byte	31
 4142 06e6 FF        		.byte	-1
 4143 06e7 FF        		.byte	-1
 4144 06e8 FF        		.byte	-1
 4145 06e9 F8        		.byte	-8
 4146 06ea 1F        		.byte	31
 4147 06eb FF        		.byte	-1
 4148 06ec FF        		.byte	-1
 4149 06ed FF        		.byte	-1
 4150 06ee F8        		.byte	-8
 4151 06ef 1F        		.byte	31
 4152 06f0 FF        		.byte	-1
 4153 06f1 FF        		.byte	-1
 4154 06f2 FF        		.byte	-1
 4155 06f3 F8        		.byte	-8
 4156 06f4 00        		.byte	0
 4157 06f5 00        		.byte	0
 4158 06f6 00        		.byte	0
 4159 06f7 1F        		.byte	31
 4160 06f8 F8        		.byte	-8
 4161 06f9 00        		.byte	0
 4162 06fa 00        		.byte	0
 4163 06fb 00        		.byte	0
 4164 06fc 0F        		.byte	15
 4165 06fd F8        		.byte	-8
 4166 06fe 00        		.byte	0
 4167 06ff 00        		.byte	0
 4168 0700 00        		.byte	0
 4169 0701 0F        		.byte	15
 4170 0702 F8        		.byte	-8
 4171 0703 00        		.byte	0
 4172 0704 00        		.byte	0
 4173 0705 00        		.byte	0
 4174 0706 0F        		.byte	15
 4175 0707 F8        		.byte	-8
 4176 0708 00        		.byte	0
 4177 0709 00        		.byte	0
 4178 070a 00        		.byte	0
 4179 070b 0F        		.byte	15
 4180 070c F8        		.byte	-8
 4181 070d 00        		.byte	0
 4182 070e 00        		.byte	0
 4183 070f 00        		.byte	0
 4184 0710 0F        		.byte	15
 4185 0711 F8        		.byte	-8
 4186 0712 00        		.byte	0
 4187 0713 00        		.byte	0
 4188 0714 00        		.byte	0
 4189 0715 0F        		.byte	15
 4190 0716 F8        		.byte	-8
 4191 0717 00        		.byte	0
 4192 0718 00        		.byte	0
 4193 0719 00        		.byte	0
 4194 071a 0F        		.byte	15
 4195 071b F8        		.byte	-8
 4196 071c 00        		.byte	0
 4197 071d 00        		.byte	0
 4198 071e 00        		.byte	0
 4199 071f 0F        		.byte	15
 4200 0720 F8        		.byte	-8
 4201 0721 00        		.byte	0
 4202 0722 00        		.byte	0
 4203 0723 00        		.byte	0
 4204 0724 0F        		.byte	15
 4205 0725 F8        		.byte	-8
 4206 0726 00        		.byte	0
 4207 0727 00        		.byte	0
 4208 0728 00        		.byte	0
 4209 0729 0F        		.byte	15
 4210 072a F8        		.byte	-8
 4211 072b 00        		.byte	0
 4212 072c 00        		.byte	0
 4213 072d 00        		.byte	0
 4214 072e 0F        		.byte	15
 4215 072f F8        		.byte	-8
 4216 0730 00        		.byte	0
 4217 0731 00        		.byte	0
 4218 0732 00        		.byte	0
 4219 0733 0F        		.byte	15
 4220 0734 F8        		.byte	-8
 4221 0735 00        		.byte	0
 4222 0736 00        		.byte	0
 4223 0737 00        		.byte	0
 4224 0738 0F        		.byte	15
 4225 0739 F8        		.byte	-8
 4226 073a 00        		.byte	0
 4227 073b 00        		.byte	0
 4228 073c 00        		.byte	0
 4229 073d 1F        		.byte	31
 4230 073e F8        		.byte	-8
 4231 073f 0F        		.byte	15
 4232 0740 FF        		.byte	-1
 4233 0741 FF        		.byte	-1
 4234 0742 FF        		.byte	-1
 4235 0743 F8        		.byte	-8
 4236 0744 1F        		.byte	31
 4237 0745 FF        		.byte	-1
 4238 0746 FF        		.byte	-1
 4239 0747 FF        		.byte	-1
 4240 0748 F8        		.byte	-8
 4241 0749 1F        		.byte	31
 4242 074a FF        		.byte	-1
 4243 074b FF        		.byte	-1
 4244 074c FF        		.byte	-1
 4245 074d F8        		.byte	-8
 4246 074e 1F        		.byte	31
 4247 074f FF        		.byte	-1
 4248 0750 FF        		.byte	-1
 4249 0751 FF        		.byte	-1
 4250 0752 F8        		.byte	-8
 4251 0753 1F        		.byte	31
 4252 0754 FF        		.byte	-1
 4253 0755 FF        		.byte	-1
 4254 0756 FF        		.byte	-1
 4255 0757 F8        		.byte	-8
 4256 0758 1F        		.byte	31
 4257 0759 FF        		.byte	-1
 4258 075a FF        		.byte	-1
 4259 075b FF        		.byte	-1
 4260 075c F8        		.byte	-8
 4261 075d 1F        		.byte	31
 4262 075e FF        		.byte	-1
 4263 075f FF        		.byte	-1
 4264 0760 FF        		.byte	-1
 4265 0761 F8        		.byte	-8
 4266 0762 1F        		.byte	31
 4267 0763 FF        		.byte	-1
 4268 0764 FF        		.byte	-1
 4269 0765 FF        		.byte	-1
 4270 0766 F8        		.byte	-8
 4271 0767 0F        		.byte	15
 4272 0768 FF        		.byte	-1
 4273 0769 FF        		.byte	-1
 4274 076a FF        		.byte	-1
 4275 076b F0        		.byte	-16
 4276 076c 00        		.byte	0
 4277 076d 00        		.byte	0
 4278 076e 00        		.byte	0
 4279 076f 00        		.byte	0
 4280 0770 00        		.byte	0
 4281 0771 00        		.byte	0
 4282 0772 00        		.byte	0
 4283 0773 00        		.byte	0
 4284 0774 00        		.byte	0
 4285 0775 00        		.byte	0
 4286 0776 00        		.byte	0
 4287 0777 00        		.byte	0
 4288 0778 00        		.byte	0
 4289 0779 00        		.byte	0
 4290 077a 00        		.byte	0
 4291 077b 00        		.byte	0
 4292 077c 00        		.byte	0
 4293 077d 00        		.byte	0
 4294 077e 00        		.byte	0
 4295 077f 00        		.byte	0
 4296 0780 00        		.byte	0
 4297 0781 00        		.byte	0
 4298 0782 00        		.byte	0
 4299 0783 00        		.byte	0
 4300 0784 00        		.byte	0
 4301 0785 00        		.byte	0
 4302 0786 00        		.byte	0
 4303 0787 00        		.byte	0
 4304 0788 00        		.byte	0
 4305 0789 00        		.byte	0
 4306 078a 00        		.byte	0
 4307 078b 00        		.byte	0
 4308 078c 00        		.byte	0
 4309 078d 00        		.byte	0
 4310 078e 00        		.byte	0
 4311 078f 00        		.byte	0
 4312 0790 00        		.byte	0
 4313 0791 00        		.byte	0
 4314 0792 00        		.byte	0
 4315 0793 00        		.byte	0
 4316 0794 03        		.byte	3
 4317 0795 FF        		.byte	-1
 4318 0796 FF        		.byte	-1
 4319 0797 FF        		.byte	-1
 4320 0798 C0        		.byte	-64
 4321 0799 07        		.byte	7
 4322 079a FF        		.byte	-1
 4323 079b FF        		.byte	-1
 4324 079c FF        		.byte	-1
 4325 079d E0        		.byte	-32
 4326 079e 0F        		.byte	15
 4327 079f FF        		.byte	-1
 4328 07a0 FF        		.byte	-1
 4329 07a1 FF        		.byte	-1
 4330 07a2 F0        		.byte	-16
 4331 07a3 1F        		.byte	31
 4332 07a4 FF        		.byte	-1
 4333 07a5 FF        		.byte	-1
 4334 07a6 FF        		.byte	-1
 4335 07a7 F8        		.byte	-8
 4336 07a8 1F        		.byte	31
 4337 07a9 FF        		.byte	-1
 4338 07aa FF        		.byte	-1
 4339 07ab FF        		.byte	-1
 4340 07ac F8        		.byte	-8
 4341 07ad 1F        		.byte	31
 4342 07ae FF        		.byte	-1
 4343 07af FF        		.byte	-1
 4344 07b0 FF        		.byte	-1
 4345 07b1 F8        		.byte	-8
 4346 07b2 1F        		.byte	31
 4347 07b3 FF        		.byte	-1
 4348 07b4 FF        		.byte	-1
 4349 07b5 FF        		.byte	-1
 4350 07b6 F8        		.byte	-8
 4351 07b7 1F        		.byte	31
 4352 07b8 FF        		.byte	-1
 4353 07b9 FF        		.byte	-1
 4354 07ba FF        		.byte	-1
 4355 07bb F8        		.byte	-8
 4356 07bc 1F        		.byte	31
 4357 07bd FF        		.byte	-1
 4358 07be FF        		.byte	-1
 4359 07bf FF        		.byte	-1
 4360 07c0 F8        		.byte	-8
 4361 07c1 1F        		.byte	31
 4362 07c2 F8        		.byte	-8
 4363 07c3 00        		.byte	0
 4364 07c4 00        		.byte	0
 4365 07c5 00        		.byte	0
 4366 07c6 1F        		.byte	31
 4367 07c7 F0        		.byte	-16
 4368 07c8 00        		.byte	0
 4369 07c9 00        		.byte	0
 4370 07ca 00        		.byte	0
 4371 07cb 1F        		.byte	31
 4372 07cc F0        		.byte	-16
 4373 07cd 00        		.byte	0
 4374 07ce 00        		.byte	0
 4375 07cf 00        		.byte	0
 4376 07d0 1F        		.byte	31
 4377 07d1 F0        		.byte	-16
 4378 07d2 00        		.byte	0
 4379 07d3 00        		.byte	0
 4380 07d4 00        		.byte	0
 4381 07d5 1F        		.byte	31
 4382 07d6 F0        		.byte	-16
 4383 07d7 00        		.byte	0
 4384 07d8 00        		.byte	0
 4385 07d9 00        		.byte	0
 4386 07da 1F        		.byte	31
 4387 07db F0        		.byte	-16
 4388 07dc 00        		.byte	0
 4389 07dd 00        		.byte	0
 4390 07de 00        		.byte	0
 4391 07df 1F        		.byte	31
 4392 07e0 F0        		.byte	-16
 4393 07e1 00        		.byte	0
 4394 07e2 00        		.byte	0
 4395 07e3 00        		.byte	0
 4396 07e4 1F        		.byte	31
 4397 07e5 F0        		.byte	-16
 4398 07e6 00        		.byte	0
 4399 07e7 00        		.byte	0
 4400 07e8 00        		.byte	0
 4401 07e9 1F        		.byte	31
 4402 07ea F0        		.byte	-16
 4403 07eb 00        		.byte	0
 4404 07ec 00        		.byte	0
 4405 07ed 00        		.byte	0
 4406 07ee 1F        		.byte	31
 4407 07ef F0        		.byte	-16
 4408 07f0 00        		.byte	0
 4409 07f1 00        		.byte	0
 4410 07f2 00        		.byte	0
 4411 07f3 1F        		.byte	31
 4412 07f4 F0        		.byte	-16
 4413 07f5 00        		.byte	0
 4414 07f6 00        		.byte	0
 4415 07f7 00        		.byte	0
 4416 07f8 1F        		.byte	31
 4417 07f9 F0        		.byte	-16
 4418 07fa 00        		.byte	0
 4419 07fb 00        		.byte	0
 4420 07fc 00        		.byte	0
 4421 07fd 1F        		.byte	31
 4422 07fe F0        		.byte	-16
 4423 07ff 00        		.byte	0
 4424 0800 00        		.byte	0
 4425 0801 00        		.byte	0
 4426 0802 1F        		.byte	31
 4427 0803 F8        		.byte	-8
 4428 0804 00        		.byte	0
 4429 0805 00        		.byte	0
 4430 0806 00        		.byte	0
 4431 0807 1F        		.byte	31
 4432 0808 FF        		.byte	-1
 4433 0809 FF        		.byte	-1
 4434 080a FF        		.byte	-1
 4435 080b C0        		.byte	-64
 4436 080c 1F        		.byte	31
 4437 080d FF        		.byte	-1
 4438 080e FF        		.byte	-1
 4439 080f FF        		.byte	-1
 4440 0810 E0        		.byte	-32
 4441 0811 1F        		.byte	31
 4442 0812 FF        		.byte	-1
 4443 0813 FF        		.byte	-1
 4444 0814 FF        		.byte	-1
 4445 0815 F0        		.byte	-16
 4446 0816 1F        		.byte	31
 4447 0817 FF        		.byte	-1
 4448 0818 FF        		.byte	-1
 4449 0819 FF        		.byte	-1
 4450 081a F8        		.byte	-8
 4451 081b 1F        		.byte	31
 4452 081c FF        		.byte	-1
 4453 081d FF        		.byte	-1
 4454 081e FF        		.byte	-1
 4455 081f F8        		.byte	-8
 4456 0820 1F        		.byte	31
 4457 0821 FF        		.byte	-1
 4458 0822 FF        		.byte	-1
 4459 0823 FF        		.byte	-1
 4460 0824 F8        		.byte	-8
 4461 0825 1F        		.byte	31
 4462 0826 FF        		.byte	-1
 4463 0827 FF        		.byte	-1
 4464 0828 FF        		.byte	-1
 4465 0829 F8        		.byte	-8
 4466 082a 1F        		.byte	31
 4467 082b FF        		.byte	-1
 4468 082c FF        		.byte	-1
 4469 082d FF        		.byte	-1
 4470 082e F8        		.byte	-8
 4471 082f 1F        		.byte	31
 4472 0830 FF        		.byte	-1
 4473 0831 FF        		.byte	-1
 4474 0832 FF        		.byte	-1
 4475 0833 F8        		.byte	-8
 4476 0834 1F        		.byte	31
 4477 0835 F8        		.byte	-8
 4478 0836 00        		.byte	0
 4479 0837 1F        		.byte	31
 4480 0838 F8        		.byte	-8
 4481 0839 1F        		.byte	31
 4482 083a F0        		.byte	-16
 4483 083b 00        		.byte	0
 4484 083c 0F        		.byte	15
 4485 083d F8        		.byte	-8
 4486 083e 1F        		.byte	31
 4487 083f F0        		.byte	-16
 4488 0840 00        		.byte	0
 4489 0841 0F        		.byte	15
 4490 0842 F8        		.byte	-8
 4491 0843 1F        		.byte	31
 4492 0844 F0        		.byte	-16
 4493 0845 00        		.byte	0
 4494 0846 0F        		.byte	15
 4495 0847 F8        		.byte	-8
 4496 0848 1F        		.byte	31
 4497 0849 F0        		.byte	-16
 4498 084a 00        		.byte	0
 4499 084b 0F        		.byte	15
 4500 084c F8        		.byte	-8
 4501 084d 1F        		.byte	31
 4502 084e F0        		.byte	-16
 4503 084f 00        		.byte	0
 4504 0850 0F        		.byte	15
 4505 0851 F8        		.byte	-8
 4506 0852 1F        		.byte	31
 4507 0853 F0        		.byte	-16
 4508 0854 00        		.byte	0
 4509 0855 0F        		.byte	15
 4510 0856 F8        		.byte	-8
 4511 0857 1F        		.byte	31
 4512 0858 F0        		.byte	-16
 4513 0859 00        		.byte	0
 4514 085a 0F        		.byte	15
 4515 085b F8        		.byte	-8
 4516 085c 1F        		.byte	31
 4517 085d F0        		.byte	-16
 4518 085e 00        		.byte	0
 4519 085f 0F        		.byte	15
 4520 0860 F8        		.byte	-8
 4521 0861 1F        		.byte	31
 4522 0862 F0        		.byte	-16
 4523 0863 00        		.byte	0
 4524 0864 0F        		.byte	15
 4525 0865 F8        		.byte	-8
 4526 0866 1F        		.byte	31
 4527 0867 F0        		.byte	-16
 4528 0868 00        		.byte	0
 4529 0869 0F        		.byte	15
 4530 086a F8        		.byte	-8
 4531 086b 1F        		.byte	31
 4532 086c F0        		.byte	-16
 4533 086d 00        		.byte	0
 4534 086e 0F        		.byte	15
 4535 086f F8        		.byte	-8
 4536 0870 1F        		.byte	31
 4537 0871 F0        		.byte	-16
 4538 0872 00        		.byte	0
 4539 0873 0F        		.byte	15
 4540 0874 F8        		.byte	-8
 4541 0875 1F        		.byte	31
 4542 0876 F0        		.byte	-16
 4543 0877 00        		.byte	0
 4544 0878 0F        		.byte	15
 4545 0879 F8        		.byte	-8
 4546 087a 1F        		.byte	31
 4547 087b F8        		.byte	-8
 4548 087c 00        		.byte	0
 4549 087d 1F        		.byte	31
 4550 087e F8        		.byte	-8
 4551 087f 1F        		.byte	31
 4552 0880 FF        		.byte	-1
 4553 0881 FF        		.byte	-1
 4554 0882 FF        		.byte	-1
 4555 0883 F8        		.byte	-8
 4556 0884 1F        		.byte	31
 4557 0885 FF        		.byte	-1
 4558 0886 FF        		.byte	-1
 4559 0887 FF        		.byte	-1
 4560 0888 F8        		.byte	-8
 4561 0889 1F        		.byte	31
 4562 088a FF        		.byte	-1
 4563 088b FF        		.byte	-1
 4564 088c FF        		.byte	-1
 4565 088d F8        		.byte	-8
 4566 088e 1F        		.byte	31
 4567 088f FF        		.byte	-1
 4568 0890 FF        		.byte	-1
 4569 0891 FF        		.byte	-1
 4570 0892 F8        		.byte	-8
 4571 0893 1F        		.byte	31
 4572 0894 FF        		.byte	-1
 4573 0895 FF        		.byte	-1
 4574 0896 FF        		.byte	-1
 4575 0897 F8        		.byte	-8
 4576 0898 1F        		.byte	31
 4577 0899 FF        		.byte	-1
 4578 089a FF        		.byte	-1
 4579 089b FF        		.byte	-1
 4580 089c F8        		.byte	-8
 4581 089d 1F        		.byte	31
 4582 089e FF        		.byte	-1
 4583 089f FF        		.byte	-1
 4584 08a0 FF        		.byte	-1
 4585 08a1 F8        		.byte	-8
 4586 08a2 1F        		.byte	31
 4587 08a3 FF        		.byte	-1
 4588 08a4 FF        		.byte	-1
 4589 08a5 FF        		.byte	-1
 4590 08a6 F8        		.byte	-8
 4591 08a7 0F        		.byte	15
 4592 08a8 FF        		.byte	-1
 4593 08a9 FF        		.byte	-1
 4594 08aa FF        		.byte	-1
 4595 08ab F0        		.byte	-16
 4596 08ac 00        		.byte	0
 4597 08ad 00        		.byte	0
 4598 08ae 00        		.byte	0
 4599 08af 00        		.byte	0
 4600 08b0 00        		.byte	0
 4601 08b1 00        		.byte	0
 4602 08b2 00        		.byte	0
 4603 08b3 00        		.byte	0
 4604 08b4 00        		.byte	0
 4605 08b5 00        		.byte	0
 4606 08b6 00        		.byte	0
 4607 08b7 00        		.byte	0
 4608 08b8 00        		.byte	0
 4609 08b9 00        		.byte	0
 4610 08ba 00        		.byte	0
 4611 08bb 00        		.byte	0
 4612 08bc 00        		.byte	0
 4613 08bd 00        		.byte	0
 4614 08be 00        		.byte	0
 4615 08bf 00        		.byte	0
 4616 08c0 00        		.byte	0
 4617 08c1 00        		.byte	0
 4618 08c2 00        		.byte	0
 4619 08c3 00        		.byte	0
 4620 08c4 00        		.byte	0
 4621 08c5 00        		.byte	0
 4622 08c6 00        		.byte	0
 4623 08c7 00        		.byte	0
 4624 08c8 00        		.byte	0
 4625 08c9 00        		.byte	0
 4626 08ca 00        		.byte	0
 4627 08cb 00        		.byte	0
 4628 08cc 00        		.byte	0
 4629 08cd 00        		.byte	0
 4630 08ce 00        		.byte	0
 4631 08cf 00        		.byte	0
 4632 08d0 00        		.byte	0
 4633 08d1 00        		.byte	0
 4634 08d2 00        		.byte	0
 4635 08d3 00        		.byte	0
 4636 08d4 07        		.byte	7
 4637 08d5 FF        		.byte	-1
 4638 08d6 FF        		.byte	-1
 4639 08d7 FF        		.byte	-1
 4640 08d8 E0        		.byte	-32
 4641 08d9 0F        		.byte	15
 4642 08da FF        		.byte	-1
 4643 08db FF        		.byte	-1
 4644 08dc FF        		.byte	-1
 4645 08dd F0        		.byte	-16
 4646 08de 1F        		.byte	31
 4647 08df FF        		.byte	-1
 4648 08e0 FF        		.byte	-1
 4649 08e1 FF        		.byte	-1
 4650 08e2 F8        		.byte	-8
 4651 08e3 1F        		.byte	31
 4652 08e4 FF        		.byte	-1
 4653 08e5 FF        		.byte	-1
 4654 08e6 FF        		.byte	-1
 4655 08e7 F8        		.byte	-8
 4656 08e8 1F        		.byte	31
 4657 08e9 FF        		.byte	-1
 4658 08ea FF        		.byte	-1
 4659 08eb FF        		.byte	-1
 4660 08ec F8        		.byte	-8
 4661 08ed 1F        		.byte	31
 4662 08ee FF        		.byte	-1
 4663 08ef FF        		.byte	-1
 4664 08f0 FF        		.byte	-1
 4665 08f1 F8        		.byte	-8
 4666 08f2 1F        		.byte	31
 4667 08f3 FF        		.byte	-1
 4668 08f4 FF        		.byte	-1
 4669 08f5 FF        		.byte	-1
 4670 08f6 F8        		.byte	-8
 4671 08f7 1F        		.byte	31
 4672 08f8 FF        		.byte	-1
 4673 08f9 FF        		.byte	-1
 4674 08fa FF        		.byte	-1
 4675 08fb F8        		.byte	-8
 4676 08fc 0F        		.byte	15
 4677 08fd FF        		.byte	-1
 4678 08fe FF        		.byte	-1
 4679 08ff FF        		.byte	-1
 4680 0900 F8        		.byte	-8
 4681 0901 00        		.byte	0
 4682 0902 00        		.byte	0
 4683 0903 00        		.byte	0
 4684 0904 0F        		.byte	15
 4685 0905 F8        		.byte	-8
 4686 0906 00        		.byte	0
 4687 0907 00        		.byte	0
 4688 0908 00        		.byte	0
 4689 0909 0F        		.byte	15
 4690 090a F8        		.byte	-8
 4691 090b 00        		.byte	0
 4692 090c 00        		.byte	0
 4693 090d 00        		.byte	0
 4694 090e 0F        		.byte	15
 4695 090f F8        		.byte	-8
 4696 0910 00        		.byte	0
 4697 0911 00        		.byte	0
 4698 0912 00        		.byte	0
 4699 0913 0F        		.byte	15
 4700 0914 F8        		.byte	-8
 4701 0915 00        		.byte	0
 4702 0916 00        		.byte	0
 4703 0917 00        		.byte	0
 4704 0918 0F        		.byte	15
 4705 0919 F8        		.byte	-8
 4706 091a 00        		.byte	0
 4707 091b 00        		.byte	0
 4708 091c 00        		.byte	0
 4709 091d 0F        		.byte	15
 4710 091e F8        		.byte	-8
 4711 091f 00        		.byte	0
 4712 0920 00        		.byte	0
 4713 0921 00        		.byte	0
 4714 0922 0F        		.byte	15
 4715 0923 F8        		.byte	-8
 4716 0924 00        		.byte	0
 4717 0925 00        		.byte	0
 4718 0926 00        		.byte	0
 4719 0927 0F        		.byte	15
 4720 0928 F8        		.byte	-8
 4721 0929 00        		.byte	0
 4722 092a 00        		.byte	0
 4723 092b 00        		.byte	0
 4724 092c 0F        		.byte	15
 4725 092d F8        		.byte	-8
 4726 092e 00        		.byte	0
 4727 092f 00        		.byte	0
 4728 0930 00        		.byte	0
 4729 0931 0F        		.byte	15
 4730 0932 F8        		.byte	-8
 4731 0933 00        		.byte	0
 4732 0934 00        		.byte	0
 4733 0935 00        		.byte	0
 4734 0936 0F        		.byte	15
 4735 0937 F8        		.byte	-8
 4736 0938 00        		.byte	0
 4737 0939 00        		.byte	0
 4738 093a 00        		.byte	0
 4739 093b 0F        		.byte	15
 4740 093c F8        		.byte	-8
 4741 093d 00        		.byte	0
 4742 093e 00        		.byte	0
 4743 093f 00        		.byte	0
 4744 0940 0F        		.byte	15
 4745 0941 F8        		.byte	-8
 4746 0942 00        		.byte	0
 4747 0943 00        		.byte	0
 4748 0944 00        		.byte	0
 4749 0945 0F        		.byte	15
 4750 0946 F8        		.byte	-8
 4751 0947 00        		.byte	0
 4752 0948 00        		.byte	0
 4753 0949 00        		.byte	0
 4754 094a 0F        		.byte	15
 4755 094b F8        		.byte	-8
 4756 094c 00        		.byte	0
 4757 094d 00        		.byte	0
 4758 094e 00        		.byte	0
 4759 094f 0F        		.byte	15
 4760 0950 F8        		.byte	-8
 4761 0951 00        		.byte	0
 4762 0952 00        		.byte	0
 4763 0953 00        		.byte	0
 4764 0954 0F        		.byte	15
 4765 0955 F8        		.byte	-8
 4766 0956 00        		.byte	0
 4767 0957 00        		.byte	0
 4768 0958 00        		.byte	0
 4769 0959 0F        		.byte	15
 4770 095a F8        		.byte	-8
 4771 095b 00        		.byte	0
 4772 095c 00        		.byte	0
 4773 095d 00        		.byte	0
 4774 095e 0F        		.byte	15
 4775 095f F8        		.byte	-8
 4776 0960 00        		.byte	0
 4777 0961 00        		.byte	0
 4778 0962 00        		.byte	0
 4779 0963 0F        		.byte	15
 4780 0964 F8        		.byte	-8
 4781 0965 00        		.byte	0
 4782 0966 00        		.byte	0
 4783 0967 00        		.byte	0
 4784 0968 0F        		.byte	15
 4785 0969 F8        		.byte	-8
 4786 096a 00        		.byte	0
 4787 096b 00        		.byte	0
 4788 096c 00        		.byte	0
 4789 096d 0F        		.byte	15
 4790 096e F8        		.byte	-8
 4791 096f 00        		.byte	0
 4792 0970 00        		.byte	0
 4793 0971 00        		.byte	0
 4794 0972 0F        		.byte	15
 4795 0973 F8        		.byte	-8
 4796 0974 00        		.byte	0
 4797 0975 00        		.byte	0
 4798 0976 00        		.byte	0
 4799 0977 0F        		.byte	15
 4800 0978 F8        		.byte	-8
 4801 0979 00        		.byte	0
 4802 097a 00        		.byte	0
 4803 097b 00        		.byte	0
 4804 097c 0F        		.byte	15
 4805 097d F8        		.byte	-8
 4806 097e 00        		.byte	0
 4807 097f 00        		.byte	0
 4808 0980 00        		.byte	0
 4809 0981 0F        		.byte	15
 4810 0982 F8        		.byte	-8
 4811 0983 00        		.byte	0
 4812 0984 00        		.byte	0
 4813 0985 00        		.byte	0
 4814 0986 0F        		.byte	15
 4815 0987 F8        		.byte	-8
 4816 0988 00        		.byte	0
 4817 0989 00        		.byte	0
 4818 098a 00        		.byte	0
 4819 098b 0F        		.byte	15
 4820 098c F8        		.byte	-8
 4821 098d 00        		.byte	0
 4822 098e 00        		.byte	0
 4823 098f 00        		.byte	0
 4824 0990 0F        		.byte	15
 4825 0991 F8        		.byte	-8
 4826 0992 00        		.byte	0
 4827 0993 00        		.byte	0
 4828 0994 00        		.byte	0
 4829 0995 0F        		.byte	15
 4830 0996 F8        		.byte	-8
 4831 0997 00        		.byte	0
 4832 0998 00        		.byte	0
 4833 0999 00        		.byte	0
 4834 099a 0F        		.byte	15
 4835 099b F8        		.byte	-8
 4836 099c 00        		.byte	0
 4837 099d 00        		.byte	0
 4838 099e 00        		.byte	0
 4839 099f 0F        		.byte	15
 4840 09a0 F8        		.byte	-8
 4841 09a1 00        		.byte	0
 4842 09a2 00        		.byte	0
 4843 09a3 00        		.byte	0
 4844 09a4 0F        		.byte	15
 4845 09a5 F8        		.byte	-8
 4846 09a6 00        		.byte	0
 4847 09a7 00        		.byte	0
 4848 09a8 00        		.byte	0
 4849 09a9 0F        		.byte	15
 4850 09aa F8        		.byte	-8
 4851 09ab 00        		.byte	0
 4852 09ac 00        		.byte	0
 4853 09ad 00        		.byte	0
 4854 09ae 0F        		.byte	15
 4855 09af F8        		.byte	-8
 4856 09b0 00        		.byte	0
 4857 09b1 00        		.byte	0
 4858 09b2 00        		.byte	0
 4859 09b3 0F        		.byte	15
 4860 09b4 F8        		.byte	-8
 4861 09b5 00        		.byte	0
 4862 09b6 00        		.byte	0
 4863 09b7 00        		.byte	0
 4864 09b8 0F        		.byte	15
 4865 09b9 F8        		.byte	-8
 4866 09ba 00        		.byte	0
 4867 09bb 00        		.byte	0
 4868 09bc 00        		.byte	0
 4869 09bd 0F        		.byte	15
 4870 09be F8        		.byte	-8
 4871 09bf 00        		.byte	0
 4872 09c0 00        		.byte	0
 4873 09c1 00        		.byte	0
 4874 09c2 0F        		.byte	15
 4875 09c3 F8        		.byte	-8
 4876 09c4 00        		.byte	0
 4877 09c5 00        		.byte	0
 4878 09c6 00        		.byte	0
 4879 09c7 0F        		.byte	15
 4880 09c8 F8        		.byte	-8
 4881 09c9 00        		.byte	0
 4882 09ca 00        		.byte	0
 4883 09cb 00        		.byte	0
 4884 09cc 0F        		.byte	15
 4885 09cd F8        		.byte	-8
 4886 09ce 00        		.byte	0
 4887 09cf 00        		.byte	0
 4888 09d0 00        		.byte	0
 4889 09d1 0F        		.byte	15
 4890 09d2 F8        		.byte	-8
 4891 09d3 00        		.byte	0
 4892 09d4 00        		.byte	0
 4893 09d5 00        		.byte	0
 4894 09d6 0F        		.byte	15
 4895 09d7 F8        		.byte	-8
 4896 09d8 00        		.byte	0
 4897 09d9 00        		.byte	0
 4898 09da 00        		.byte	0
 4899 09db 0F        		.byte	15
 4900 09dc F8        		.byte	-8
 4901 09dd 00        		.byte	0
 4902 09de 00        		.byte	0
 4903 09df 00        		.byte	0
 4904 09e0 0F        		.byte	15
 4905 09e1 F8        		.byte	-8
 4906 09e2 00        		.byte	0
 4907 09e3 00        		.byte	0
 4908 09e4 00        		.byte	0
 4909 09e5 0F        		.byte	15
 4910 09e6 F8        		.byte	-8
 4911 09e7 00        		.byte	0
 4912 09e8 00        		.byte	0
 4913 09e9 00        		.byte	0
 4914 09ea 0F        		.byte	15
 4915 09eb F0        		.byte	-16
 4916 09ec 00        		.byte	0
 4917 09ed 00        		.byte	0
 4918 09ee 00        		.byte	0
 4919 09ef 00        		.byte	0
 4920 09f0 00        		.byte	0
 4921 09f1 00        		.byte	0
 4922 09f2 00        		.byte	0
 4923 09f3 00        		.byte	0
 4924 09f4 00        		.byte	0
 4925 09f5 00        		.byte	0
 4926 09f6 00        		.byte	0
 4927 09f7 00        		.byte	0
 4928 09f8 00        		.byte	0
 4929 09f9 00        		.byte	0
 4930 09fa 00        		.byte	0
 4931 09fb 00        		.byte	0
 4932 09fc 00        		.byte	0
 4933 09fd 00        		.byte	0
 4934 09fe 00        		.byte	0
 4935 09ff 00        		.byte	0
 4936 0a00 00        		.byte	0
 4937 0a01 00        		.byte	0
 4938 0a02 00        		.byte	0
 4939 0a03 00        		.byte	0
 4940 0a04 00        		.byte	0
 4941 0a05 00        		.byte	0
 4942 0a06 00        		.byte	0
 4943 0a07 00        		.byte	0
 4944 0a08 00        		.byte	0
 4945 0a09 00        		.byte	0
 4946 0a0a 00        		.byte	0
 4947 0a0b 00        		.byte	0
 4948 0a0c 00        		.byte	0
 4949 0a0d 00        		.byte	0
 4950 0a0e 00        		.byte	0
 4951 0a0f 00        		.byte	0
 4952 0a10 00        		.byte	0
 4953 0a11 00        		.byte	0
 4954 0a12 00        		.byte	0
 4955 0a13 00        		.byte	0
 4956 0a14 03        		.byte	3
 4957 0a15 FF        		.byte	-1
 4958 0a16 FF        		.byte	-1
 4959 0a17 FF        		.byte	-1
 4960 0a18 C0        		.byte	-64
 4961 0a19 07        		.byte	7
 4962 0a1a FF        		.byte	-1
 4963 0a1b FF        		.byte	-1
 4964 0a1c FF        		.byte	-1
 4965 0a1d E0        		.byte	-32
 4966 0a1e 0F        		.byte	15
 4967 0a1f FF        		.byte	-1
 4968 0a20 FF        		.byte	-1
 4969 0a21 FF        		.byte	-1
 4970 0a22 F0        		.byte	-16
 4971 0a23 1F        		.byte	31
 4972 0a24 FF        		.byte	-1
 4973 0a25 FF        		.byte	-1
 4974 0a26 FF        		.byte	-1
 4975 0a27 F8        		.byte	-8
 4976 0a28 1F        		.byte	31
 4977 0a29 FF        		.byte	-1
 4978 0a2a FF        		.byte	-1
 4979 0a2b FF        		.byte	-1
 4980 0a2c F8        		.byte	-8
 4981 0a2d 1F        		.byte	31
 4982 0a2e FF        		.byte	-1
 4983 0a2f FF        		.byte	-1
 4984 0a30 FF        		.byte	-1
 4985 0a31 F8        		.byte	-8
 4986 0a32 1F        		.byte	31
 4987 0a33 FF        		.byte	-1
 4988 0a34 FF        		.byte	-1
 4989 0a35 FF        		.byte	-1
 4990 0a36 F8        		.byte	-8
 4991 0a37 1F        		.byte	31
 4992 0a38 FF        		.byte	-1
 4993 0a39 FF        		.byte	-1
 4994 0a3a FF        		.byte	-1
 4995 0a3b F8        		.byte	-8
 4996 0a3c 1F        		.byte	31
 4997 0a3d FF        		.byte	-1
 4998 0a3e FF        		.byte	-1
 4999 0a3f FF        		.byte	-1
 5000 0a40 F8        		.byte	-8
 5001 0a41 1F        		.byte	31
 5002 0a42 F8        		.byte	-8
 5003 0a43 00        		.byte	0
 5004 0a44 1F        		.byte	31
 5005 0a45 F8        		.byte	-8
 5006 0a46 1F        		.byte	31
 5007 0a47 F0        		.byte	-16
 5008 0a48 00        		.byte	0
 5009 0a49 0F        		.byte	15
 5010 0a4a F8        		.byte	-8
 5011 0a4b 1F        		.byte	31
 5012 0a4c F0        		.byte	-16
 5013 0a4d 00        		.byte	0
 5014 0a4e 0F        		.byte	15
 5015 0a4f F8        		.byte	-8
 5016 0a50 1F        		.byte	31
 5017 0a51 F0        		.byte	-16
 5018 0a52 00        		.byte	0
 5019 0a53 0F        		.byte	15
 5020 0a54 F8        		.byte	-8
 5021 0a55 1F        		.byte	31
 5022 0a56 F0        		.byte	-16
 5023 0a57 00        		.byte	0
 5024 0a58 0F        		.byte	15
 5025 0a59 F8        		.byte	-8
 5026 0a5a 1F        		.byte	31
 5027 0a5b F0        		.byte	-16
 5028 0a5c 00        		.byte	0
 5029 0a5d 0F        		.byte	15
 5030 0a5e F8        		.byte	-8
 5031 0a5f 1F        		.byte	31
 5032 0a60 F0        		.byte	-16
 5033 0a61 00        		.byte	0
 5034 0a62 0F        		.byte	15
 5035 0a63 F8        		.byte	-8
 5036 0a64 1F        		.byte	31
 5037 0a65 F0        		.byte	-16
 5038 0a66 00        		.byte	0
 5039 0a67 0F        		.byte	15
 5040 0a68 F8        		.byte	-8
 5041 0a69 1F        		.byte	31
 5042 0a6a F0        		.byte	-16
 5043 0a6b 00        		.byte	0
 5044 0a6c 0F        		.byte	15
 5045 0a6d F8        		.byte	-8
 5046 0a6e 1F        		.byte	31
 5047 0a6f F0        		.byte	-16
 5048 0a70 00        		.byte	0
 5049 0a71 0F        		.byte	15
 5050 0a72 F8        		.byte	-8
 5051 0a73 1F        		.byte	31
 5052 0a74 F0        		.byte	-16
 5053 0a75 00        		.byte	0
 5054 0a76 0F        		.byte	15
 5055 0a77 F8        		.byte	-8
 5056 0a78 1F        		.byte	31
 5057 0a79 F0        		.byte	-16
 5058 0a7a 00        		.byte	0
 5059 0a7b 0F        		.byte	15
 5060 0a7c F8        		.byte	-8
 5061 0a7d 1F        		.byte	31
 5062 0a7e F0        		.byte	-16
 5063 0a7f 00        		.byte	0
 5064 0a80 0F        		.byte	15
 5065 0a81 F8        		.byte	-8
 5066 0a82 1F        		.byte	31
 5067 0a83 F8        		.byte	-8
 5068 0a84 00        		.byte	0
 5069 0a85 1F        		.byte	31
 5070 0a86 F8        		.byte	-8
 5071 0a87 1F        		.byte	31
 5072 0a88 FF        		.byte	-1
 5073 0a89 FF        		.byte	-1
 5074 0a8a FF        		.byte	-1
 5075 0a8b F8        		.byte	-8
 5076 0a8c 1F        		.byte	31
 5077 0a8d FF        		.byte	-1
 5078 0a8e FF        		.byte	-1
 5079 0a8f FF        		.byte	-1
 5080 0a90 F8        		.byte	-8
 5081 0a91 1F        		.byte	31
 5082 0a92 FF        		.byte	-1
 5083 0a93 FF        		.byte	-1
 5084 0a94 FF        		.byte	-1
 5085 0a95 F8        		.byte	-8
 5086 0a96 1F        		.byte	31
 5087 0a97 FF        		.byte	-1
 5088 0a98 FF        		.byte	-1
 5089 0a99 FF        		.byte	-1
 5090 0a9a F8        		.byte	-8
 5091 0a9b 1F        		.byte	31
 5092 0a9c FF        		.byte	-1
 5093 0a9d FF        		.byte	-1
 5094 0a9e FF        		.byte	-1
 5095 0a9f F8        		.byte	-8
 5096 0aa0 1F        		.byte	31
 5097 0aa1 FF        		.byte	-1
 5098 0aa2 FF        		.byte	-1
 5099 0aa3 FF        		.byte	-1
 5100 0aa4 F8        		.byte	-8
 5101 0aa5 1F        		.byte	31
 5102 0aa6 FF        		.byte	-1
 5103 0aa7 FF        		.byte	-1
 5104 0aa8 FF        		.byte	-1
 5105 0aa9 F8        		.byte	-8
 5106 0aaa 1F        		.byte	31
 5107 0aab FF        		.byte	-1
 5108 0aac FF        		.byte	-1
 5109 0aad FF        		.byte	-1
 5110 0aae F8        		.byte	-8
 5111 0aaf 1F        		.byte	31
 5112 0ab0 FF        		.byte	-1
 5113 0ab1 FF        		.byte	-1
 5114 0ab2 FF        		.byte	-1
 5115 0ab3 F8        		.byte	-8
 5116 0ab4 1F        		.byte	31
 5117 0ab5 F8        		.byte	-8
 5118 0ab6 00        		.byte	0
 5119 0ab7 1F        		.byte	31
 5120 0ab8 F8        		.byte	-8
 5121 0ab9 1F        		.byte	31
 5122 0aba F0        		.byte	-16
 5123 0abb 00        		.byte	0
 5124 0abc 0F        		.byte	15
 5125 0abd F8        		.byte	-8
 5126 0abe 1F        		.byte	31
 5127 0abf F0        		.byte	-16
 5128 0ac0 00        		.byte	0
 5129 0ac1 0F        		.byte	15
 5130 0ac2 F8        		.byte	-8
 5131 0ac3 1F        		.byte	31
 5132 0ac4 F0        		.byte	-16
 5133 0ac5 00        		.byte	0
 5134 0ac6 0F        		.byte	15
 5135 0ac7 F8        		.byte	-8
 5136 0ac8 1F        		.byte	31
 5137 0ac9 F0        		.byte	-16
 5138 0aca 00        		.byte	0
 5139 0acb 0F        		.byte	15
 5140 0acc F8        		.byte	-8
 5141 0acd 1F        		.byte	31
 5142 0ace F0        		.byte	-16
 5143 0acf 00        		.byte	0
 5144 0ad0 0F        		.byte	15
 5145 0ad1 F8        		.byte	-8
 5146 0ad2 1F        		.byte	31
 5147 0ad3 F0        		.byte	-16
 5148 0ad4 00        		.byte	0
 5149 0ad5 0F        		.byte	15
 5150 0ad6 F8        		.byte	-8
 5151 0ad7 1F        		.byte	31
 5152 0ad8 F0        		.byte	-16
 5153 0ad9 00        		.byte	0
 5154 0ada 0F        		.byte	15
 5155 0adb F8        		.byte	-8
 5156 0adc 1F        		.byte	31
 5157 0add F0        		.byte	-16
 5158 0ade 00        		.byte	0
 5159 0adf 0F        		.byte	15
 5160 0ae0 F8        		.byte	-8
 5161 0ae1 1F        		.byte	31
 5162 0ae2 F0        		.byte	-16
 5163 0ae3 00        		.byte	0
 5164 0ae4 0F        		.byte	15
 5165 0ae5 F8        		.byte	-8
 5166 0ae6 1F        		.byte	31
 5167 0ae7 F0        		.byte	-16
 5168 0ae8 00        		.byte	0
 5169 0ae9 0F        		.byte	15
 5170 0aea F8        		.byte	-8
 5171 0aeb 1F        		.byte	31
 5172 0aec F0        		.byte	-16
 5173 0aed 00        		.byte	0
 5174 0aee 0F        		.byte	15
 5175 0aef F8        		.byte	-8
 5176 0af0 1F        		.byte	31
 5177 0af1 F0        		.byte	-16
 5178 0af2 00        		.byte	0
 5179 0af3 0F        		.byte	15
 5180 0af4 F8        		.byte	-8
 5181 0af5 1F        		.byte	31
 5182 0af6 F0        		.byte	-16
 5183 0af7 00        		.byte	0
 5184 0af8 0F        		.byte	15
 5185 0af9 F8        		.byte	-8
 5186 0afa 1F        		.byte	31
 5187 0afb F8        		.byte	-8
 5188 0afc 00        		.byte	0
 5189 0afd 1F        		.byte	31
 5190 0afe F8        		.byte	-8
 5191 0aff 1F        		.byte	31
 5192 0b00 FF        		.byte	-1
 5193 0b01 FF        		.byte	-1
 5194 0b02 FF        		.byte	-1
 5195 0b03 F8        		.byte	-8
 5196 0b04 1F        		.byte	31
 5197 0b05 FF        		.byte	-1
 5198 0b06 FF        		.byte	-1
 5199 0b07 FF        		.byte	-1
 5200 0b08 F8        		.byte	-8
 5201 0b09 1F        		.byte	31
 5202 0b0a FF        		.byte	-1
 5203 0b0b FF        		.byte	-1
 5204 0b0c FF        		.byte	-1
 5205 0b0d F8        		.byte	-8
 5206 0b0e 1F        		.byte	31
 5207 0b0f FF        		.byte	-1
 5208 0b10 FF        		.byte	-1
 5209 0b11 FF        		.byte	-1
 5210 0b12 F8        		.byte	-8
 5211 0b13 1F        		.byte	31
 5212 0b14 FF        		.byte	-1
 5213 0b15 FF        		.byte	-1
 5214 0b16 FF        		.byte	-1
 5215 0b17 F8        		.byte	-8
 5216 0b18 1F        		.byte	31
 5217 0b19 FF        		.byte	-1
 5218 0b1a FF        		.byte	-1
 5219 0b1b FF        		.byte	-1
 5220 0b1c F8        		.byte	-8
 5221 0b1d 1F        		.byte	31
 5222 0b1e FF        		.byte	-1
 5223 0b1f FF        		.byte	-1
 5224 0b20 FF        		.byte	-1
 5225 0b21 F8        		.byte	-8
 5226 0b22 1F        		.byte	31
 5227 0b23 FF        		.byte	-1
 5228 0b24 FF        		.byte	-1
 5229 0b25 FF        		.byte	-1
 5230 0b26 F8        		.byte	-8
 5231 0b27 0F        		.byte	15
 5232 0b28 FF        		.byte	-1
 5233 0b29 FF        		.byte	-1
 5234 0b2a FF        		.byte	-1
 5235 0b2b F0        		.byte	-16
 5236 0b2c 00        		.byte	0
 5237 0b2d 00        		.byte	0
 5238 0b2e 00        		.byte	0
 5239 0b2f 00        		.byte	0
 5240 0b30 00        		.byte	0
 5241 0b31 00        		.byte	0
 5242 0b32 00        		.byte	0
 5243 0b33 00        		.byte	0
 5244 0b34 00        		.byte	0
 5245 0b35 00        		.byte	0
 5246 0b36 00        		.byte	0
 5247 0b37 00        		.byte	0
 5248 0b38 00        		.byte	0
 5249 0b39 00        		.byte	0
 5250 0b3a 00        		.byte	0
 5251 0b3b 00        		.byte	0
 5252 0b3c 00        		.byte	0
 5253 0b3d 00        		.byte	0
 5254 0b3e 00        		.byte	0
 5255 0b3f 00        		.byte	0
 5256 0b40 00        		.byte	0
 5257 0b41 00        		.byte	0
 5258 0b42 00        		.byte	0
 5259 0b43 00        		.byte	0
 5260 0b44 00        		.byte	0
 5261 0b45 00        		.byte	0
 5262 0b46 00        		.byte	0
 5263 0b47 00        		.byte	0
 5264 0b48 00        		.byte	0
 5265 0b49 00        		.byte	0
 5266 0b4a 00        		.byte	0
 5267 0b4b 00        		.byte	0
 5268 0b4c 00        		.byte	0
 5269 0b4d 00        		.byte	0
 5270 0b4e 00        		.byte	0
 5271 0b4f 00        		.byte	0
 5272 0b50 00        		.byte	0
 5273 0b51 00        		.byte	0
 5274 0b52 00        		.byte	0
 5275 0b53 00        		.byte	0
 5276 0b54 07        		.byte	7
 5277 0b55 FF        		.byte	-1
 5278 0b56 FF        		.byte	-1
 5279 0b57 FF        		.byte	-1
 5280 0b58 E0        		.byte	-32
 5281 0b59 0F        		.byte	15
 5282 0b5a FF        		.byte	-1
 5283 0b5b FF        		.byte	-1
 5284 0b5c FF        		.byte	-1
 5285 0b5d F0        		.byte	-16
 5286 0b5e 1F        		.byte	31
 5287 0b5f FF        		.byte	-1
 5288 0b60 FF        		.byte	-1
 5289 0b61 FF        		.byte	-1
 5290 0b62 F8        		.byte	-8
 5291 0b63 1F        		.byte	31
 5292 0b64 FF        		.byte	-1
 5293 0b65 FF        		.byte	-1
 5294 0b66 FF        		.byte	-1
 5295 0b67 F8        		.byte	-8
 5296 0b68 1F        		.byte	31
 5297 0b69 FF        		.byte	-1
 5298 0b6a FF        		.byte	-1
 5299 0b6b FF        		.byte	-1
 5300 0b6c F8        		.byte	-8
 5301 0b6d 1F        		.byte	31
 5302 0b6e FF        		.byte	-1
 5303 0b6f FF        		.byte	-1
 5304 0b70 FF        		.byte	-1
 5305 0b71 F8        		.byte	-8
 5306 0b72 1F        		.byte	31
 5307 0b73 FF        		.byte	-1
 5308 0b74 FF        		.byte	-1
 5309 0b75 FF        		.byte	-1
 5310 0b76 F8        		.byte	-8
 5311 0b77 1F        		.byte	31
 5312 0b78 FF        		.byte	-1
 5313 0b79 FF        		.byte	-1
 5314 0b7a FF        		.byte	-1
 5315 0b7b F8        		.byte	-8
 5316 0b7c 1F        		.byte	31
 5317 0b7d FF        		.byte	-1
 5318 0b7e FF        		.byte	-1
 5319 0b7f FF        		.byte	-1
 5320 0b80 F8        		.byte	-8
 5321 0b81 1F        		.byte	31
 5322 0b82 F8        		.byte	-8
 5323 0b83 00        		.byte	0
 5324 0b84 1F        		.byte	31
 5325 0b85 F8        		.byte	-8
 5326 0b86 1F        		.byte	31
 5327 0b87 F0        		.byte	-16
 5328 0b88 00        		.byte	0
 5329 0b89 0F        		.byte	15
 5330 0b8a F8        		.byte	-8
 5331 0b8b 1F        		.byte	31
 5332 0b8c F0        		.byte	-16
 5333 0b8d 00        		.byte	0
 5334 0b8e 0F        		.byte	15
 5335 0b8f F8        		.byte	-8
 5336 0b90 1F        		.byte	31
 5337 0b91 F0        		.byte	-16
 5338 0b92 00        		.byte	0
 5339 0b93 0F        		.byte	15
 5340 0b94 F8        		.byte	-8
 5341 0b95 1F        		.byte	31
 5342 0b96 F0        		.byte	-16
 5343 0b97 00        		.byte	0
 5344 0b98 0F        		.byte	15
 5345 0b99 F8        		.byte	-8
 5346 0b9a 1F        		.byte	31
 5347 0b9b F0        		.byte	-16
 5348 0b9c 00        		.byte	0
 5349 0b9d 0F        		.byte	15
 5350 0b9e F8        		.byte	-8
 5351 0b9f 1F        		.byte	31
 5352 0ba0 F0        		.byte	-16
 5353 0ba1 00        		.byte	0
 5354 0ba2 0F        		.byte	15
 5355 0ba3 F8        		.byte	-8
 5356 0ba4 1F        		.byte	31
 5357 0ba5 F0        		.byte	-16
 5358 0ba6 00        		.byte	0
 5359 0ba7 0F        		.byte	15
 5360 0ba8 F8        		.byte	-8
 5361 0ba9 1F        		.byte	31
 5362 0baa F0        		.byte	-16
 5363 0bab 00        		.byte	0
 5364 0bac 0F        		.byte	15
 5365 0bad F8        		.byte	-8
 5366 0bae 1F        		.byte	31
 5367 0baf F0        		.byte	-16
 5368 0bb0 00        		.byte	0
 5369 0bb1 0F        		.byte	15
 5370 0bb2 F8        		.byte	-8
 5371 0bb3 1F        		.byte	31
 5372 0bb4 F0        		.byte	-16
 5373 0bb5 00        		.byte	0
 5374 0bb6 0F        		.byte	15
 5375 0bb7 F8        		.byte	-8
 5376 0bb8 1F        		.byte	31
 5377 0bb9 F0        		.byte	-16
 5378 0bba 00        		.byte	0
 5379 0bbb 0F        		.byte	15
 5380 0bbc F8        		.byte	-8
 5381 0bbd 1F        		.byte	31
 5382 0bbe F0        		.byte	-16
 5383 0bbf 00        		.byte	0
 5384 0bc0 0F        		.byte	15
 5385 0bc1 F8        		.byte	-8
 5386 0bc2 1F        		.byte	31
 5387 0bc3 F8        		.byte	-8
 5388 0bc4 00        		.byte	0
 5389 0bc5 1F        		.byte	31
 5390 0bc6 F8        		.byte	-8
 5391 0bc7 1F        		.byte	31
 5392 0bc8 FF        		.byte	-1
 5393 0bc9 FF        		.byte	-1
 5394 0bca FF        		.byte	-1
 5395 0bcb F8        		.byte	-8
 5396 0bcc 1F        		.byte	31
 5397 0bcd FF        		.byte	-1
 5398 0bce FF        		.byte	-1
 5399 0bcf FF        		.byte	-1
 5400 0bd0 F8        		.byte	-8
 5401 0bd1 1F        		.byte	31
 5402 0bd2 FF        		.byte	-1
 5403 0bd3 FF        		.byte	-1
 5404 0bd4 FF        		.byte	-1
 5405 0bd5 F8        		.byte	-8
 5406 0bd6 1F        		.byte	31
 5407 0bd7 FF        		.byte	-1
 5408 0bd8 FF        		.byte	-1
 5409 0bd9 FF        		.byte	-1
 5410 0bda F8        		.byte	-8
 5411 0bdb 1F        		.byte	31
 5412 0bdc FF        		.byte	-1
 5413 0bdd FF        		.byte	-1
 5414 0bde FF        		.byte	-1
 5415 0bdf F8        		.byte	-8
 5416 0be0 1F        		.byte	31
 5417 0be1 FF        		.byte	-1
 5418 0be2 FF        		.byte	-1
 5419 0be3 FF        		.byte	-1
 5420 0be4 F8        		.byte	-8
 5421 0be5 1F        		.byte	31
 5422 0be6 FF        		.byte	-1
 5423 0be7 FF        		.byte	-1
 5424 0be8 FF        		.byte	-1
 5425 0be9 F8        		.byte	-8
 5426 0bea 1F        		.byte	31
 5427 0beb FF        		.byte	-1
 5428 0bec FF        		.byte	-1
 5429 0bed FF        		.byte	-1
 5430 0bee F8        		.byte	-8
 5431 0bef 0F        		.byte	15
 5432 0bf0 FF        		.byte	-1
 5433 0bf1 FF        		.byte	-1
 5434 0bf2 FF        		.byte	-1
 5435 0bf3 F8        		.byte	-8
 5436 0bf4 00        		.byte	0
 5437 0bf5 00        		.byte	0
 5438 0bf6 00        		.byte	0
 5439 0bf7 0F        		.byte	15
 5440 0bf8 F8        		.byte	-8
 5441 0bf9 00        		.byte	0
 5442 0bfa 00        		.byte	0
 5443 0bfb 00        		.byte	0
 5444 0bfc 0F        		.byte	15
 5445 0bfd F8        		.byte	-8
 5446 0bfe 00        		.byte	0
 5447 0bff 00        		.byte	0
 5448 0c00 00        		.byte	0
 5449 0c01 0F        		.byte	15
 5450 0c02 F8        		.byte	-8
 5451 0c03 00        		.byte	0
 5452 0c04 00        		.byte	0
 5453 0c05 00        		.byte	0
 5454 0c06 0F        		.byte	15
 5455 0c07 F8        		.byte	-8
 5456 0c08 00        		.byte	0
 5457 0c09 00        		.byte	0
 5458 0c0a 00        		.byte	0
 5459 0c0b 0F        		.byte	15
 5460 0c0c F8        		.byte	-8
 5461 0c0d 00        		.byte	0
 5462 0c0e 00        		.byte	0
 5463 0c0f 00        		.byte	0
 5464 0c10 0F        		.byte	15
 5465 0c11 F8        		.byte	-8
 5466 0c12 00        		.byte	0
 5467 0c13 00        		.byte	0
 5468 0c14 00        		.byte	0
 5469 0c15 0F        		.byte	15
 5470 0c16 F8        		.byte	-8
 5471 0c17 00        		.byte	0
 5472 0c18 00        		.byte	0
 5473 0c19 00        		.byte	0
 5474 0c1a 0F        		.byte	15
 5475 0c1b F8        		.byte	-8
 5476 0c1c 00        		.byte	0
 5477 0c1d 00        		.byte	0
 5478 0c1e 00        		.byte	0
 5479 0c1f 0F        		.byte	15
 5480 0c20 F8        		.byte	-8
 5481 0c21 00        		.byte	0
 5482 0c22 00        		.byte	0
 5483 0c23 00        		.byte	0
 5484 0c24 0F        		.byte	15
 5485 0c25 F8        		.byte	-8
 5486 0c26 00        		.byte	0
 5487 0c27 00        		.byte	0
 5488 0c28 00        		.byte	0
 5489 0c29 0F        		.byte	15
 5490 0c2a F8        		.byte	-8
 5491 0c2b 00        		.byte	0
 5492 0c2c 00        		.byte	0
 5493 0c2d 00        		.byte	0
 5494 0c2e 0F        		.byte	15
 5495 0c2f F8        		.byte	-8
 5496 0c30 00        		.byte	0
 5497 0c31 00        		.byte	0
 5498 0c32 00        		.byte	0
 5499 0c33 0F        		.byte	15
 5500 0c34 F8        		.byte	-8
 5501 0c35 00        		.byte	0
 5502 0c36 00        		.byte	0
 5503 0c37 00        		.byte	0
 5504 0c38 0F        		.byte	15
 5505 0c39 F8        		.byte	-8
 5506 0c3a 00        		.byte	0
 5507 0c3b 00        		.byte	0
 5508 0c3c 00        		.byte	0
 5509 0c3d 0F        		.byte	15
 5510 0c3e F8        		.byte	-8
 5511 0c3f 0F        		.byte	15
 5512 0c40 FF        		.byte	-1
 5513 0c41 FF        		.byte	-1
 5514 0c42 FF        		.byte	-1
 5515 0c43 F8        		.byte	-8
 5516 0c44 1F        		.byte	31
 5517 0c45 FF        		.byte	-1
 5518 0c46 FF        		.byte	-1
 5519 0c47 FF        		.byte	-1
 5520 0c48 F8        		.byte	-8
 5521 0c49 1F        		.byte	31
 5522 0c4a FF        		.byte	-1
 5523 0c4b FF        		.byte	-1
 5524 0c4c FF        		.byte	-1
 5525 0c4d F8        		.byte	-8
 5526 0c4e 1F        		.byte	31
 5527 0c4f FF        		.byte	-1
 5528 0c50 FF        		.byte	-1
 5529 0c51 FF        		.byte	-1
 5530 0c52 F8        		.byte	-8
 5531 0c53 1F        		.byte	31
 5532 0c54 FF        		.byte	-1
 5533 0c55 FF        		.byte	-1
 5534 0c56 FF        		.byte	-1
 5535 0c57 F8        		.byte	-8
 5536 0c58 1F        		.byte	31
 5537 0c59 FF        		.byte	-1
 5538 0c5a FF        		.byte	-1
 5539 0c5b FF        		.byte	-1
 5540 0c5c F8        		.byte	-8
 5541 0c5d 1F        		.byte	31
 5542 0c5e FF        		.byte	-1
 5543 0c5f FF        		.byte	-1
 5544 0c60 FF        		.byte	-1
 5545 0c61 F8        		.byte	-8
 5546 0c62 1F        		.byte	31
 5547 0c63 FF        		.byte	-1
 5548 0c64 FF        		.byte	-1
 5549 0c65 FF        		.byte	-1
 5550 0c66 F8        		.byte	-8
 5551 0c67 0F        		.byte	15
 5552 0c68 FF        		.byte	-1
 5553 0c69 FF        		.byte	-1
 5554 0c6a FF        		.byte	-1
 5555 0c6b F0        		.byte	-16
 5556 0c6c 00        		.byte	0
 5557 0c6d 00        		.byte	0
 5558 0c6e 00        		.byte	0
 5559 0c6f 00        		.byte	0
 5560 0c70 00        		.byte	0
 5561 0c71 00        		.byte	0
 5562 0c72 00        		.byte	0
 5563 0c73 00        		.byte	0
 5564 0c74 00        		.byte	0
 5565 0c75 00        		.byte	0
 5566 0c76 00        		.byte	0
 5567 0c77 00        		.byte	0
 5568 0c78 00        		.byte	0
 5569 0c79 00        		.byte	0
 5570 0c7a 00        		.byte	0
 5571 0c7b 00        		.byte	0
 5572 0c7c 00        		.byte	0
 5573 0c7d 00        		.byte	0
 5574 0c7e 00        		.byte	0
 5575 0c7f 00        		.byte	0
 5578               	maskArray:
 5579 0c80 FF        		.byte	-1
 5580 0c81 C0        		.byte	-64
 5581 0c82 81        		.byte	-127
 5582 0c83 00        		.byte	0
 5583 0c84 01        		.byte	1
 5584 0c85 00        		.byte	0
 5585 0c86 81        		.byte	-127
 5586 0c87 C0        		.byte	-64
 5587 0c88 7E        		.byte	126
 5588 0c89 FF        		.byte	-1
 5589 0c8a FF        		.byte	-1
 5590 0c8b FF        		.byte	-1
 5591 0c8c FF        		.byte	-1
 5592 0c8d FF        		.byte	-1
 5593 0c8e FF        		.byte	-1
 5594 0c8f 7E        		.byte	126
 5595 0c90 EF        		.byte	-17
 5596 0c91 DF        		.byte	-33
 5597 0c92 BF        		.byte	-65
 5598 0c93 00        		.byte	0
 5599 0c94 00        		.byte	0
 5600 0c95 BF        		.byte	-65
 5601 0c96 DF        		.byte	-33
 5602 0c97 EF        		.byte	-17
 5603 0c98 EF        		.byte	-17
 5604 0c99 DF        		.byte	-33
 5605 0c9a BF        		.byte	-65
 5606 0c9b 00        		.byte	0
 5607 0c9c FF        		.byte	-1
 5608 0c9d FF        		.byte	-1
 5609 0c9e FF        		.byte	-1
 5610 0c9f FF        		.byte	-1
 5611 0ca0 C3        		.byte	-61
 5612 0ca1 81        		.byte	-127
 5613 0ca2 00        		.byte	0
 5614 0ca3 00        		.byte	0
 5615 0ca4 00        		.byte	0
 5616 0ca5 00        		.byte	0
 5617 0ca6 99        		.byte	-103
 5618 0ca7 DB        		.byte	-37
 5619 0ca8 C3        		.byte	-61
 5620 0ca9 81        		.byte	-127
 5621 0caa 00        		.byte	0
 5622 0cab 00        		.byte	0
 5623 0cac 00        		.byte	0
 5624 0cad 00        		.byte	0
 5625 0cae 81        		.byte	-127
 5626 0caf C3        		.byte	-61
 5627 0cb0 DB        		.byte	-37
 5628 0cb1 99        		.byte	-103
 5629 0cb2 00        		.byte	0
 5630 0cb3 00        		.byte	0
 5631 0cb4 00        		.byte	0
 5632 0cb5 00        		.byte	0
 5633 0cb6 81        		.byte	-127
 5634 0cb7 C3        		.byte	-61
 5635 0cb8 C3        		.byte	-61
 5636 0cb9 81        		.byte	-127
 5637 0cba 00        		.byte	0
 5638 0cbb 00        		.byte	0
 5639 0cbc 00        		.byte	0
 5640 0cbd 00        		.byte	0
 5641 0cbe 81        		.byte	-127
 5642 0cbf C3        		.byte	-61
 5645               	spriteArray:
 5646 0cc0 00        		.byte	0
 5647 0cc1 3F        		.byte	63
 5648 0cc2 42        		.byte	66
 5649 0cc3 91        		.byte	-111
 5650 0cc4 82        		.byte	-126
 5651 0cc5 91        		.byte	-111
 5652 0cc6 42        		.byte	66
 5653 0cc7 3F        		.byte	63
 5654 0cc8 81        		.byte	-127
 5655 0cc9 00        		.byte	0
 5656 0cca 00        		.byte	0
 5657 0ccb 00        		.byte	0
 5658 0ccc 00        		.byte	0
 5659 0ccd 00        		.byte	0
 5660 0cce 00        		.byte	0
 5661 0ccf 81        		.byte	-127
 5662 0cd0 10        		.byte	16
 5663 0cd1 20        		.byte	32
 5664 0cd2 40        		.byte	64
 5665 0cd3 FF        		.byte	-1
 5666 0cd4 FF        		.byte	-1
 5667 0cd5 40        		.byte	64
 5668 0cd6 20        		.byte	32
 5669 0cd7 10        		.byte	16
 5670 0cd8 10        		.byte	16
 5671 0cd9 20        		.byte	32
 5672 0cda 40        		.byte	64
 5673 0cdb FF        		.byte	-1
 5674 0cdc 00        		.byte	0
 5675 0cdd 00        		.byte	0
 5676 0cde 00        		.byte	0
 5677 0cdf 00        		.byte	0
 5678 0ce0 3C        		.byte	60
 5679 0ce1 42        		.byte	66
 5680 0ce2 81        		.byte	-127
 5681 0ce3 A1        		.byte	-95
 5682 0ce4 89        		.byte	-119
 5683 0ce5 99        		.byte	-103
 5684 0ce6 66        		.byte	102
 5685 0ce7 24        		.byte	36
 5686 0ce8 3C        		.byte	60
 5687 0ce9 42        		.byte	66
 5688 0cea 81        		.byte	-127
 5689 0ceb A1        		.byte	-95
 5690 0cec 81        		.byte	-127
 5691 0ced 89        		.byte	-119
 5692 0cee 4A        		.byte	74
 5693 0cef 3C        		.byte	60
 5694 0cf0 24        		.byte	36
 5695 0cf1 66        		.byte	102
 5696 0cf2 99        		.byte	-103
 5697 0cf3 89        		.byte	-119
 5698 0cf4 A1        		.byte	-95
 5699 0cf5 81        		.byte	-127
 5700 0cf6 42        		.byte	66
 5701 0cf7 3C        		.byte	60
 5702 0cf8 3C        		.byte	60
 5703 0cf9 4A        		.byte	74
 5704 0cfa 89        		.byte	-119
 5705 0cfb 81        		.byte	-127
 5706 0cfc A1        		.byte	-95
 5707 0cfd 81        		.byte	-127
 5708 0cfe 42        		.byte	66
 5709 0cff 3C        		.byte	60
 5712               	logoArray:
 5713 0d00 80        		.byte	-128
 5714 0d01 C0        		.byte	-64
 5715 0d02 40        		.byte	64
 5716 0d03 0C        		.byte	12
 5717 0d04 3E        		.byte	62
 5718 0d05 FE        		.byte	-2
 5719 0d06 F2        		.byte	-14
 5720 0d07 E0        		.byte	-32
 5721 0d08 F0        		.byte	-16
 5722 0d09 E0        		.byte	-32
 5723 0d0a FF        		.byte	-1
 5724 0d0b 7F        		.byte	127
 5725 0d0c 3F        		.byte	63
 5726 0d0d 1F        		.byte	31
 5727 0d0e 1F        		.byte	31
 5728 0d0f 1F        		.byte	31
 5729 0d10 1F        		.byte	31
 5730 0d11 0F        		.byte	15
 5731 0d12 07        		.byte	7
 5732 0d13 03        		.byte	3
 5735               	characterArray:
 5736 0d14 00        		.byte	0
 5737 0d15 00        		.byte	0
 5738 0d16 00        		.byte	0
 5739 0d17 00        		.byte	0
 5740 0d18 00        		.byte	0
 5741 0d19 00        		.byte	0
 5742 0d1a 6F        		.byte	111
 5743 0d1b 6F        		.byte	111
 5744 0d1c 00        		.byte	0
 5745 0d1d 00        		.byte	0
 5746 0d1e 00        		.byte	0
 5747 0d1f 07        		.byte	7
 5748 0d20 00        		.byte	0
 5749 0d21 07        		.byte	7
 5750 0d22 00        		.byte	0
 5751 0d23 14        		.byte	20
 5752 0d24 7F        		.byte	127
 5753 0d25 14        		.byte	20
 5754 0d26 7F        		.byte	127
 5755 0d27 14        		.byte	20
 5756 0d28 00        		.byte	0
 5757 0d29 26        		.byte	38
 5758 0d2a 6B        		.byte	107
 5759 0d2b 2A        		.byte	42
 5760 0d2c 10        		.byte	16
 5761 0d2d 43        		.byte	67
 5762 0d2e 33        		.byte	51
 5763 0d2f 08        		.byte	8
 5764 0d30 64        		.byte	100
 5765 0d31 63        		.byte	99
 5766 0d32 32        		.byte	50
 5767 0d33 4D        		.byte	77
 5768 0d34 49        		.byte	73
 5769 0d35 36        		.byte	54
 5770 0d36 50        		.byte	80
 5771 0d37 00        		.byte	0
 5772 0d38 00        		.byte	0
 5773 0d39 07        		.byte	7
 5774 0d3a 00        		.byte	0
 5775 0d3b 00        		.byte	0
 5776 0d3c 00        		.byte	0
 5777 0d3d 1C        		.byte	28
 5778 0d3e 22        		.byte	34
 5779 0d3f 41        		.byte	65
 5780 0d40 00        		.byte	0
 5781 0d41 00        		.byte	0
 5782 0d42 41        		.byte	65
 5783 0d43 22        		.byte	34
 5784 0d44 1C        		.byte	28
 5785 0d45 00        		.byte	0
 5786 0d46 11        		.byte	17
 5787 0d47 0A        		.byte	10
 5788 0d48 1F        		.byte	31
 5789 0d49 0A        		.byte	10
 5790 0d4a 11        		.byte	17
 5791 0d4b 10        		.byte	16
 5792 0d4c 10        		.byte	16
 5793 0d4d 7C        		.byte	124
 5794 0d4e 10        		.byte	16
 5795 0d4f 10        		.byte	16
 5796 0d50 00        		.byte	0
 5797 0d51 00        		.byte	0
 5798 0d52 A0        		.byte	-96
 5799 0d53 60        		.byte	96
 5800 0d54 00        		.byte	0
 5801 0d55 10        		.byte	16
 5802 0d56 10        		.byte	16
 5803 0d57 10        		.byte	16
 5804 0d58 10        		.byte	16
 5805 0d59 10        		.byte	16
 5806 0d5a 00        		.byte	0
 5807 0d5b 00        		.byte	0
 5808 0d5c 60        		.byte	96
 5809 0d5d 60        		.byte	96
 5810 0d5e 00        		.byte	0
 5811 0d5f 40        		.byte	64
 5812 0d60 30        		.byte	48
 5813 0d61 08        		.byte	8
 5814 0d62 06        		.byte	6
 5815 0d63 01        		.byte	1
 5816 0d64 3E        		.byte	62
 5817 0d65 51        		.byte	81
 5818 0d66 49        		.byte	73
 5819 0d67 45        		.byte	69
 5820 0d68 3E        		.byte	62
 5821 0d69 00        		.byte	0
 5822 0d6a 42        		.byte	66
 5823 0d6b 7F        		.byte	127
 5824 0d6c 40        		.byte	64
 5825 0d6d 00        		.byte	0
 5826 0d6e 42        		.byte	66
 5827 0d6f 61        		.byte	97
 5828 0d70 51        		.byte	81
 5829 0d71 49        		.byte	73
 5830 0d72 46        		.byte	70
 5831 0d73 22        		.byte	34
 5832 0d74 41        		.byte	65
 5833 0d75 49        		.byte	73
 5834 0d76 49        		.byte	73
 5835 0d77 36        		.byte	54
 5836 0d78 08        		.byte	8
 5837 0d79 0C        		.byte	12
 5838 0d7a 0A        		.byte	10
 5839 0d7b 7F        		.byte	127
 5840 0d7c 08        		.byte	8
 5841 0d7d 27        		.byte	39
 5842 0d7e 45        		.byte	69
 5843 0d7f 45        		.byte	69
 5844 0d80 45        		.byte	69
 5845 0d81 39        		.byte	57
 5846 0d82 3C        		.byte	60
 5847 0d83 4A        		.byte	74
 5848 0d84 49        		.byte	73
 5849 0d85 49        		.byte	73
 5850 0d86 30        		.byte	48
 5851 0d87 01        		.byte	1
 5852 0d88 61        		.byte	97
 5853 0d89 19        		.byte	25
 5854 0d8a 07        		.byte	7
 5855 0d8b 01        		.byte	1
 5856 0d8c 36        		.byte	54
 5857 0d8d 49        		.byte	73
 5858 0d8e 49        		.byte	73
 5859 0d8f 49        		.byte	73
 5860 0d90 36        		.byte	54
 5861 0d91 06        		.byte	6
 5862 0d92 49        		.byte	73
 5863 0d93 49        		.byte	73
 5864 0d94 29        		.byte	41
 5865 0d95 1E        		.byte	30
 5866 0d96 00        		.byte	0
 5867 0d97 00        		.byte	0
 5868 0d98 6C        		.byte	108
 5869 0d99 6C        		.byte	108
 5870 0d9a 00        		.byte	0
 5871 0d9b 00        		.byte	0
 5872 0d9c 00        		.byte	0
 5873 0d9d AC        		.byte	-84
 5874 0d9e 6C        		.byte	108
 5875 0d9f 00        		.byte	0
 5876 0da0 08        		.byte	8
 5877 0da1 14        		.byte	20
 5878 0da2 22        		.byte	34
 5879 0da3 41        		.byte	65
 5880 0da4 00        		.byte	0
 5881 0da5 14        		.byte	20
 5882 0da6 14        		.byte	20
 5883 0da7 14        		.byte	20
 5884 0da8 14        		.byte	20
 5885 0da9 14        		.byte	20
 5886 0daa 00        		.byte	0
 5887 0dab 41        		.byte	65
 5888 0dac 22        		.byte	34
 5889 0dad 14        		.byte	20
 5890 0dae 08        		.byte	8
 5891 0daf 02        		.byte	2
 5892 0db0 01        		.byte	1
 5893 0db1 51        		.byte	81
 5894 0db2 09        		.byte	9
 5895 0db3 06        		.byte	6
 5896 0db4 3E        		.byte	62
 5897 0db5 41        		.byte	65
 5898 0db6 5D        		.byte	93
 5899 0db7 5D        		.byte	93
 5900 0db8 46        		.byte	70
 5901 0db9 7C        		.byte	124
 5902 0dba 12        		.byte	18
 5903 0dbb 11        		.byte	17
 5904 0dbc 12        		.byte	18
 5905 0dbd 7C        		.byte	124
 5906 0dbe 7F        		.byte	127
 5907 0dbf 49        		.byte	73
 5908 0dc0 49        		.byte	73
 5909 0dc1 49        		.byte	73
 5910 0dc2 36        		.byte	54
 5911 0dc3 3E        		.byte	62
 5912 0dc4 41        		.byte	65
 5913 0dc5 41        		.byte	65
 5914 0dc6 41        		.byte	65
 5915 0dc7 22        		.byte	34
 5916 0dc8 7F        		.byte	127
 5917 0dc9 41        		.byte	65
 5918 0dca 41        		.byte	65
 5919 0dcb 41        		.byte	65
 5920 0dcc 3E        		.byte	62
 5921 0dcd 7F        		.byte	127
 5922 0dce 49        		.byte	73
 5923 0dcf 49        		.byte	73
 5924 0dd0 49        		.byte	73
 5925 0dd1 41        		.byte	65
 5926 0dd2 7F        		.byte	127
 5927 0dd3 09        		.byte	9
 5928 0dd4 09        		.byte	9
 5929 0dd5 09        		.byte	9
 5930 0dd6 01        		.byte	1
 5931 0dd7 3E        		.byte	62
 5932 0dd8 41        		.byte	65
 5933 0dd9 41        		.byte	65
 5934 0dda 51        		.byte	81
 5935 0ddb 72        		.byte	114
 5936 0ddc 7F        		.byte	127
 5937 0ddd 08        		.byte	8
 5938 0dde 08        		.byte	8
 5939 0ddf 08        		.byte	8
 5940 0de0 7F        		.byte	127
 5941 0de1 41        		.byte	65
 5942 0de2 41        		.byte	65
 5943 0de3 7F        		.byte	127
 5944 0de4 41        		.byte	65
 5945 0de5 41        		.byte	65
 5946 0de6 21        		.byte	33
 5947 0de7 41        		.byte	65
 5948 0de8 3F        		.byte	63
 5949 0de9 01        		.byte	1
 5950 0dea 01        		.byte	1
 5951 0deb 7F        		.byte	127
 5952 0dec 08        		.byte	8
 5953 0ded 14        		.byte	20
 5954 0dee 22        		.byte	34
 5955 0def 41        		.byte	65
 5956 0df0 7F        		.byte	127
 5957 0df1 40        		.byte	64
 5958 0df2 40        		.byte	64
 5959 0df3 40        		.byte	64
 5960 0df4 40        		.byte	64
 5961 0df5 7F        		.byte	127
 5962 0df6 02        		.byte	2
 5963 0df7 04        		.byte	4
 5964 0df8 02        		.byte	2
 5965 0df9 7F        		.byte	127
 5966 0dfa 7F        		.byte	127
 5967 0dfb 06        		.byte	6
 5968 0dfc 08        		.byte	8
 5969 0dfd 30        		.byte	48
 5970 0dfe 7F        		.byte	127
 5971 0dff 3E        		.byte	62
 5972 0e00 41        		.byte	65
 5973 0e01 41        		.byte	65
 5974 0e02 41        		.byte	65
 5975 0e03 3E        		.byte	62
 5976 0e04 7F        		.byte	127
 5977 0e05 09        		.byte	9
 5978 0e06 09        		.byte	9
 5979 0e07 09        		.byte	9
 5980 0e08 06        		.byte	6
 5981 0e09 3E        		.byte	62
 5982 0e0a 41        		.byte	65
 5983 0e0b 41        		.byte	65
 5984 0e0c 61        		.byte	97
 5985 0e0d 7E        		.byte	126
 5986 0e0e 7F        		.byte	127
 5987 0e0f 09        		.byte	9
 5988 0e10 19        		.byte	25
 5989 0e11 29        		.byte	41
 5990 0e12 46        		.byte	70
 5991 0e13 26        		.byte	38
 5992 0e14 49        		.byte	73
 5993 0e15 49        		.byte	73
 5994 0e16 49        		.byte	73
 5995 0e17 32        		.byte	50
 5996 0e18 01        		.byte	1
 5997 0e19 01        		.byte	1
 5998 0e1a 7F        		.byte	127
 5999 0e1b 01        		.byte	1
 6000 0e1c 01        		.byte	1
 6001 0e1d 3F        		.byte	63
 6002 0e1e 40        		.byte	64
 6003 0e1f 40        		.byte	64
 6004 0e20 40        		.byte	64
 6005 0e21 3F        		.byte	63
 6006 0e22 1F        		.byte	31
 6007 0e23 20        		.byte	32
 6008 0e24 40        		.byte	64
 6009 0e25 20        		.byte	32
 6010 0e26 1F        		.byte	31
 6011 0e27 3F        		.byte	63
 6012 0e28 40        		.byte	64
 6013 0e29 30        		.byte	48
 6014 0e2a 40        		.byte	64
 6015 0e2b 3F        		.byte	63
 6016 0e2c 63        		.byte	99
 6017 0e2d 14        		.byte	20
 6018 0e2e 08        		.byte	8
 6019 0e2f 14        		.byte	20
 6020 0e30 63        		.byte	99
 6021 0e31 03        		.byte	3
 6022 0e32 04        		.byte	4
 6023 0e33 78        		.byte	120
 6024 0e34 04        		.byte	4
 6025 0e35 03        		.byte	3
 6026 0e36 61        		.byte	97
 6027 0e37 51        		.byte	81
 6028 0e38 49        		.byte	73
 6029 0e39 45        		.byte	69
 6030 0e3a 43        		.byte	67
 6031 0e3b 00        		.byte	0
 6032 0e3c 00        		.byte	0
 6033 0e3d 7F        		.byte	127
 6034 0e3e 41        		.byte	65
 6035 0e3f 00        		.byte	0
 6036 0e40 00        		.byte	0
 6037 0e41 00        		.byte	0
 6038 0e42 00        		.byte	0
 6039 0e43 00        		.byte	0
 6040 0e44 00        		.byte	0
 6041 0e45 01        		.byte	1
 6042 0e46 06        		.byte	6
 6043 0e47 08        		.byte	8
 6044 0e48 30        		.byte	48
 6045 0e49 40        		.byte	64
 6046 0e4a 04        		.byte	4
 6047 0e4b 02        		.byte	2
 6048 0e4c 01        		.byte	1
 6049 0e4d 02        		.byte	2
 6050 0e4e 04        		.byte	4
 6051 0e4f 80        		.byte	-128
 6052 0e50 80        		.byte	-128
 6053 0e51 80        		.byte	-128
 6054 0e52 80        		.byte	-128
 6055 0e53 80        		.byte	-128
 6056 0e54 01        		.byte	1
 6057 0e55 02        		.byte	2
 6058 0e56 04        		.byte	4
 6059 0e57 00        		.byte	0
 6060 0e58 00        		.byte	0
 6061 0e59 20        		.byte	32
 6062 0e5a 54        		.byte	84
 6063 0e5b 54        		.byte	84
 6064 0e5c 54        		.byte	84
 6065 0e5d 78        		.byte	120
 6066 0e5e 7F        		.byte	127
 6067 0e5f 48        		.byte	72
 6068 0e60 44        		.byte	68
 6069 0e61 44        		.byte	68
 6070 0e62 38        		.byte	56
 6071 0e63 38        		.byte	56
 6072 0e64 44        		.byte	68
 6073 0e65 44        		.byte	68
 6074 0e66 44        		.byte	68
 6075 0e67 28        		.byte	40
 6076 0e68 38        		.byte	56
 6077 0e69 44        		.byte	68
 6078 0e6a 44        		.byte	68
 6079 0e6b 48        		.byte	72
 6080 0e6c 7F        		.byte	127
 6081 0e6d 38        		.byte	56
 6082 0e6e 54        		.byte	84
 6083 0e6f 54        		.byte	84
 6084 0e70 54        		.byte	84
 6085 0e71 18        		.byte	24
 6086 0e72 08        		.byte	8
 6087 0e73 7E        		.byte	126
 6088 0e74 09        		.byte	9
 6089 0e75 01        		.byte	1
 6090 0e76 02        		.byte	2
 6091 0e77 18        		.byte	24
 6092 0e78 A4        		.byte	-92
 6093 0e79 A4        		.byte	-92
 6094 0e7a A4        		.byte	-92
 6095 0e7b 78        		.byte	120
 6096 0e7c 7F        		.byte	127
 6097 0e7d 08        		.byte	8
 6098 0e7e 08        		.byte	8
 6099 0e7f 08        		.byte	8
 6100 0e80 70        		.byte	112
 6101 0e81 00        		.byte	0
 6102 0e82 48        		.byte	72
 6103 0e83 7A        		.byte	122
 6104 0e84 40        		.byte	64
 6105 0e85 00        		.byte	0
 6106 0e86 40        		.byte	64
 6107 0e87 80        		.byte	-128
 6108 0e88 80        		.byte	-128
 6109 0e89 88        		.byte	-120
 6110 0e8a 7A        		.byte	122
 6111 0e8b 7F        		.byte	127
 6112 0e8c 10        		.byte	16
 6113 0e8d 10        		.byte	16
 6114 0e8e 28        		.byte	40
 6115 0e8f 44        		.byte	68
 6116 0e90 00        		.byte	0
 6117 0e91 41        		.byte	65
 6118 0e92 7F        		.byte	127
 6119 0e93 40        		.byte	64
 6120 0e94 00        		.byte	0
 6121 0e95 7C        		.byte	124
 6122 0e96 04        		.byte	4
 6123 0e97 38        		.byte	56
 6124 0e98 04        		.byte	4
 6125 0e99 78        		.byte	120
 6126 0e9a 7C        		.byte	124
 6127 0e9b 04        		.byte	4
 6128 0e9c 04        		.byte	4
 6129 0e9d 04        		.byte	4
 6130 0e9e 78        		.byte	120
 6131 0e9f 38        		.byte	56
 6132 0ea0 44        		.byte	68
 6133 0ea1 44        		.byte	68
 6134 0ea2 44        		.byte	68
 6135 0ea3 38        		.byte	56
 6136 0ea4 FC        		.byte	-4
 6137 0ea5 24        		.byte	36
 6138 0ea6 24        		.byte	36
 6139 0ea7 24        		.byte	36
 6140 0ea8 18        		.byte	24
 6141 0ea9 18        		.byte	24
 6142 0eaa 24        		.byte	36
 6143 0eab 24        		.byte	36
 6144 0eac FC        		.byte	-4
 6145 0ead 80        		.byte	-128
 6146 0eae 7C        		.byte	124
 6147 0eaf 08        		.byte	8
 6148 0eb0 04        		.byte	4
 6149 0eb1 04        		.byte	4
 6150 0eb2 08        		.byte	8
 6151 0eb3 48        		.byte	72
 6152 0eb4 54        		.byte	84
 6153 0eb5 54        		.byte	84
 6154 0eb6 54        		.byte	84
 6155 0eb7 20        		.byte	32
 6156 0eb8 00        		.byte	0
 6157 0eb9 08        		.byte	8
 6158 0eba 3C        		.byte	60
 6159 0ebb 48        		.byte	72
 6160 0ebc 20        		.byte	32
 6161 0ebd 3C        		.byte	60
 6162 0ebe 40        		.byte	64
 6163 0ebf 40        		.byte	64
 6164 0ec0 40        		.byte	64
 6165 0ec1 7C        		.byte	124
 6166 0ec2 0C        		.byte	12
 6167 0ec3 30        		.byte	48
 6168 0ec4 40        		.byte	64
 6169 0ec5 30        		.byte	48
 6170 0ec6 0C        		.byte	12
 6171 0ec7 1C        		.byte	28
 6172 0ec8 60        		.byte	96
 6173 0ec9 18        		.byte	24
 6174 0eca 60        		.byte	96
 6175 0ecb 1C        		.byte	28
 6176 0ecc 44        		.byte	68
 6177 0ecd 28        		.byte	40
 6178 0ece 10        		.byte	16
 6179 0ecf 28        		.byte	40
 6180 0ed0 44        		.byte	68
 6181 0ed1 1C        		.byte	28
 6182 0ed2 A0        		.byte	-96
 6183 0ed3 A0        		.byte	-96
 6184 0ed4 A0        		.byte	-96
 6185 0ed5 7C        		.byte	124
 6186 0ed6 44        		.byte	68
 6187 0ed7 64        		.byte	100
 6188 0ed8 54        		.byte	84
 6189 0ed9 4C        		.byte	76
 6190 0eda 44        		.byte	68
 6191 0edb 00        		.byte	0
 6192 0edc 08        		.byte	8
 6193 0edd 36        		.byte	54
 6194 0ede 41        		.byte	65
 6195 0edf 41        		.byte	65
 6196 0ee0 20        		.byte	32
 6197 0ee1 40        		.byte	64
 6198 0ee2 FF        		.byte	-1
 6199 0ee3 40        		.byte	64
 6200 0ee4 20        		.byte	32
 6201 0ee5 41        		.byte	65
 6202 0ee6 41        		.byte	65
 6203 0ee7 36        		.byte	54
 6204 0ee8 08        		.byte	8
 6205 0ee9 00        		.byte	0
 6206 0eea 10        		.byte	16
 6207 0eeb 08        		.byte	8
 6208 0eec 18        		.byte	24
 6209 0eed 10        		.byte	16
 6210 0eee 08        		.byte	8
 6211               		.text
 6212               	.Letext0:
 6213               		.file 2 "/usr/lib/avr/include/stdint.h"
 6214               		.file 3 "glcdbp.h"
 6215               		.file 4 "lcd.h"
 6216               		.file 5 "ks0108b.h"
 6217               		.file 6 "t6963.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/ccy99nwO.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccy99nwO.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccy99nwO.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccy99nwO.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccy99nwO.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccy99nwO.s:12     .text:0000000000000000 lcdConfig
     /tmp/ccy99nwO.s:2354   .data:0000000000000001 xDim
     /tmp/ccy99nwO.s:2349   .data:0000000000000000 yDim
     /tmp/ccy99nwO.s:57     .text:0000000000000030 lcdClearScreen
     /tmp/ccy99nwO.s:2365   .bss:0000000000000002 textOrigin
     /tmp/ccy99nwO.s:2370   .bss:0000000000000004 cursorPos
     /tmp/ccy99nwO.s:2360   .bss:0000000000000000 textLength
     /tmp/ccy99nwO.s:90     .text:0000000000000058 lcdDrawPixel
     /tmp/ccy99nwO.s:138    .text:000000000000008e lcdDrawLine
     /tmp/ccy99nwO.s:600    .text:0000000000000292 lcdDrawBox
     /tmp/ccy99nwO.s:682    .text:00000000000002de lcdDrawCircle
     /tmp/ccy99nwO.s:907    .text:00000000000003de lcdDrawChar
     /tmp/ccy99nwO.s:5735   .progmem.data:0000000000000d14 characterArray
     /tmp/ccy99nwO.s:1294   .text:000000000000061c lcdEraseBlock
     /tmp/ccy99nwO.s:1404   .text:0000000000000676 lcdDrawLogo
     /tmp/ccy99nwO.s:5712   .progmem.data:0000000000000d00 logoArray
     /tmp/ccy99nwO.s:1622   .text:0000000000000736 lcdGetDataBlock
     /tmp/ccy99nwO.s:1647   .text:0000000000000746 lcdDrawSprite
     /tmp/ccy99nwO.s:5578   .progmem.data:0000000000000c80 maskArray
     /tmp/ccy99nwO.s:5645   .progmem.data:0000000000000cc0 spriteArray
     /tmp/ccy99nwO.s:2143   .text:0000000000000954 lcdDrawBig
     /tmp/ccy99nwO.s:2375   .progmem.data:0000000000000000 bigNumArray

UNDEFINED SYMBOLS
display
ks0108bReset
ks0108bDisplayOn
ks0108bClear
t6963DisplayInit
t6963Clear
ks0108bDrawPixel
t6963DrawPixel
reverse
ks0108bReadBlock
t6963ReadBlock
__do_copy_data
__do_clear_bss
