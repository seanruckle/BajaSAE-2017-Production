
gLCD_ser_bp_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00002930  000029c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002930  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010e  00800102  00800102  000029c6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000029c6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  000029d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003838  00000000  00000000  00002b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001112  00000000  00000000  00006357  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c0c  00000000  00000000  00007469  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000088c  00000000  00000000  00008078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007ce  00000000  00000000  00008904  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000309b  00000000  00000000  000090d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  0000c16d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__ctors_end>
       4:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
       8:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
       c:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      10:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      14:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      18:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      1c:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      20:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      24:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      28:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      2c:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      30:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      34:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      38:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      3c:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      40:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      44:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      48:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__vector_18>
      4c:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      50:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      54:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      58:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      5c:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      60:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      64:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__bad_interrupt>
      68:	42 11       	cpse	r20, r2
      6a:	b6 12       	cpse	r11, r22
      6c:	58 11       	cpse	r21, r8
      6e:	1a 12       	cpse	r1, r26
      70:	b4 12       	cpse	r11, r20
      72:	5d 12       	cpse	r5, r29
      74:	b6 12       	cpse	r11, r22
      76:	75 11       	cpse	r23, r5
      78:	b6 12       	cpse	r11, r22
      7a:	b6 12       	cpse	r11, r22
      7c:	b6 12       	cpse	r11, r22
      7e:	7f 12       	cpse	r7, r31
      80:	fc 11       	cpse	r31, r12
      82:	b6 12       	cpse	r11, r22
      84:	b6 12       	cpse	r11, r22
      86:	3f 12       	cpse	r3, r31
      88:	d8 11       	cpse	r29, r8
      8a:	b6 12       	cpse	r11, r22
      8c:	3a 11       	cpse	r19, r10
      8e:	4d 11       	cpse	r20, r13
      90:	b6 12       	cpse	r11, r22
      92:	b6 12       	cpse	r11, r22
      94:	b6 12       	cpse	r11, r22
      96:	b6 12       	cpse	r11, r22
      98:	a8 11       	cpse	r26, r8
      9a:	be 11       	cpse	r27, r14

0000009c <__trampolines_end>:
	...
      b0:	07 ff       	sbrs	r16, 7
      b2:	ff ff       	.word	0xffff	; ????
      b4:	e0 0f       	add	r30, r16
      b6:	ff ff       	.word	0xffff	; ????
      b8:	ff f0       	brie	.+62     	; 0xf8 <__trampolines_end+0x5c>
      ba:	1f ff       	.word	0xff1f	; ????
      bc:	ff ff       	.word	0xffff	; ????
      be:	f8 1f       	adc	r31, r24
      c0:	ff ff       	.word	0xffff	; ????
      c2:	ff f8       	.word	0xf8ff	; ????
      c4:	1f ff       	.word	0xff1f	; ????
      c6:	ff ff       	.word	0xffff	; ????
      c8:	f8 1f       	adc	r31, r24
      ca:	ff ff       	.word	0xffff	; ????
      cc:	ff f8       	.word	0xf8ff	; ????
      ce:	1f ff       	.word	0xff1f	; ????
      d0:	ff ff       	.word	0xffff	; ????
      d2:	f8 1f       	adc	r31, r24
      d4:	ff ff       	.word	0xffff	; ????
      d6:	ff f8       	.word	0xf8ff	; ????
      d8:	1f e0       	ldi	r17, 0x0F	; 15
      da:	00 07       	cpc	r16, r16
      dc:	f8 1f       	adc	r31, r24
      de:	e0 00       	.word	0x00e0	; ????
      e0:	07 f8       	bld	r0, 7
      e2:	1f e0       	ldi	r17, 0x0F	; 15
      e4:	00 07       	cpc	r16, r16
      e6:	f8 1f       	adc	r31, r24
      e8:	e0 00       	.word	0x00e0	; ????
      ea:	07 f8       	bld	r0, 7
      ec:	1f e0       	ldi	r17, 0x0F	; 15
      ee:	00 07       	cpc	r16, r16
      f0:	f8 1f       	adc	r31, r24
      f2:	e0 00       	.word	0x00e0	; ????
      f4:	07 f8       	bld	r0, 7
      f6:	1f e0       	ldi	r17, 0x0F	; 15
      f8:	00 07       	cpc	r16, r16
      fa:	f8 1f       	adc	r31, r24
      fc:	e0 00       	.word	0x00e0	; ????
      fe:	07 f8       	bld	r0, 7
     100:	1f e0       	ldi	r17, 0x0F	; 15
     102:	00 07       	cpc	r16, r16
     104:	f8 1f       	adc	r31, r24
     106:	e0 00       	.word	0x00e0	; ????
     108:	07 f8       	bld	r0, 7
     10a:	1f e0       	ldi	r17, 0x0F	; 15
     10c:	00 07       	cpc	r16, r16
     10e:	f8 1f       	adc	r31, r24
     110:	e0 00       	.word	0x00e0	; ????
     112:	07 f8       	bld	r0, 7
     114:	1f e0       	ldi	r17, 0x0F	; 15
     116:	00 07       	cpc	r16, r16
     118:	f8 1f       	adc	r31, r24
     11a:	e0 00       	.word	0x00e0	; ????
     11c:	07 f8       	bld	r0, 7
     11e:	1f e0       	ldi	r17, 0x0F	; 15
     120:	00 07       	cpc	r16, r16
     122:	f8 1f       	adc	r31, r24
     124:	e0 00       	.word	0x00e0	; ????
     126:	07 f8       	bld	r0, 7
     128:	1f e0       	ldi	r17, 0x0F	; 15
     12a:	00 07       	cpc	r16, r16
     12c:	f8 1f       	adc	r31, r24
     12e:	e0 00       	.word	0x00e0	; ????
     130:	07 f8       	bld	r0, 7
     132:	1f e0       	ldi	r17, 0x0F	; 15
     134:	00 07       	cpc	r16, r16
     136:	f8 1f       	adc	r31, r24
     138:	e0 00       	.word	0x00e0	; ????
     13a:	07 f8       	bld	r0, 7
     13c:	1f e0       	ldi	r17, 0x0F	; 15
     13e:	00 07       	cpc	r16, r16
     140:	f8 1f       	adc	r31, r24
     142:	e0 00       	.word	0x00e0	; ????
     144:	07 f8       	bld	r0, 7
     146:	1f e0       	ldi	r17, 0x0F	; 15
     148:	00 07       	cpc	r16, r16
     14a:	f8 1f       	adc	r31, r24
     14c:	e0 00       	.word	0x00e0	; ????
     14e:	07 f8       	bld	r0, 7
     150:	1f e0       	ldi	r17, 0x0F	; 15
     152:	00 07       	cpc	r16, r16
     154:	f8 1f       	adc	r31, r24
     156:	e0 00       	.word	0x00e0	; ????
     158:	07 f8       	bld	r0, 7
     15a:	1f e0       	ldi	r17, 0x0F	; 15
     15c:	00 07       	cpc	r16, r16
     15e:	f8 1f       	adc	r31, r24
     160:	e0 00       	.word	0x00e0	; ????
     162:	07 f8       	bld	r0, 7
     164:	1f e0       	ldi	r17, 0x0F	; 15
     166:	00 07       	cpc	r16, r16
     168:	f8 1f       	adc	r31, r24
     16a:	e0 00       	.word	0x00e0	; ????
     16c:	07 f8       	bld	r0, 7
     16e:	1f e0       	ldi	r17, 0x0F	; 15
     170:	00 07       	cpc	r16, r16
     172:	f8 1f       	adc	r31, r24
     174:	e0 00       	.word	0x00e0	; ????
     176:	07 f8       	bld	r0, 7
     178:	1f e0       	ldi	r17, 0x0F	; 15
     17a:	00 07       	cpc	r16, r16
     17c:	f8 1f       	adc	r31, r24
     17e:	e0 00       	.word	0x00e0	; ????
     180:	07 f8       	bld	r0, 7
     182:	1f e0       	ldi	r17, 0x0F	; 15
     184:	00 07       	cpc	r16, r16
     186:	f8 1f       	adc	r31, r24
     188:	e0 00       	.word	0x00e0	; ????
     18a:	07 f8       	bld	r0, 7
     18c:	1f e0       	ldi	r17, 0x0F	; 15
     18e:	00 07       	cpc	r16, r16
     190:	f8 1f       	adc	r31, r24
     192:	e0 00       	.word	0x00e0	; ????
     194:	07 f8       	bld	r0, 7
     196:	1f e0       	ldi	r17, 0x0F	; 15
     198:	00 07       	cpc	r16, r16
     19a:	f8 1f       	adc	r31, r24
     19c:	e0 00       	.word	0x00e0	; ????
     19e:	07 f8       	bld	r0, 7
     1a0:	1f ff       	.word	0xff1f	; ????
     1a2:	ff ff       	.word	0xffff	; ????
     1a4:	f8 1f       	adc	r31, r24
     1a6:	ff ff       	.word	0xffff	; ????
     1a8:	ff f8       	.word	0xf8ff	; ????
     1aa:	1f ff       	.word	0xff1f	; ????
     1ac:	ff ff       	.word	0xffff	; ????
     1ae:	f8 1f       	adc	r31, r24
     1b0:	ff ff       	.word	0xffff	; ????
     1b2:	ff f8       	.word	0xf8ff	; ????
     1b4:	1f ff       	.word	0xff1f	; ????
     1b6:	ff ff       	.word	0xffff	; ????
     1b8:	f8 1f       	adc	r31, r24
     1ba:	ff ff       	.word	0xffff	; ????
     1bc:	ff f8       	.word	0xf8ff	; ????
     1be:	0f ff       	.word	0xff0f	; ????
     1c0:	ff ff       	.word	0xffff	; ????
     1c2:	f0 07       	cpc	r31, r16
     1c4:	ff ff       	.word	0xffff	; ????
     1c6:	ff e0       	ldi	r31, 0x0F	; 15
	...
     1f0:	00 00       	nop
     1f2:	3f 80       	ldd	r3, Y+7	; 0x07
     1f4:	00 00       	nop
     1f6:	00 ff       	sbrs	r16, 0
     1f8:	c0 00       	.word	0x00c0	; ????
     1fa:	00 01       	movw	r0, r0
     1fc:	ff c0       	rjmp	.+510    	; 0x3fc <__trampolines_end+0x360>
     1fe:	00 00       	nop
     200:	07 ff       	sbrs	r16, 7
     202:	c0 00       	.word	0x00c0	; ????
     204:	00 1f       	adc	r16, r16
     206:	ff c0       	rjmp	.+510    	; 0x406 <__trampolines_end+0x36a>
     208:	00 00       	nop
     20a:	3f ff       	.word	0xff3f	; ????
     20c:	c0 00       	.word	0x00c0	; ????
     20e:	00 ff       	sbrs	r16, 0
     210:	ff c0       	rjmp	.+510    	; 0x410 <__trampolines_end+0x374>
     212:	00 01       	movw	r0, r0
     214:	ff ff       	.word	0xffff	; ????
     216:	c0 00       	.word	0x00c0	; ????
     218:	01 ff       	sbrs	r16, 1
     21a:	ff c0       	rjmp	.+510    	; 0x41a <__trampolines_end+0x37e>
     21c:	00 01       	movw	r0, r0
     21e:	ff ff       	.word	0xffff	; ????
     220:	c0 00       	.word	0x00c0	; ????
     222:	01 ff       	sbrs	r16, 1
     224:	ff c0       	rjmp	.+510    	; 0x424 <__trampolines_end+0x388>
     226:	00 01       	movw	r0, r0
     228:	ff ff       	.word	0xffff	; ????
     22a:	c0 00       	.word	0x00c0	; ????
     22c:	01 ff       	sbrs	r16, 1
     22e:	ff c0       	rjmp	.+510    	; 0x42e <__trampolines_end+0x392>
     230:	00 01       	movw	r0, r0
     232:	ff ff       	.word	0xffff	; ????
     234:	c0 00       	.word	0x00c0	; ????
     236:	00 00       	nop
     238:	ff c0       	rjmp	.+510    	; 0x438 <__trampolines_end+0x39c>
     23a:	00 00       	nop
     23c:	00 ff       	sbrs	r16, 0
     23e:	c0 00       	.word	0x00c0	; ????
     240:	00 00       	nop
     242:	ff c0       	rjmp	.+510    	; 0x442 <__trampolines_end+0x3a6>
     244:	00 00       	nop
     246:	00 ff       	sbrs	r16, 0
     248:	c0 00       	.word	0x00c0	; ????
     24a:	00 00       	nop
     24c:	ff c0       	rjmp	.+510    	; 0x44c <__trampolines_end+0x3b0>
     24e:	00 00       	nop
     250:	00 ff       	sbrs	r16, 0
     252:	c0 00       	.word	0x00c0	; ????
     254:	00 00       	nop
     256:	ff c0       	rjmp	.+510    	; 0x456 <__trampolines_end+0x3ba>
     258:	00 00       	nop
     25a:	00 ff       	sbrs	r16, 0
     25c:	c0 00       	.word	0x00c0	; ????
     25e:	00 00       	nop
     260:	ff c0       	rjmp	.+510    	; 0x460 <__trampolines_end+0x3c4>
     262:	00 00       	nop
     264:	00 ff       	sbrs	r16, 0
     266:	c0 00       	.word	0x00c0	; ????
     268:	00 00       	nop
     26a:	ff c0       	rjmp	.+510    	; 0x46a <__trampolines_end+0x3ce>
     26c:	00 00       	nop
     26e:	00 ff       	sbrs	r16, 0
     270:	c0 00       	.word	0x00c0	; ????
     272:	00 00       	nop
     274:	ff c0       	rjmp	.+510    	; 0x474 <__trampolines_end+0x3d8>
     276:	00 00       	nop
     278:	00 ff       	sbrs	r16, 0
     27a:	c0 00       	.word	0x00c0	; ????
     27c:	00 00       	nop
     27e:	ff c0       	rjmp	.+510    	; 0x47e <__trampolines_end+0x3e2>
     280:	00 00       	nop
     282:	00 ff       	sbrs	r16, 0
     284:	c0 00       	.word	0x00c0	; ????
     286:	00 00       	nop
     288:	ff c0       	rjmp	.+510    	; 0x488 <__trampolines_end+0x3ec>
     28a:	00 00       	nop
     28c:	00 ff       	sbrs	r16, 0
     28e:	c0 00       	.word	0x00c0	; ????
     290:	00 00       	nop
     292:	ff c0       	rjmp	.+510    	; 0x492 <__trampolines_end+0x3f6>
     294:	00 00       	nop
     296:	00 ff       	sbrs	r16, 0
     298:	c0 00       	.word	0x00c0	; ????
     29a:	00 00       	nop
     29c:	ff c0       	rjmp	.+510    	; 0x49c <__trampolines_end+0x400>
     29e:	00 00       	nop
     2a0:	00 ff       	sbrs	r16, 0
     2a2:	c0 00       	.word	0x00c0	; ????
     2a4:	00 00       	nop
     2a6:	ff c0       	rjmp	.+510    	; 0x4a6 <__trampolines_end+0x40a>
     2a8:	00 00       	nop
     2aa:	00 ff       	sbrs	r16, 0
     2ac:	c0 00       	.word	0x00c0	; ????
     2ae:	00 00       	nop
     2b0:	ff c0       	rjmp	.+510    	; 0x4b0 <__trampolines_end+0x414>
     2b2:	00 00       	nop
     2b4:	00 ff       	sbrs	r16, 0
     2b6:	c0 00       	.word	0x00c0	; ????
     2b8:	00 00       	nop
     2ba:	ff c0       	rjmp	.+510    	; 0x4ba <__trampolines_end+0x41e>
     2bc:	00 00       	nop
     2be:	00 ff       	sbrs	r16, 0
     2c0:	c0 00       	.word	0x00c0	; ????
     2c2:	00 00       	nop
     2c4:	ff c0       	rjmp	.+510    	; 0x4c4 <__trampolines_end+0x428>
     2c6:	00 00       	nop
     2c8:	00 ff       	sbrs	r16, 0
     2ca:	c0 00       	.word	0x00c0	; ????
     2cc:	00 00       	nop
     2ce:	ff c0       	rjmp	.+510    	; 0x4ce <__trampolines_end+0x432>
     2d0:	00 00       	nop
     2d2:	00 ff       	sbrs	r16, 0
     2d4:	c0 00       	.word	0x00c0	; ????
     2d6:	00 00       	nop
     2d8:	ff c0       	rjmp	.+510    	; 0x4d8 <__trampolines_end+0x43c>
     2da:	00 00       	nop
     2dc:	00 ff       	sbrs	r16, 0
     2de:	c0 00       	.word	0x00c0	; ????
     2e0:	00 00       	nop
     2e2:	ff c0       	rjmp	.+510    	; 0x4e2 <__trampolines_end+0x446>
     2e4:	00 00       	nop
     2e6:	00 ff       	sbrs	r16, 0
     2e8:	c0 00       	.word	0x00c0	; ????
     2ea:	00 00       	nop
     2ec:	ff c0       	rjmp	.+510    	; 0x4ec <__trampolines_end+0x450>
     2ee:	00 00       	nop
     2f0:	00 ff       	sbrs	r16, 0
     2f2:	c0 00       	.word	0x00c0	; ????
     2f4:	00 00       	nop
     2f6:	ff c0       	rjmp	.+510    	; 0x4f6 <__trampolines_end+0x45a>
     2f8:	00 00       	nop
     2fa:	00 ff       	sbrs	r16, 0
     2fc:	c0 00       	.word	0x00c0	; ????
     2fe:	00 00       	nop
     300:	ff c0       	rjmp	.+510    	; 0x500 <__stack+0x1>
     302:	00 00       	nop
     304:	00 ff       	sbrs	r16, 0
     306:	c0 00       	.word	0x00c0	; ????
	...
     330:	03 ff       	sbrs	r16, 3
     332:	ff ff       	.word	0xffff	; ????
     334:	e0 07       	cpc	r30, r16
     336:	ff ff       	.word	0xffff	; ????
     338:	ff f0       	brie	.+62     	; 0x378 <__trampolines_end+0x2dc>
     33a:	0f ff       	.word	0xff0f	; ????
     33c:	ff ff       	.word	0xffff	; ????
     33e:	f8 1f       	adc	r31, r24
     340:	ff ff       	.word	0xffff	; ????
     342:	ff f8       	.word	0xf8ff	; ????
     344:	1f ff       	.word	0xff1f	; ????
     346:	ff ff       	.word	0xffff	; ????
     348:	f8 1f       	adc	r31, r24
     34a:	ff ff       	.word	0xffff	; ????
     34c:	ff f8       	.word	0xf8ff	; ????
     34e:	1f ff       	.word	0xff1f	; ????
     350:	ff ff       	.word	0xffff	; ????
     352:	f8 1f       	adc	r31, r24
     354:	ff ff       	.word	0xffff	; ????
     356:	ff f8       	.word	0xf8ff	; ????
     358:	1f ff       	.word	0xff1f	; ????
     35a:	ff ff       	.word	0xffff	; ????
     35c:	f8 00       	.word	0x00f8	; ????
     35e:	00 00       	nop
     360:	1f f8       	.word	0xf81f	; ????
     362:	00 00       	nop
     364:	00 0f       	add	r16, r16
     366:	f8 00       	.word	0x00f8	; ????
     368:	00 00       	nop
     36a:	0f f8       	.word	0xf80f	; ????
     36c:	00 00       	nop
     36e:	00 0f       	add	r16, r16
     370:	f8 00       	.word	0x00f8	; ????
     372:	00 00       	nop
     374:	0f f8       	.word	0xf80f	; ????
     376:	00 00       	nop
     378:	00 0f       	add	r16, r16
     37a:	f8 00       	.word	0x00f8	; ????
     37c:	00 00       	nop
     37e:	0f f8       	.word	0xf80f	; ????
     380:	00 00       	nop
     382:	00 0f       	add	r16, r16
     384:	f8 00       	.word	0x00f8	; ????
     386:	00 00       	nop
     388:	0f f8       	.word	0xf80f	; ????
     38a:	00 00       	nop
     38c:	00 0f       	add	r16, r16
     38e:	f8 00       	.word	0x00f8	; ????
     390:	00 00       	nop
     392:	0f f8       	.word	0xf80f	; ????
     394:	00 00       	nop
     396:	00 0f       	add	r16, r16
     398:	f8 00       	.word	0x00f8	; ????
     39a:	00 00       	nop
     39c:	0f f8       	.word	0xf80f	; ????
     39e:	00 00       	nop
     3a0:	00 0f       	add	r16, r16
     3a2:	f8 00       	.word	0x00f8	; ????
     3a4:	00 00       	nop
     3a6:	1f f8       	.word	0xf81f	; ????
     3a8:	07 ff       	sbrs	r16, 7
     3aa:	ff ff       	.word	0xffff	; ????
     3ac:	f8 0f       	add	r31, r24
     3ae:	ff ff       	.word	0xffff	; ????
     3b0:	ff f8       	.word	0xf8ff	; ????
     3b2:	1f ff       	.word	0xff1f	; ????
     3b4:	ff ff       	.word	0xffff	; ????
     3b6:	f8 1f       	adc	r31, r24
     3b8:	ff ff       	.word	0xffff	; ????
     3ba:	ff f8       	.word	0xf8ff	; ????
     3bc:	1f ff       	.word	0xff1f	; ????
     3be:	ff ff       	.word	0xffff	; ????
     3c0:	f8 1f       	adc	r31, r24
     3c2:	ff ff       	.word	0xffff	; ????
     3c4:	ff f8       	.word	0xf8ff	; ????
     3c6:	1f ff       	.word	0xff1f	; ????
     3c8:	ff ff       	.word	0xffff	; ????
     3ca:	f8 1f       	adc	r31, r24
     3cc:	ff ff       	.word	0xffff	; ????
     3ce:	ff f0       	brie	.+62     	; 0x40e <__trampolines_end+0x372>
     3d0:	1f ff       	.word	0xff1f	; ????
     3d2:	ff ff       	.word	0xffff	; ????
     3d4:	e0 1f       	adc	r30, r16
     3d6:	f0 00       	.word	0x00f0	; ????
     3d8:	00 00       	nop
     3da:	1f e0       	ldi	r17, 0x0F	; 15
     3dc:	00 00       	nop
     3de:	00 1f       	adc	r16, r16
     3e0:	e0 00       	.word	0x00e0	; ????
     3e2:	00 00       	nop
     3e4:	1f e0       	ldi	r17, 0x0F	; 15
     3e6:	00 00       	nop
     3e8:	00 1f       	adc	r16, r16
     3ea:	e0 00       	.word	0x00e0	; ????
     3ec:	00 00       	nop
     3ee:	1f e0       	ldi	r17, 0x0F	; 15
     3f0:	00 00       	nop
     3f2:	00 1f       	adc	r16, r16
     3f4:	e0 00       	.word	0x00e0	; ????
     3f6:	00 00       	nop
     3f8:	1f e0       	ldi	r17, 0x0F	; 15
     3fa:	00 00       	nop
     3fc:	00 1f       	adc	r16, r16
     3fe:	e0 00       	.word	0x00e0	; ????
     400:	00 00       	nop
     402:	1f e0       	ldi	r17, 0x0F	; 15
     404:	00 00       	nop
     406:	00 1f       	adc	r16, r16
     408:	e0 00       	.word	0x00e0	; ????
     40a:	00 00       	nop
     40c:	1f e0       	ldi	r17, 0x0F	; 15
     40e:	00 00       	nop
     410:	00 1f       	adc	r16, r16
     412:	e0 00       	.word	0x00e0	; ????
     414:	00 00       	nop
     416:	1f f0       	brie	.+6      	; 0x41e <__trampolines_end+0x382>
     418:	00 00       	nop
     41a:	00 1f       	adc	r16, r16
     41c:	ff ff       	.word	0xffff	; ????
     41e:	ff f8       	.word	0xf8ff	; ????
     420:	1f ff       	.word	0xff1f	; ????
     422:	ff ff       	.word	0xffff	; ????
     424:	f8 1f       	adc	r31, r24
     426:	ff ff       	.word	0xffff	; ????
     428:	ff f8       	.word	0xf8ff	; ????
     42a:	1f ff       	.word	0xff1f	; ????
     42c:	ff ff       	.word	0xffff	; ????
     42e:	f8 1f       	adc	r31, r24
     430:	ff ff       	.word	0xffff	; ????
     432:	ff f8       	.word	0xf8ff	; ????
     434:	1f ff       	.word	0xff1f	; ????
     436:	ff ff       	.word	0xffff	; ????
     438:	f8 1f       	adc	r31, r24
     43a:	ff ff       	.word	0xffff	; ????
     43c:	ff f8       	.word	0xf8ff	; ????
     43e:	1f ff       	.word	0xff1f	; ????
     440:	ff ff       	.word	0xffff	; ????
     442:	f8 1f       	adc	r31, r24
     444:	ff ff       	.word	0xffff	; ????
     446:	ff f8       	.word	0xf8ff	; ????
	...
     470:	07 ff       	sbrs	r16, 7
     472:	ff ff       	.word	0xffff	; ????
     474:	e0 0f       	add	r30, r16
     476:	ff ff       	.word	0xffff	; ????
     478:	ff f0       	brie	.+62     	; 0x4b8 <__trampolines_end+0x41c>
     47a:	1f ff       	.word	0xff1f	; ????
     47c:	ff ff       	.word	0xffff	; ????
     47e:	f8 1f       	adc	r31, r24
     480:	ff ff       	.word	0xffff	; ????
     482:	ff f8       	.word	0xf8ff	; ????
     484:	1f ff       	.word	0xff1f	; ????
     486:	ff ff       	.word	0xffff	; ????
     488:	f8 1f       	adc	r31, r24
     48a:	ff ff       	.word	0xffff	; ????
     48c:	ff f8       	.word	0xf8ff	; ????
     48e:	1f ff       	.word	0xff1f	; ????
     490:	ff ff       	.word	0xffff	; ????
     492:	f8 1f       	adc	r31, r24
     494:	ff ff       	.word	0xffff	; ????
     496:	ff f8       	.word	0xf8ff	; ????
     498:	0f ff       	.word	0xff0f	; ????
     49a:	ff ff       	.word	0xffff	; ????
     49c:	f8 00       	.word	0x00f8	; ????
     49e:	00 00       	nop
     4a0:	0f f8       	.word	0xf80f	; ????
     4a2:	00 00       	nop
     4a4:	00 0f       	add	r16, r16
     4a6:	f8 00       	.word	0x00f8	; ????
     4a8:	00 00       	nop
     4aa:	0f f8       	.word	0xf80f	; ????
     4ac:	00 00       	nop
     4ae:	00 0f       	add	r16, r16
     4b0:	f8 00       	.word	0x00f8	; ????
     4b2:	00 00       	nop
     4b4:	0f f8       	.word	0xf80f	; ????
     4b6:	00 00       	nop
     4b8:	00 0f       	add	r16, r16
     4ba:	f8 00       	.word	0x00f8	; ????
     4bc:	00 00       	nop
     4be:	0f f8       	.word	0xf80f	; ????
     4c0:	00 00       	nop
     4c2:	00 0f       	add	r16, r16
     4c4:	f8 00       	.word	0x00f8	; ????
     4c6:	00 00       	nop
     4c8:	0f f8       	.word	0xf80f	; ????
     4ca:	00 00       	nop
     4cc:	00 0f       	add	r16, r16
     4ce:	f8 00       	.word	0x00f8	; ????
     4d0:	00 00       	nop
     4d2:	0f f8       	.word	0xf80f	; ????
     4d4:	00 00       	nop
     4d6:	00 0f       	add	r16, r16
     4d8:	f8 00       	.word	0x00f8	; ????
     4da:	00 00       	nop
     4dc:	0f f8       	.word	0xf80f	; ????
     4de:	00 00       	nop
     4e0:	00 0f       	add	r16, r16
     4e2:	f8 00       	.word	0x00f8	; ????
     4e4:	3f ff       	.word	0xff3f	; ????
     4e6:	ff f8       	.word	0xf8ff	; ????
     4e8:	00 3f       	cpi	r16, 0xF0	; 240
     4ea:	ff ff       	.word	0xffff	; ????
     4ec:	f8 00       	.word	0x00f8	; ????
     4ee:	3f ff       	.word	0xff3f	; ????
     4f0:	ff f8       	.word	0xf8ff	; ????
     4f2:	00 3f       	cpi	r16, 0xF0	; 240
     4f4:	ff ff       	.word	0xffff	; ????
     4f6:	f8 00       	.word	0x00f8	; ????
     4f8:	3f ff       	.word	0xff3f	; ????
     4fa:	ff f8       	.word	0xf8ff	; ????
     4fc:	00 3f       	cpi	r16, 0xF0	; 240
     4fe:	ff ff       	.word	0xffff	; ????
     500:	f8 00       	.word	0x00f8	; ????
     502:	3f ff       	.word	0xff3f	; ????
     504:	ff f8       	.word	0xf8ff	; ????
     506:	00 3f       	cpi	r16, 0xF0	; 240
     508:	ff ff       	.word	0xffff	; ????
     50a:	f8 00       	.word	0x00f8	; ????
     50c:	3f ff       	.word	0xff3f	; ????
     50e:	ff f8       	.word	0xf8ff	; ????
     510:	00 00       	nop
     512:	00 0f       	add	r16, r16
     514:	f8 00       	.word	0x00f8	; ????
     516:	00 00       	nop
     518:	0f f8       	.word	0xf80f	; ????
     51a:	00 00       	nop
     51c:	00 0f       	add	r16, r16
     51e:	f8 00       	.word	0x00f8	; ????
     520:	00 00       	nop
     522:	0f f8       	.word	0xf80f	; ????
     524:	00 00       	nop
     526:	00 0f       	add	r16, r16
     528:	f8 00       	.word	0x00f8	; ????
     52a:	00 00       	nop
     52c:	0f f8       	.word	0xf80f	; ????
     52e:	00 00       	nop
     530:	00 0f       	add	r16, r16
     532:	f8 00       	.word	0x00f8	; ????
     534:	00 00       	nop
     536:	0f f8       	.word	0xf80f	; ????
     538:	00 00       	nop
     53a:	00 0f       	add	r16, r16
     53c:	f8 00       	.word	0x00f8	; ????
     53e:	00 00       	nop
     540:	0f f8       	.word	0xf80f	; ????
     542:	00 00       	nop
     544:	00 0f       	add	r16, r16
     546:	f8 00       	.word	0x00f8	; ????
     548:	00 00       	nop
     54a:	0f f8       	.word	0xf80f	; ????
     54c:	00 00       	nop
     54e:	00 0f       	add	r16, r16
     550:	f8 00       	.word	0x00f8	; ????
     552:	00 00       	nop
     554:	0f f8       	.word	0xf80f	; ????
     556:	00 00       	nop
     558:	00 0f       	add	r16, r16
     55a:	f8 0f       	add	r31, r24
     55c:	ff ff       	.word	0xffff	; ????
     55e:	ff f8       	.word	0xf8ff	; ????
     560:	1f ff       	.word	0xff1f	; ????
     562:	ff ff       	.word	0xffff	; ????
     564:	f8 1f       	adc	r31, r24
     566:	ff ff       	.word	0xffff	; ????
     568:	ff f8       	.word	0xf8ff	; ????
     56a:	1f ff       	.word	0xff1f	; ????
     56c:	ff ff       	.word	0xffff	; ????
     56e:	f8 1f       	adc	r31, r24
     570:	ff ff       	.word	0xffff	; ????
     572:	ff f8       	.word	0xf8ff	; ????
     574:	1f ff       	.word	0xff1f	; ????
     576:	ff ff       	.word	0xffff	; ????
     578:	f8 1f       	adc	r31, r24
     57a:	ff ff       	.word	0xffff	; ????
     57c:	ff f8       	.word	0xf8ff	; ????
     57e:	1f ff       	.word	0xff1f	; ????
     580:	ff ff       	.word	0xffff	; ????
     582:	f8 0f       	add	r31, r24
     584:	ff ff       	.word	0xffff	; ????
     586:	ff f0       	brie	.+62     	; 0x5c6 <__stack+0xc7>
	...
     5b0:	07 f0       	brie	.+0      	; 0x5b2 <__stack+0xb3>
     5b2:	00 0f       	add	r16, r16
     5b4:	e0 0f       	add	r30, r16
     5b6:	f0 00       	.word	0x00f0	; ????
     5b8:	0f f0       	brie	.+2      	; 0x5bc <__stack+0xbd>
     5ba:	1f f0       	brie	.+6      	; 0x5c2 <__stack+0xc3>
     5bc:	00 0f       	add	r16, r16
     5be:	f8 1f       	adc	r31, r24
     5c0:	f0 00       	.word	0x00f0	; ????
     5c2:	0f f8       	.word	0xf80f	; ????
     5c4:	1f f0       	brie	.+6      	; 0x5cc <__stack+0xcd>
     5c6:	00 0f       	add	r16, r16
     5c8:	f8 1f       	adc	r31, r24
     5ca:	f0 00       	.word	0x00f0	; ????
     5cc:	0f f8       	.word	0xf80f	; ????
     5ce:	1f f0       	brie	.+6      	; 0x5d6 <__stack+0xd7>
     5d0:	00 0f       	add	r16, r16
     5d2:	f8 1f       	adc	r31, r24
     5d4:	f0 00       	.word	0x00f0	; ????
     5d6:	0f f8       	.word	0xf80f	; ????
     5d8:	1f f0       	brie	.+6      	; 0x5e0 <__stack+0xe1>
     5da:	00 0f       	add	r16, r16
     5dc:	f8 1f       	adc	r31, r24
     5de:	f0 00       	.word	0x00f0	; ????
     5e0:	0f f8       	.word	0xf80f	; ????
     5e2:	1f f0       	brie	.+6      	; 0x5ea <__stack+0xeb>
     5e4:	00 0f       	add	r16, r16
     5e6:	f8 1f       	adc	r31, r24
     5e8:	f0 00       	.word	0x00f0	; ????
     5ea:	0f f8       	.word	0xf80f	; ????
     5ec:	1f f0       	brie	.+6      	; 0x5f4 <__stack+0xf5>
     5ee:	00 0f       	add	r16, r16
     5f0:	f8 1f       	adc	r31, r24
     5f2:	f0 00       	.word	0x00f0	; ????
     5f4:	0f f8       	.word	0xf80f	; ????
     5f6:	1f f0       	brie	.+6      	; 0x5fe <__stack+0xff>
     5f8:	00 0f       	add	r16, r16
     5fa:	f8 1f       	adc	r31, r24
     5fc:	f0 00       	.word	0x00f0	; ????
     5fe:	0f f8       	.word	0xf80f	; ????
     600:	1f f0       	brie	.+6      	; 0x608 <__stack+0x109>
     602:	00 0f       	add	r16, r16
     604:	f8 1f       	adc	r31, r24
     606:	f0 00       	.word	0x00f0	; ????
     608:	0f f8       	.word	0xf80f	; ????
     60a:	1f f0       	brie	.+6      	; 0x612 <__stack+0x113>
     60c:	00 0f       	add	r16, r16
     60e:	f8 1f       	adc	r31, r24
     610:	f0 00       	.word	0x00f0	; ????
     612:	0f f8       	.word	0xf80f	; ????
     614:	1f f0       	brie	.+6      	; 0x61c <__stack+0x11d>
     616:	00 0f       	add	r16, r16
     618:	f8 1f       	adc	r31, r24
     61a:	f0 00       	.word	0x00f0	; ????
     61c:	0f f8       	.word	0xf80f	; ????
     61e:	1f f0       	brie	.+6      	; 0x626 <__stack+0x127>
     620:	00 0f       	add	r16, r16
     622:	f8 1f       	adc	r31, r24
     624:	ff ff       	.word	0xffff	; ????
     626:	ff f8       	.word	0xf8ff	; ????
     628:	1f ff       	.word	0xff1f	; ????
     62a:	ff ff       	.word	0xffff	; ????
     62c:	f8 1f       	adc	r31, r24
     62e:	ff ff       	.word	0xffff	; ????
     630:	ff f8       	.word	0xf8ff	; ????
     632:	1f ff       	.word	0xff1f	; ????
     634:	ff ff       	.word	0xffff	; ????
     636:	f8 1f       	adc	r31, r24
     638:	ff ff       	.word	0xffff	; ????
     63a:	ff f8       	.word	0xf8ff	; ????
     63c:	1f ff       	.word	0xff1f	; ????
     63e:	ff ff       	.word	0xffff	; ????
     640:	f8 1f       	adc	r31, r24
     642:	ff ff       	.word	0xffff	; ????
     644:	ff f8       	.word	0xf8ff	; ????
     646:	1f ff       	.word	0xff1f	; ????
     648:	ff ff       	.word	0xffff	; ????
     64a:	f8 1f       	adc	r31, r24
     64c:	ff ff       	.word	0xffff	; ????
     64e:	ff f8       	.word	0xf8ff	; ????
     650:	00 00       	nop
     652:	00 0f       	add	r16, r16
     654:	f8 00       	.word	0x00f8	; ????
     656:	00 00       	nop
     658:	0f f8       	.word	0xf80f	; ????
     65a:	00 00       	nop
     65c:	00 0f       	add	r16, r16
     65e:	f8 00       	.word	0x00f8	; ????
     660:	00 00       	nop
     662:	0f f8       	.word	0xf80f	; ????
     664:	00 00       	nop
     666:	00 0f       	add	r16, r16
     668:	f8 00       	.word	0x00f8	; ????
     66a:	00 00       	nop
     66c:	0f f8       	.word	0xf80f	; ????
     66e:	00 00       	nop
     670:	00 0f       	add	r16, r16
     672:	f8 00       	.word	0x00f8	; ????
     674:	00 00       	nop
     676:	0f f8       	.word	0xf80f	; ????
     678:	00 00       	nop
     67a:	00 0f       	add	r16, r16
     67c:	f8 00       	.word	0x00f8	; ????
     67e:	00 00       	nop
     680:	0f f8       	.word	0xf80f	; ????
     682:	00 00       	nop
     684:	00 0f       	add	r16, r16
     686:	f8 00       	.word	0x00f8	; ????
     688:	00 00       	nop
     68a:	0f f8       	.word	0xf80f	; ????
     68c:	00 00       	nop
     68e:	00 0f       	add	r16, r16
     690:	f8 00       	.word	0x00f8	; ????
     692:	00 00       	nop
     694:	0f f8       	.word	0xf80f	; ????
     696:	00 00       	nop
     698:	00 0f       	add	r16, r16
     69a:	f8 00       	.word	0x00f8	; ????
     69c:	00 00       	nop
     69e:	0f f8       	.word	0xf80f	; ????
     6a0:	00 00       	nop
     6a2:	00 0f       	add	r16, r16
     6a4:	f8 00       	.word	0x00f8	; ????
     6a6:	00 00       	nop
     6a8:	0f f8       	.word	0xf80f	; ????
     6aa:	00 00       	nop
     6ac:	00 0f       	add	r16, r16
     6ae:	f8 00       	.word	0x00f8	; ????
     6b0:	00 00       	nop
     6b2:	0f f8       	.word	0xf80f	; ????
     6b4:	00 00       	nop
     6b6:	00 0f       	add	r16, r16
     6b8:	f8 00       	.word	0x00f8	; ????
     6ba:	00 00       	nop
     6bc:	0f f8       	.word	0xf80f	; ????
     6be:	00 00       	nop
     6c0:	00 0f       	add	r16, r16
     6c2:	f8 00       	.word	0x00f8	; ????
     6c4:	00 00       	nop
     6c6:	0f f0       	brie	.+2      	; 0x6ca <__stack+0x1cb>
	...
     6f0:	03 ff       	sbrs	r16, 3
     6f2:	ff ff       	.word	0xffff	; ????
     6f4:	c0 07       	cpc	r28, r16
     6f6:	ff ff       	.word	0xffff	; ????
     6f8:	ff e0       	ldi	r31, 0x0F	; 15
     6fa:	0f ff       	.word	0xff0f	; ????
     6fc:	ff ff       	.word	0xffff	; ????
     6fe:	f0 1f       	adc	r31, r16
     700:	ff ff       	.word	0xffff	; ????
     702:	ff f8       	.word	0xf8ff	; ????
     704:	1f ff       	.word	0xff1f	; ????
     706:	ff ff       	.word	0xffff	; ????
     708:	f8 1f       	adc	r31, r24
     70a:	ff ff       	.word	0xffff	; ????
     70c:	ff f8       	.word	0xf8ff	; ????
     70e:	1f ff       	.word	0xff1f	; ????
     710:	ff ff       	.word	0xffff	; ????
     712:	f8 1f       	adc	r31, r24
     714:	ff ff       	.word	0xffff	; ????
     716:	ff f8       	.word	0xf8ff	; ????
     718:	1f ff       	.word	0xff1f	; ????
     71a:	ff ff       	.word	0xffff	; ????
     71c:	f8 1f       	adc	r31, r24
     71e:	f8 00       	.word	0x00f8	; ????
     720:	00 00       	nop
     722:	1f f0       	brie	.+6      	; 0x72a <__stack+0x22b>
     724:	00 00       	nop
     726:	00 1f       	adc	r16, r16
     728:	f0 00       	.word	0x00f0	; ????
     72a:	00 00       	nop
     72c:	1f f0       	brie	.+6      	; 0x734 <__stack+0x235>
     72e:	00 00       	nop
     730:	00 1f       	adc	r16, r16
     732:	f0 00       	.word	0x00f0	; ????
     734:	00 00       	nop
     736:	1f f0       	brie	.+6      	; 0x73e <__stack+0x23f>
     738:	00 00       	nop
     73a:	00 1f       	adc	r16, r16
     73c:	f0 00       	.word	0x00f0	; ????
     73e:	00 00       	nop
     740:	1f f0       	brie	.+6      	; 0x748 <__stack+0x249>
     742:	00 00       	nop
     744:	00 1f       	adc	r16, r16
     746:	f0 00       	.word	0x00f0	; ????
     748:	00 00       	nop
     74a:	1f f0       	brie	.+6      	; 0x752 <__stack+0x253>
     74c:	00 00       	nop
     74e:	00 1f       	adc	r16, r16
     750:	f0 00       	.word	0x00f0	; ????
     752:	00 00       	nop
     754:	1f f0       	brie	.+6      	; 0x75c <__stack+0x25d>
     756:	00 00       	nop
     758:	00 1f       	adc	r16, r16
     75a:	f0 00       	.word	0x00f0	; ????
     75c:	00 00       	nop
     75e:	1f f8       	.word	0xf81f	; ????
     760:	00 00       	nop
     762:	00 1f       	adc	r16, r16
     764:	ff ff       	.word	0xffff	; ????
     766:	ff c0       	rjmp	.+510    	; 0x966 <__stack+0x467>
     768:	1f ff       	.word	0xff1f	; ????
     76a:	ff ff       	.word	0xffff	; ????
     76c:	e0 1f       	adc	r30, r16
     76e:	ff ff       	.word	0xffff	; ????
     770:	ff f0       	brie	.+62     	; 0x7b0 <__stack+0x2b1>
     772:	1f ff       	.word	0xff1f	; ????
     774:	ff ff       	.word	0xffff	; ????
     776:	f8 1f       	adc	r31, r24
     778:	ff ff       	.word	0xffff	; ????
     77a:	ff f8       	.word	0xf8ff	; ????
     77c:	1f ff       	.word	0xff1f	; ????
     77e:	ff ff       	.word	0xffff	; ????
     780:	f8 1f       	adc	r31, r24
     782:	ff ff       	.word	0xffff	; ????
     784:	ff f8       	.word	0xf8ff	; ????
     786:	1f ff       	.word	0xff1f	; ????
     788:	ff ff       	.word	0xffff	; ????
     78a:	f8 1f       	adc	r31, r24
     78c:	ff ff       	.word	0xffff	; ????
     78e:	ff f8       	.word	0xf8ff	; ????
     790:	00 00       	nop
     792:	00 1f       	adc	r16, r16
     794:	f8 00       	.word	0x00f8	; ????
     796:	00 00       	nop
     798:	0f f8       	.word	0xf80f	; ????
     79a:	00 00       	nop
     79c:	00 0f       	add	r16, r16
     79e:	f8 00       	.word	0x00f8	; ????
     7a0:	00 00       	nop
     7a2:	0f f8       	.word	0xf80f	; ????
     7a4:	00 00       	nop
     7a6:	00 0f       	add	r16, r16
     7a8:	f8 00       	.word	0x00f8	; ????
     7aa:	00 00       	nop
     7ac:	0f f8       	.word	0xf80f	; ????
     7ae:	00 00       	nop
     7b0:	00 0f       	add	r16, r16
     7b2:	f8 00       	.word	0x00f8	; ????
     7b4:	00 00       	nop
     7b6:	0f f8       	.word	0xf80f	; ????
     7b8:	00 00       	nop
     7ba:	00 0f       	add	r16, r16
     7bc:	f8 00       	.word	0x00f8	; ????
     7be:	00 00       	nop
     7c0:	0f f8       	.word	0xf80f	; ????
     7c2:	00 00       	nop
     7c4:	00 0f       	add	r16, r16
     7c6:	f8 00       	.word	0x00f8	; ????
     7c8:	00 00       	nop
     7ca:	0f f8       	.word	0xf80f	; ????
     7cc:	00 00       	nop
     7ce:	00 0f       	add	r16, r16
     7d0:	f8 00       	.word	0x00f8	; ????
     7d2:	00 00       	nop
     7d4:	0f f8       	.word	0xf80f	; ????
     7d6:	00 00       	nop
     7d8:	00 1f       	adc	r16, r16
     7da:	f8 0f       	add	r31, r24
     7dc:	ff ff       	.word	0xffff	; ????
     7de:	ff f8       	.word	0xf8ff	; ????
     7e0:	1f ff       	.word	0xff1f	; ????
     7e2:	ff ff       	.word	0xffff	; ????
     7e4:	f8 1f       	adc	r31, r24
     7e6:	ff ff       	.word	0xffff	; ????
     7e8:	ff f8       	.word	0xf8ff	; ????
     7ea:	1f ff       	.word	0xff1f	; ????
     7ec:	ff ff       	.word	0xffff	; ????
     7ee:	f8 1f       	adc	r31, r24
     7f0:	ff ff       	.word	0xffff	; ????
     7f2:	ff f8       	.word	0xf8ff	; ????
     7f4:	1f ff       	.word	0xff1f	; ????
     7f6:	ff ff       	.word	0xffff	; ????
     7f8:	f8 1f       	adc	r31, r24
     7fa:	ff ff       	.word	0xffff	; ????
     7fc:	ff f8       	.word	0xf8ff	; ????
     7fe:	1f ff       	.word	0xff1f	; ????
     800:	ff ff       	.word	0xffff	; ????
     802:	f8 0f       	add	r31, r24
     804:	ff ff       	.word	0xffff	; ????
     806:	ff f0       	brie	.+62     	; 0x846 <__stack+0x347>
	...
     830:	03 ff       	sbrs	r16, 3
     832:	ff ff       	.word	0xffff	; ????
     834:	c0 07       	cpc	r28, r16
     836:	ff ff       	.word	0xffff	; ????
     838:	ff e0       	ldi	r31, 0x0F	; 15
     83a:	0f ff       	.word	0xff0f	; ????
     83c:	ff ff       	.word	0xffff	; ????
     83e:	f0 1f       	adc	r31, r16
     840:	ff ff       	.word	0xffff	; ????
     842:	ff f8       	.word	0xf8ff	; ????
     844:	1f ff       	.word	0xff1f	; ????
     846:	ff ff       	.word	0xffff	; ????
     848:	f8 1f       	adc	r31, r24
     84a:	ff ff       	.word	0xffff	; ????
     84c:	ff f8       	.word	0xf8ff	; ????
     84e:	1f ff       	.word	0xff1f	; ????
     850:	ff ff       	.word	0xffff	; ????
     852:	f8 1f       	adc	r31, r24
     854:	ff ff       	.word	0xffff	; ????
     856:	ff f8       	.word	0xf8ff	; ????
     858:	1f ff       	.word	0xff1f	; ????
     85a:	ff ff       	.word	0xffff	; ????
     85c:	f8 1f       	adc	r31, r24
     85e:	f8 00       	.word	0x00f8	; ????
     860:	00 00       	nop
     862:	1f f0       	brie	.+6      	; 0x86a <__stack+0x36b>
     864:	00 00       	nop
     866:	00 1f       	adc	r16, r16
     868:	f0 00       	.word	0x00f0	; ????
     86a:	00 00       	nop
     86c:	1f f0       	brie	.+6      	; 0x874 <__stack+0x375>
     86e:	00 00       	nop
     870:	00 1f       	adc	r16, r16
     872:	f0 00       	.word	0x00f0	; ????
     874:	00 00       	nop
     876:	1f f0       	brie	.+6      	; 0x87e <__stack+0x37f>
     878:	00 00       	nop
     87a:	00 1f       	adc	r16, r16
     87c:	f0 00       	.word	0x00f0	; ????
     87e:	00 00       	nop
     880:	1f f0       	brie	.+6      	; 0x888 <__stack+0x389>
     882:	00 00       	nop
     884:	00 1f       	adc	r16, r16
     886:	f0 00       	.word	0x00f0	; ????
     888:	00 00       	nop
     88a:	1f f0       	brie	.+6      	; 0x892 <__stack+0x393>
     88c:	00 00       	nop
     88e:	00 1f       	adc	r16, r16
     890:	f0 00       	.word	0x00f0	; ????
     892:	00 00       	nop
     894:	1f f0       	brie	.+6      	; 0x89c <__stack+0x39d>
     896:	00 00       	nop
     898:	00 1f       	adc	r16, r16
     89a:	f0 00       	.word	0x00f0	; ????
     89c:	00 00       	nop
     89e:	1f f8       	.word	0xf81f	; ????
     8a0:	00 00       	nop
     8a2:	00 1f       	adc	r16, r16
     8a4:	ff ff       	.word	0xffff	; ????
     8a6:	ff c0       	rjmp	.+510    	; 0xaa6 <__stack+0x5a7>
     8a8:	1f ff       	.word	0xff1f	; ????
     8aa:	ff ff       	.word	0xffff	; ????
     8ac:	e0 1f       	adc	r30, r16
     8ae:	ff ff       	.word	0xffff	; ????
     8b0:	ff f0       	brie	.+62     	; 0x8f0 <__stack+0x3f1>
     8b2:	1f ff       	.word	0xff1f	; ????
     8b4:	ff ff       	.word	0xffff	; ????
     8b6:	f8 1f       	adc	r31, r24
     8b8:	ff ff       	.word	0xffff	; ????
     8ba:	ff f8       	.word	0xf8ff	; ????
     8bc:	1f ff       	.word	0xff1f	; ????
     8be:	ff ff       	.word	0xffff	; ????
     8c0:	f8 1f       	adc	r31, r24
     8c2:	ff ff       	.word	0xffff	; ????
     8c4:	ff f8       	.word	0xf8ff	; ????
     8c6:	1f ff       	.word	0xff1f	; ????
     8c8:	ff ff       	.word	0xffff	; ????
     8ca:	f8 1f       	adc	r31, r24
     8cc:	ff ff       	.word	0xffff	; ????
     8ce:	ff f8       	.word	0xf8ff	; ????
     8d0:	1f f8       	.word	0xf81f	; ????
     8d2:	00 1f       	adc	r16, r16
     8d4:	f8 1f       	adc	r31, r24
     8d6:	f0 00       	.word	0x00f0	; ????
     8d8:	0f f8       	.word	0xf80f	; ????
     8da:	1f f0       	brie	.+6      	; 0x8e2 <__stack+0x3e3>
     8dc:	00 0f       	add	r16, r16
     8de:	f8 1f       	adc	r31, r24
     8e0:	f0 00       	.word	0x00f0	; ????
     8e2:	0f f8       	.word	0xf80f	; ????
     8e4:	1f f0       	brie	.+6      	; 0x8ec <__stack+0x3ed>
     8e6:	00 0f       	add	r16, r16
     8e8:	f8 1f       	adc	r31, r24
     8ea:	f0 00       	.word	0x00f0	; ????
     8ec:	0f f8       	.word	0xf80f	; ????
     8ee:	1f f0       	brie	.+6      	; 0x8f6 <__stack+0x3f7>
     8f0:	00 0f       	add	r16, r16
     8f2:	f8 1f       	adc	r31, r24
     8f4:	f0 00       	.word	0x00f0	; ????
     8f6:	0f f8       	.word	0xf80f	; ????
     8f8:	1f f0       	brie	.+6      	; 0x900 <__stack+0x401>
     8fa:	00 0f       	add	r16, r16
     8fc:	f8 1f       	adc	r31, r24
     8fe:	f0 00       	.word	0x00f0	; ????
     900:	0f f8       	.word	0xf80f	; ????
     902:	1f f0       	brie	.+6      	; 0x90a <__stack+0x40b>
     904:	00 0f       	add	r16, r16
     906:	f8 1f       	adc	r31, r24
     908:	f0 00       	.word	0x00f0	; ????
     90a:	0f f8       	.word	0xf80f	; ????
     90c:	1f f0       	brie	.+6      	; 0x914 <__stack+0x415>
     90e:	00 0f       	add	r16, r16
     910:	f8 1f       	adc	r31, r24
     912:	f0 00       	.word	0x00f0	; ????
     914:	0f f8       	.word	0xf80f	; ????
     916:	1f f8       	.word	0xf81f	; ????
     918:	00 1f       	adc	r16, r16
     91a:	f8 1f       	adc	r31, r24
     91c:	ff ff       	.word	0xffff	; ????
     91e:	ff f8       	.word	0xf8ff	; ????
     920:	1f ff       	.word	0xff1f	; ????
     922:	ff ff       	.word	0xffff	; ????
     924:	f8 1f       	adc	r31, r24
     926:	ff ff       	.word	0xffff	; ????
     928:	ff f8       	.word	0xf8ff	; ????
     92a:	1f ff       	.word	0xff1f	; ????
     92c:	ff ff       	.word	0xffff	; ????
     92e:	f8 1f       	adc	r31, r24
     930:	ff ff       	.word	0xffff	; ????
     932:	ff f8       	.word	0xf8ff	; ????
     934:	1f ff       	.word	0xff1f	; ????
     936:	ff ff       	.word	0xffff	; ????
     938:	f8 1f       	adc	r31, r24
     93a:	ff ff       	.word	0xffff	; ????
     93c:	ff f8       	.word	0xf8ff	; ????
     93e:	1f ff       	.word	0xff1f	; ????
     940:	ff ff       	.word	0xffff	; ????
     942:	f8 0f       	add	r31, r24
     944:	ff ff       	.word	0xffff	; ????
     946:	ff f0       	brie	.+62     	; 0x986 <__stack+0x487>
	...
     970:	07 ff       	sbrs	r16, 7
     972:	ff ff       	.word	0xffff	; ????
     974:	e0 0f       	add	r30, r16
     976:	ff ff       	.word	0xffff	; ????
     978:	ff f0       	brie	.+62     	; 0x9b8 <__stack+0x4b9>
     97a:	1f ff       	.word	0xff1f	; ????
     97c:	ff ff       	.word	0xffff	; ????
     97e:	f8 1f       	adc	r31, r24
     980:	ff ff       	.word	0xffff	; ????
     982:	ff f8       	.word	0xf8ff	; ????
     984:	1f ff       	.word	0xff1f	; ????
     986:	ff ff       	.word	0xffff	; ????
     988:	f8 1f       	adc	r31, r24
     98a:	ff ff       	.word	0xffff	; ????
     98c:	ff f8       	.word	0xf8ff	; ????
     98e:	1f ff       	.word	0xff1f	; ????
     990:	ff ff       	.word	0xffff	; ????
     992:	f8 1f       	adc	r31, r24
     994:	ff ff       	.word	0xffff	; ????
     996:	ff f8       	.word	0xf8ff	; ????
     998:	0f ff       	.word	0xff0f	; ????
     99a:	ff ff       	.word	0xffff	; ????
     99c:	f8 00       	.word	0x00f8	; ????
     99e:	00 00       	nop
     9a0:	0f f8       	.word	0xf80f	; ????
     9a2:	00 00       	nop
     9a4:	00 0f       	add	r16, r16
     9a6:	f8 00       	.word	0x00f8	; ????
     9a8:	00 00       	nop
     9aa:	0f f8       	.word	0xf80f	; ????
     9ac:	00 00       	nop
     9ae:	00 0f       	add	r16, r16
     9b0:	f8 00       	.word	0x00f8	; ????
     9b2:	00 00       	nop
     9b4:	0f f8       	.word	0xf80f	; ????
     9b6:	00 00       	nop
     9b8:	00 0f       	add	r16, r16
     9ba:	f8 00       	.word	0x00f8	; ????
     9bc:	00 00       	nop
     9be:	0f f8       	.word	0xf80f	; ????
     9c0:	00 00       	nop
     9c2:	00 0f       	add	r16, r16
     9c4:	f8 00       	.word	0x00f8	; ????
     9c6:	00 00       	nop
     9c8:	0f f8       	.word	0xf80f	; ????
     9ca:	00 00       	nop
     9cc:	00 0f       	add	r16, r16
     9ce:	f8 00       	.word	0x00f8	; ????
     9d0:	00 00       	nop
     9d2:	0f f8       	.word	0xf80f	; ????
     9d4:	00 00       	nop
     9d6:	00 0f       	add	r16, r16
     9d8:	f8 00       	.word	0x00f8	; ????
     9da:	00 00       	nop
     9dc:	0f f8       	.word	0xf80f	; ????
     9de:	00 00       	nop
     9e0:	00 0f       	add	r16, r16
     9e2:	f8 00       	.word	0x00f8	; ????
     9e4:	00 00       	nop
     9e6:	0f f8       	.word	0xf80f	; ????
     9e8:	00 00       	nop
     9ea:	00 0f       	add	r16, r16
     9ec:	f8 00       	.word	0x00f8	; ????
     9ee:	00 00       	nop
     9f0:	0f f8       	.word	0xf80f	; ????
     9f2:	00 00       	nop
     9f4:	00 0f       	add	r16, r16
     9f6:	f8 00       	.word	0x00f8	; ????
     9f8:	00 00       	nop
     9fa:	0f f8       	.word	0xf80f	; ????
     9fc:	00 00       	nop
     9fe:	00 0f       	add	r16, r16
     a00:	f8 00       	.word	0x00f8	; ????
     a02:	00 00       	nop
     a04:	0f f8       	.word	0xf80f	; ????
     a06:	00 00       	nop
     a08:	00 0f       	add	r16, r16
     a0a:	f8 00       	.word	0x00f8	; ????
     a0c:	00 00       	nop
     a0e:	0f f8       	.word	0xf80f	; ????
     a10:	00 00       	nop
     a12:	00 0f       	add	r16, r16
     a14:	f8 00       	.word	0x00f8	; ????
     a16:	00 00       	nop
     a18:	0f f8       	.word	0xf80f	; ????
     a1a:	00 00       	nop
     a1c:	00 0f       	add	r16, r16
     a1e:	f8 00       	.word	0x00f8	; ????
     a20:	00 00       	nop
     a22:	0f f8       	.word	0xf80f	; ????
     a24:	00 00       	nop
     a26:	00 0f       	add	r16, r16
     a28:	f8 00       	.word	0x00f8	; ????
     a2a:	00 00       	nop
     a2c:	0f f8       	.word	0xf80f	; ????
     a2e:	00 00       	nop
     a30:	00 0f       	add	r16, r16
     a32:	f8 00       	.word	0x00f8	; ????
     a34:	00 00       	nop
     a36:	0f f8       	.word	0xf80f	; ????
     a38:	00 00       	nop
     a3a:	00 0f       	add	r16, r16
     a3c:	f8 00       	.word	0x00f8	; ????
     a3e:	00 00       	nop
     a40:	0f f8       	.word	0xf80f	; ????
     a42:	00 00       	nop
     a44:	00 0f       	add	r16, r16
     a46:	f8 00       	.word	0x00f8	; ????
     a48:	00 00       	nop
     a4a:	0f f8       	.word	0xf80f	; ????
     a4c:	00 00       	nop
     a4e:	00 0f       	add	r16, r16
     a50:	f8 00       	.word	0x00f8	; ????
     a52:	00 00       	nop
     a54:	0f f8       	.word	0xf80f	; ????
     a56:	00 00       	nop
     a58:	00 0f       	add	r16, r16
     a5a:	f8 00       	.word	0x00f8	; ????
     a5c:	00 00       	nop
     a5e:	0f f8       	.word	0xf80f	; ????
     a60:	00 00       	nop
     a62:	00 0f       	add	r16, r16
     a64:	f8 00       	.word	0x00f8	; ????
     a66:	00 00       	nop
     a68:	0f f8       	.word	0xf80f	; ????
     a6a:	00 00       	nop
     a6c:	00 0f       	add	r16, r16
     a6e:	f8 00       	.word	0x00f8	; ????
     a70:	00 00       	nop
     a72:	0f f8       	.word	0xf80f	; ????
     a74:	00 00       	nop
     a76:	00 0f       	add	r16, r16
     a78:	f8 00       	.word	0x00f8	; ????
     a7a:	00 00       	nop
     a7c:	0f f8       	.word	0xf80f	; ????
     a7e:	00 00       	nop
     a80:	00 0f       	add	r16, r16
     a82:	f8 00       	.word	0x00f8	; ????
     a84:	00 00       	nop
     a86:	0f f0       	brie	.+2      	; 0xa8a <__stack+0x58b>
	...
     ab0:	03 ff       	sbrs	r16, 3
     ab2:	ff ff       	.word	0xffff	; ????
     ab4:	c0 07       	cpc	r28, r16
     ab6:	ff ff       	.word	0xffff	; ????
     ab8:	ff e0       	ldi	r31, 0x0F	; 15
     aba:	0f ff       	.word	0xff0f	; ????
     abc:	ff ff       	.word	0xffff	; ????
     abe:	f0 1f       	adc	r31, r16
     ac0:	ff ff       	.word	0xffff	; ????
     ac2:	ff f8       	.word	0xf8ff	; ????
     ac4:	1f ff       	.word	0xff1f	; ????
     ac6:	ff ff       	.word	0xffff	; ????
     ac8:	f8 1f       	adc	r31, r24
     aca:	ff ff       	.word	0xffff	; ????
     acc:	ff f8       	.word	0xf8ff	; ????
     ace:	1f ff       	.word	0xff1f	; ????
     ad0:	ff ff       	.word	0xffff	; ????
     ad2:	f8 1f       	adc	r31, r24
     ad4:	ff ff       	.word	0xffff	; ????
     ad6:	ff f8       	.word	0xf8ff	; ????
     ad8:	1f ff       	.word	0xff1f	; ????
     ada:	ff ff       	.word	0xffff	; ????
     adc:	f8 1f       	adc	r31, r24
     ade:	f8 00       	.word	0x00f8	; ????
     ae0:	1f f8       	.word	0xf81f	; ????
     ae2:	1f f0       	brie	.+6      	; 0xaea <__stack+0x5eb>
     ae4:	00 0f       	add	r16, r16
     ae6:	f8 1f       	adc	r31, r24
     ae8:	f0 00       	.word	0x00f0	; ????
     aea:	0f f8       	.word	0xf80f	; ????
     aec:	1f f0       	brie	.+6      	; 0xaf4 <__stack+0x5f5>
     aee:	00 0f       	add	r16, r16
     af0:	f8 1f       	adc	r31, r24
     af2:	f0 00       	.word	0x00f0	; ????
     af4:	0f f8       	.word	0xf80f	; ????
     af6:	1f f0       	brie	.+6      	; 0xafe <__stack+0x5ff>
     af8:	00 0f       	add	r16, r16
     afa:	f8 1f       	adc	r31, r24
     afc:	f0 00       	.word	0x00f0	; ????
     afe:	0f f8       	.word	0xf80f	; ????
     b00:	1f f0       	brie	.+6      	; 0xb08 <__stack+0x609>
     b02:	00 0f       	add	r16, r16
     b04:	f8 1f       	adc	r31, r24
     b06:	f0 00       	.word	0x00f0	; ????
     b08:	0f f8       	.word	0xf80f	; ????
     b0a:	1f f0       	brie	.+6      	; 0xb12 <__stack+0x613>
     b0c:	00 0f       	add	r16, r16
     b0e:	f8 1f       	adc	r31, r24
     b10:	f0 00       	.word	0x00f0	; ????
     b12:	0f f8       	.word	0xf80f	; ????
     b14:	1f f0       	brie	.+6      	; 0xb1c <__stack+0x61d>
     b16:	00 0f       	add	r16, r16
     b18:	f8 1f       	adc	r31, r24
     b1a:	f0 00       	.word	0x00f0	; ????
     b1c:	0f f8       	.word	0xf80f	; ????
     b1e:	1f f8       	.word	0xf81f	; ????
     b20:	00 1f       	adc	r16, r16
     b22:	f8 1f       	adc	r31, r24
     b24:	ff ff       	.word	0xffff	; ????
     b26:	ff f8       	.word	0xf8ff	; ????
     b28:	1f ff       	.word	0xff1f	; ????
     b2a:	ff ff       	.word	0xffff	; ????
     b2c:	f8 1f       	adc	r31, r24
     b2e:	ff ff       	.word	0xffff	; ????
     b30:	ff f8       	.word	0xf8ff	; ????
     b32:	1f ff       	.word	0xff1f	; ????
     b34:	ff ff       	.word	0xffff	; ????
     b36:	f8 1f       	adc	r31, r24
     b38:	ff ff       	.word	0xffff	; ????
     b3a:	ff f8       	.word	0xf8ff	; ????
     b3c:	1f ff       	.word	0xff1f	; ????
     b3e:	ff ff       	.word	0xffff	; ????
     b40:	f8 1f       	adc	r31, r24
     b42:	ff ff       	.word	0xffff	; ????
     b44:	ff f8       	.word	0xf8ff	; ????
     b46:	1f ff       	.word	0xff1f	; ????
     b48:	ff ff       	.word	0xffff	; ????
     b4a:	f8 1f       	adc	r31, r24
     b4c:	ff ff       	.word	0xffff	; ????
     b4e:	ff f8       	.word	0xf8ff	; ????
     b50:	1f f8       	.word	0xf81f	; ????
     b52:	00 1f       	adc	r16, r16
     b54:	f8 1f       	adc	r31, r24
     b56:	f0 00       	.word	0x00f0	; ????
     b58:	0f f8       	.word	0xf80f	; ????
     b5a:	1f f0       	brie	.+6      	; 0xb62 <__stack+0x663>
     b5c:	00 0f       	add	r16, r16
     b5e:	f8 1f       	adc	r31, r24
     b60:	f0 00       	.word	0x00f0	; ????
     b62:	0f f8       	.word	0xf80f	; ????
     b64:	1f f0       	brie	.+6      	; 0xb6c <__stack+0x66d>
     b66:	00 0f       	add	r16, r16
     b68:	f8 1f       	adc	r31, r24
     b6a:	f0 00       	.word	0x00f0	; ????
     b6c:	0f f8       	.word	0xf80f	; ????
     b6e:	1f f0       	brie	.+6      	; 0xb76 <__stack+0x677>
     b70:	00 0f       	add	r16, r16
     b72:	f8 1f       	adc	r31, r24
     b74:	f0 00       	.word	0x00f0	; ????
     b76:	0f f8       	.word	0xf80f	; ????
     b78:	1f f0       	brie	.+6      	; 0xb80 <__stack+0x681>
     b7a:	00 0f       	add	r16, r16
     b7c:	f8 1f       	adc	r31, r24
     b7e:	f0 00       	.word	0x00f0	; ????
     b80:	0f f8       	.word	0xf80f	; ????
     b82:	1f f0       	brie	.+6      	; 0xb8a <__stack+0x68b>
     b84:	00 0f       	add	r16, r16
     b86:	f8 1f       	adc	r31, r24
     b88:	f0 00       	.word	0x00f0	; ????
     b8a:	0f f8       	.word	0xf80f	; ????
     b8c:	1f f0       	brie	.+6      	; 0xb94 <__stack+0x695>
     b8e:	00 0f       	add	r16, r16
     b90:	f8 1f       	adc	r31, r24
     b92:	f0 00       	.word	0x00f0	; ????
     b94:	0f f8       	.word	0xf80f	; ????
     b96:	1f f8       	.word	0xf81f	; ????
     b98:	00 1f       	adc	r16, r16
     b9a:	f8 1f       	adc	r31, r24
     b9c:	ff ff       	.word	0xffff	; ????
     b9e:	ff f8       	.word	0xf8ff	; ????
     ba0:	1f ff       	.word	0xff1f	; ????
     ba2:	ff ff       	.word	0xffff	; ????
     ba4:	f8 1f       	adc	r31, r24
     ba6:	ff ff       	.word	0xffff	; ????
     ba8:	ff f8       	.word	0xf8ff	; ????
     baa:	1f ff       	.word	0xff1f	; ????
     bac:	ff ff       	.word	0xffff	; ????
     bae:	f8 1f       	adc	r31, r24
     bb0:	ff ff       	.word	0xffff	; ????
     bb2:	ff f8       	.word	0xf8ff	; ????
     bb4:	1f ff       	.word	0xff1f	; ????
     bb6:	ff ff       	.word	0xffff	; ????
     bb8:	f8 1f       	adc	r31, r24
     bba:	ff ff       	.word	0xffff	; ????
     bbc:	ff f8       	.word	0xf8ff	; ????
     bbe:	1f ff       	.word	0xff1f	; ????
     bc0:	ff ff       	.word	0xffff	; ????
     bc2:	f8 0f       	add	r31, r24
     bc4:	ff ff       	.word	0xffff	; ????
     bc6:	ff f0       	brie	.+62     	; 0xc06 <__stack+0x707>
	...
     bf0:	07 ff       	sbrs	r16, 7
     bf2:	ff ff       	.word	0xffff	; ????
     bf4:	e0 0f       	add	r30, r16
     bf6:	ff ff       	.word	0xffff	; ????
     bf8:	ff f0       	brie	.+62     	; 0xc38 <__stack+0x739>
     bfa:	1f ff       	.word	0xff1f	; ????
     bfc:	ff ff       	.word	0xffff	; ????
     bfe:	f8 1f       	adc	r31, r24
     c00:	ff ff       	.word	0xffff	; ????
     c02:	ff f8       	.word	0xf8ff	; ????
     c04:	1f ff       	.word	0xff1f	; ????
     c06:	ff ff       	.word	0xffff	; ????
     c08:	f8 1f       	adc	r31, r24
     c0a:	ff ff       	.word	0xffff	; ????
     c0c:	ff f8       	.word	0xf8ff	; ????
     c0e:	1f ff       	.word	0xff1f	; ????
     c10:	ff ff       	.word	0xffff	; ????
     c12:	f8 1f       	adc	r31, r24
     c14:	ff ff       	.word	0xffff	; ????
     c16:	ff f8       	.word	0xf8ff	; ????
     c18:	1f ff       	.word	0xff1f	; ????
     c1a:	ff ff       	.word	0xffff	; ????
     c1c:	f8 1f       	adc	r31, r24
     c1e:	f8 00       	.word	0x00f8	; ????
     c20:	1f f8       	.word	0xf81f	; ????
     c22:	1f f0       	brie	.+6      	; 0xc2a <__stack+0x72b>
     c24:	00 0f       	add	r16, r16
     c26:	f8 1f       	adc	r31, r24
     c28:	f0 00       	.word	0x00f0	; ????
     c2a:	0f f8       	.word	0xf80f	; ????
     c2c:	1f f0       	brie	.+6      	; 0xc34 <__stack+0x735>
     c2e:	00 0f       	add	r16, r16
     c30:	f8 1f       	adc	r31, r24
     c32:	f0 00       	.word	0x00f0	; ????
     c34:	0f f8       	.word	0xf80f	; ????
     c36:	1f f0       	brie	.+6      	; 0xc3e <__stack+0x73f>
     c38:	00 0f       	add	r16, r16
     c3a:	f8 1f       	adc	r31, r24
     c3c:	f0 00       	.word	0x00f0	; ????
     c3e:	0f f8       	.word	0xf80f	; ????
     c40:	1f f0       	brie	.+6      	; 0xc48 <__stack+0x749>
     c42:	00 0f       	add	r16, r16
     c44:	f8 1f       	adc	r31, r24
     c46:	f0 00       	.word	0x00f0	; ????
     c48:	0f f8       	.word	0xf80f	; ????
     c4a:	1f f0       	brie	.+6      	; 0xc52 <__stack+0x753>
     c4c:	00 0f       	add	r16, r16
     c4e:	f8 1f       	adc	r31, r24
     c50:	f0 00       	.word	0x00f0	; ????
     c52:	0f f8       	.word	0xf80f	; ????
     c54:	1f f0       	brie	.+6      	; 0xc5c <__stack+0x75d>
     c56:	00 0f       	add	r16, r16
     c58:	f8 1f       	adc	r31, r24
     c5a:	f0 00       	.word	0x00f0	; ????
     c5c:	0f f8       	.word	0xf80f	; ????
     c5e:	1f f8       	.word	0xf81f	; ????
     c60:	00 1f       	adc	r16, r16
     c62:	f8 1f       	adc	r31, r24
     c64:	ff ff       	.word	0xffff	; ????
     c66:	ff f8       	.word	0xf8ff	; ????
     c68:	1f ff       	.word	0xff1f	; ????
     c6a:	ff ff       	.word	0xffff	; ????
     c6c:	f8 1f       	adc	r31, r24
     c6e:	ff ff       	.word	0xffff	; ????
     c70:	ff f8       	.word	0xf8ff	; ????
     c72:	1f ff       	.word	0xff1f	; ????
     c74:	ff ff       	.word	0xffff	; ????
     c76:	f8 1f       	adc	r31, r24
     c78:	ff ff       	.word	0xffff	; ????
     c7a:	ff f8       	.word	0xf8ff	; ????
     c7c:	1f ff       	.word	0xff1f	; ????
     c7e:	ff ff       	.word	0xffff	; ????
     c80:	f8 1f       	adc	r31, r24
     c82:	ff ff       	.word	0xffff	; ????
     c84:	ff f8       	.word	0xf8ff	; ????
     c86:	1f ff       	.word	0xff1f	; ????
     c88:	ff ff       	.word	0xffff	; ????
     c8a:	f8 0f       	add	r31, r24
     c8c:	ff ff       	.word	0xffff	; ????
     c8e:	ff f8       	.word	0xf8ff	; ????
     c90:	00 00       	nop
     c92:	00 0f       	add	r16, r16
     c94:	f8 00       	.word	0x00f8	; ????
     c96:	00 00       	nop
     c98:	0f f8       	.word	0xf80f	; ????
     c9a:	00 00       	nop
     c9c:	00 0f       	add	r16, r16
     c9e:	f8 00       	.word	0x00f8	; ????
     ca0:	00 00       	nop
     ca2:	0f f8       	.word	0xf80f	; ????
     ca4:	00 00       	nop
     ca6:	00 0f       	add	r16, r16
     ca8:	f8 00       	.word	0x00f8	; ????
     caa:	00 00       	nop
     cac:	0f f8       	.word	0xf80f	; ????
     cae:	00 00       	nop
     cb0:	00 0f       	add	r16, r16
     cb2:	f8 00       	.word	0x00f8	; ????
     cb4:	00 00       	nop
     cb6:	0f f8       	.word	0xf80f	; ????
     cb8:	00 00       	nop
     cba:	00 0f       	add	r16, r16
     cbc:	f8 00       	.word	0x00f8	; ????
     cbe:	00 00       	nop
     cc0:	0f f8       	.word	0xf80f	; ????
     cc2:	00 00       	nop
     cc4:	00 0f       	add	r16, r16
     cc6:	f8 00       	.word	0x00f8	; ????
     cc8:	00 00       	nop
     cca:	0f f8       	.word	0xf80f	; ????
     ccc:	00 00       	nop
     cce:	00 0f       	add	r16, r16
     cd0:	f8 00       	.word	0x00f8	; ????
     cd2:	00 00       	nop
     cd4:	0f f8       	.word	0xf80f	; ????
     cd6:	00 00       	nop
     cd8:	00 0f       	add	r16, r16
     cda:	f8 0f       	add	r31, r24
     cdc:	ff ff       	.word	0xffff	; ????
     cde:	ff f8       	.word	0xf8ff	; ????
     ce0:	1f ff       	.word	0xff1f	; ????
     ce2:	ff ff       	.word	0xffff	; ????
     ce4:	f8 1f       	adc	r31, r24
     ce6:	ff ff       	.word	0xffff	; ????
     ce8:	ff f8       	.word	0xf8ff	; ????
     cea:	1f ff       	.word	0xff1f	; ????
     cec:	ff ff       	.word	0xffff	; ????
     cee:	f8 1f       	adc	r31, r24
     cf0:	ff ff       	.word	0xffff	; ????
     cf2:	ff f8       	.word	0xf8ff	; ????
     cf4:	1f ff       	.word	0xff1f	; ????
     cf6:	ff ff       	.word	0xffff	; ????
     cf8:	f8 1f       	adc	r31, r24
     cfa:	ff ff       	.word	0xffff	; ????
     cfc:	ff f8       	.word	0xf8ff	; ????
     cfe:	1f ff       	.word	0xff1f	; ????
     d00:	ff ff       	.word	0xffff	; ????
     d02:	f8 0f       	add	r31, r24
     d04:	ff ff       	.word	0xffff	; ????
     d06:	ff f0       	brie	.+62     	; 0xd46 <maskArray+0x2a>
	...

00000d1c <maskArray>:
     d1c:	ff c0 81 00 01 00 81 c0 7e ff ff ff ff ff ff 7e     ........~......~
     d2c:	ef df bf 00 00 bf df ef ef df bf 00 ff ff ff ff     ................
     d3c:	c3 81 00 00 00 00 99 db c3 81 00 00 00 00 81 c3     ................
     d4c:	db 99 00 00 00 00 81 c3 c3 81 00 00 00 00 81 c3     ................

00000d5c <spriteArray>:
     d5c:	00 3f 42 91 82 91 42 3f 81 00 00 00 00 00 00 81     .?B...B?........
     d6c:	10 20 40 ff ff 40 20 10 10 20 40 ff 00 00 00 00     . @..@ .. @.....
     d7c:	3c 42 81 a1 89 99 66 24 3c 42 81 a1 81 89 4a 3c     <B....f$<B....J<
     d8c:	24 66 99 89 a1 81 42 3c 3c 4a 89 81 a1 81 42 3c     $f....B<<J....B<

00000d9c <logoArray>:
     d9c:	80 c0 40 0c 3e fe f2 e0 f0 e0 ff 7f 3f 1f 1f 1f     ..@.>.......?...
     dac:	1f 0f 07 03                                         ....

00000db0 <characterArray>:
     db0:	00 00 00 00 00 00 6f 6f 00 00 00 07 00 07 00 14     ......oo........
     dc0:	7f 14 7f 14 00 26 6b 2a 10 43 33 08 64 63 32 4d     .....&k*.C3.dc2M
     dd0:	49 36 50 00 00 07 00 00 00 1c 22 41 00 00 41 22     I6P......."A..A"
     de0:	1c 00 11 0a 1f 0a 11 10 10 7c 10 10 00 00 a0 60     .........|.....`
     df0:	00 10 10 10 10 10 00 00 60 60 00 40 30 08 06 01     ........``.@0...
     e00:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 22     >QIE>.B.@.BaQIF"
     e10:	41 49 49 36 08 0c 0a 7f 08 27 45 45 45 39 3c 4a     AII6.....'EEE9<J
     e20:	49 49 30 01 61 19 07 01 36 49 49 49 36 06 49 49     II0.a...6III6.II
     e30:	29 1e 00 00 6c 6c 00 00 00 ac 6c 00 08 14 22 41     )...ll....l..."A
     e40:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     e50:	3e 41 5d 5d 46 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]]F|...|.III6>
     e60:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     e70:	09 09 01 3e 41 41 51 72 7f 08 08 08 7f 41 41 7f     ...>AAQr.....AA.
     e80:	41 41 21 41 3f 01 01 7f 08 14 22 41 7f 40 40 40     AA!A?....."A.@@@
     e90:	40 7f 02 04 02 7f 7f 06 08 30 7f 3e 41 41 41 3e     @........0.>AAA>
     ea0:	7f 09 09 09 06 3e 41 41 61 7e 7f 09 19 29 46 26     .....>AAa~...)F&
     eb0:	49 49 49 32 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     ec0:	40 20 1f 3f 40 30 40 3f 63 14 08 14 63 03 04 78     @ .?@0@?c...c..x
     ed0:	04 03 61 51 49 45 43 00 00 7f 41 00 00 00 00 00     ..aQIEC...A.....
     ee0:	00 01 06 08 30 40 04 02 01 02 04 80 80 80 80 80     ....0@..........
     ef0:	01 02 04 00 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     f00:	44 44 44 28 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD(8DDH.8TTT..~
     f10:	09 01 02 18 a4 a4 a4 78 7f 08 08 08 70 00 48 7a     .......x....p.Hz
     f20:	40 00 40 80 80 88 7a 7f 10 10 28 44 00 41 7f 40     @.@...z...(D.A.@
     f30:	00 7c 04 38 04 78 7c 04 04 04 78 38 44 44 44 38     .|.8.x|...x8DDD8
     f40:	fc 24 24 24 18 18 24 24 fc 80 7c 08 04 04 08 48     .$$$..$$..|....H
     f50:	54 54 54 20 00 08 3c 48 20 3c 40 40 40 7c 0c 30     TTT ..<H <@@@|.0
     f60:	40 30 0c 1c 60 18 60 1c 44 28 10 28 44 1c a0 a0     @0..`.`.D(.(D...
     f70:	a0 7c 44 64 54 4c 44 00 08 36 41 41 20 40 ff 40     .|DdTLD..6AA @.@
     f80:	20 41 41 36 08 00 10 08 18 10 08                     AA6.......

00000f8b <wantYouGone>:
     f8b:	4f 10 31 10 07 10 e7 0f cc 0f 97 0f                 O.1.........

00000f97 <string_6>:
     f97:	55 6e 64 65 72 20 74 68 65 20 63 69 72 63 75 6d     Under the circum
     fa7:	73 74 61 6e 63 65 73 2c 20 49 27 76 65 20 62 65     stances, I've be
     fb7:	65 6e 20 53 48 4f 43 4b 49 4e 47 4c 59 20 6e 69     en SHOCKINGLY ni
     fc7:	63 65 2e 00 00                                      ce...

00000fcc <string_5>:
     fcc:	45 78 63 65 70 74 20 49 20 77 61 73 6e 27 74 20     Except I wasn't 
     fdc:	6c 61 75 67 68 69 6e 67 2e 00 00                    laughing...

00000fe7 <string_4>:
     fe7:	4f 68 20 68 6f 77 20 77 65 20 6c 61 75 67 68 65     Oh how we laughe
     ff7:	64 20 61 6e 64 20 6c 61 75 67 68 65 64 21 00 00     d and laughed!..

00001007 <string_3>:
    1007:	52 65 6d 65 6d 62 65 72 20 68 6f 77 20 79 6f 75     Remember how you
    1017:	20 74 72 69 65 64 20 74 6f 20 6b 69 6c 6c 20 6d      tried to kill m
    1027:	65 20 74 77 69 63 65 3f 00 00                       e twice?..

00001031 <string_2>:
    1031:	49 74 27 73 20 61 6c 77 61 79 73 20 73 75 63 68     It's always such
    1041:	20 61 20 70 6c 65 61 73 75 72 65 2e 00 00            a pleasure...

0000104f <string_1>:
    104f:	57 65 6c 6c 20 68 65 72 65 20 77 65 20 61 72 65     Well here we are
    105f:	20 61 67 61 69 6e 2e 00 00                           again...

00001068 <__ctors_end>:
    1068:	11 24       	eor	r1, r1
    106a:	1f be       	out	0x3f, r1	; 63
    106c:	cf ef       	ldi	r28, 0xFF	; 255
    106e:	d4 e0       	ldi	r29, 0x04	; 4
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	cd bf       	out	0x3d, r28	; 61

00001074 <__do_copy_data>:
    1074:	11 e0       	ldi	r17, 0x01	; 1
    1076:	a0 e0       	ldi	r26, 0x00	; 0
    1078:	b1 e0       	ldi	r27, 0x01	; 1
    107a:	e0 e3       	ldi	r30, 0x30	; 48
    107c:	f9 e2       	ldi	r31, 0x29	; 41
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <__do_copy_data+0x10>
    1080:	05 90       	lpm	r0, Z+
    1082:	0d 92       	st	X+, r0
    1084:	a2 30       	cpi	r26, 0x02	; 2
    1086:	b1 07       	cpc	r27, r17
    1088:	d9 f7       	brne	.-10     	; 0x1080 <__do_copy_data+0xc>

0000108a <__do_clear_bss>:
    108a:	22 e0       	ldi	r18, 0x02	; 2
    108c:	a2 e0       	ldi	r26, 0x02	; 2
    108e:	b1 e0       	ldi	r27, 0x01	; 1
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <.do_clear_bss_start>

00001092 <.do_clear_bss_loop>:
    1092:	1d 92       	st	X+, r1

00001094 <.do_clear_bss_start>:
    1094:	a0 31       	cpi	r26, 0x10	; 16
    1096:	b2 07       	cpc	r27, r18
    1098:	e1 f7       	brne	.-8      	; 0x1092 <.do_clear_bss_loop>
    109a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <main>
    109e:	0c 94 96 14 	jmp	0x292c	; 0x292c <_exit>

000010a2 <__bad_interrupt>:
    10a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000010a6 <timerInit>:
  //          1:0 - Waveform generation mode bits 1:0
  //                 Along with WGM1 3:2 (In TCCR1B), set to 1111 to enable
  //                 fast PWM mode. TCNT1 will increment until it reaches ICR1,
  //                 then reset, and the pin will change when TCNT1 == 0 and
  //                 when TCNT1 == OCR1B.
  TCCR1A = 0b00110010;
    10a6:	82 e3       	ldi	r24, 0x32	; 50
    10a8:	80 93 80 00 	sts	0x0080, r24
  //          5   - Don't care/no use
  //          4:3 - Waveform generation mode bits 3:2
  //                 See above; set to 11 for fast PWM
  //          2:0 - Timer 1 clock source
  //                 Set to 001 for no clock divisor.
  TCCR1B = 0b00011001;
    10ac:	89 e1       	ldi	r24, 0x19	; 25
    10ae:	80 93 81 00 	sts	0x0081, r24
  
  // ICR1-  Really implemented as two 8-bit registers (ICR1L and ICR1H),
  //  the value in this register (in this mode) marks the point at which
  //  the timer quits counting and returns to zero. By making it 100, we
  //  can then really easily set our backlight intensity from 0-100.
  ICR1 = 100;
    10b2:	84 e6       	ldi	r24, 0x64	; 100
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	90 93 87 00 	sts	0x0087, r25
    10ba:	80 93 86 00 	sts	0x0086, r24
  
  // OCR1B- Really implemented as two 8-bit registers (OCR1BL and OCR1BH),
  //  the value in this register is the point where the output pin will
  //  transition from low to high, turning the backlight off. We have a
  //  value stored in EEPROM, so we need to retrieve it.
  OCR1B = getBacklightLevel();
    10be:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <getBacklightLevel>
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	90 93 8b 00 	sts	0x008B, r25
    10c8:	80 93 8a 00 	sts	0x008A, r24
    10cc:	08 95       	ret

000010ce <t6963ReadStatus>:
{  
  // Astute readers will note that there is *no* busyWait() here! This is the
  //  one basic operation that does not, indeed, CANNOT, busy wait, since
  //  busy waiting requires one to read the status of the chip.
  uint8_t status;
  PORTC &= ~(1<<RD);  // We're reading.
    10ce:	41 98       	cbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10d0:	85 e0       	ldi	r24, 0x05	; 5
    10d2:	8a 95       	dec	r24
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <t6963ReadStatus+0x4>
    10d6:	00 00       	nop
  _delay_us(1);       // Hold time.
  PORTC &= ~(1<<CE);  // Enable the chip.
    10d8:	42 98       	cbi	0x08, 2	; 8
    10da:	85 e0       	ldi	r24, 0x05	; 5
    10dc:	8a 95       	dec	r24
    10de:	f1 f7       	brne	.-4      	; 0x10dc <t6963ReadStatus+0xe>
    10e0:	00 00       	nop
  _delay_us(1);       // Hold time.
  status = readData(); // The status should be on the data pins; fetch it.
    10e2:	0e 94 14 11 	call	0x2228	; 0x2228 <readData>
  PORTC |= (1<<CE);   // Deselect the chip.
    10e6:	42 9a       	sbi	0x08, 2	; 8
  PORTC |= ((1<<CD) | // Housekeeping- put the pins back to known rest state.
    10e8:	98 b1       	in	r25, 0x08	; 8
    10ea:	9b 60       	ori	r25, 0x0B	; 11
    10ec:	98 b9       	out	0x08, r25	; 8
            (1<<WR) |
            (1<<RD));
  return status;      // Return our findings.
}
    10ee:	08 95       	ret

000010f0 <t6963BusyWait>:
void t6963BusyWait(void)
{
  uint8_t status;
  do
  {
    status = t6963ReadStatus();
    10f0:	0e 94 67 08 	call	0x10ce	; 0x10ce <t6963ReadStatus>
  } while ((status & 0x03) == 0x00);
    10f4:	83 70       	andi	r24, 0x03	; 3
    10f6:	e1 f3       	breq	.-8      	; 0x10f0 <t6963BusyWait>
}
    10f8:	08 95       	ret

000010fa <t6963WriteData>:
  }
}

// Write a data byte to the controller.
void t6963WriteData(uint8_t data)
{
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	1f 92       	push	r1
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
  t6963BusyWait(); // Wait for the controller to be ready.
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	0e 94 78 08 	call	0x10f0	; 0x10f0 <t6963BusyWait>
  setData(data);   // Set up the data onto the lines.
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <setData>
  PORTC &= ~(1<<CD); // This tells the controller that we are sending DATA, not
    1110:	43 98       	cbi	0x08, 3	; 8
    1112:	85 e0       	ldi	r24, 0x05	; 5
    1114:	8a 95       	dec	r24
    1116:	f1 f7       	brne	.-4      	; 0x1114 <t6963WriteData+0x1a>
    1118:	00 00       	nop
                     //  a command
  _delay_us(1);    // Our processor speed puts us on the hairy edge of the
                   //  timing, so we pad a things a bit here and there.
  PORTC &= ~((1<<WR) | // WRITE, not read, and enable the chip.
    111a:	88 b1       	in	r24, 0x08	; 8
    111c:	8a 7f       	andi	r24, 0xFA	; 250
    111e:	88 b9       	out	0x08, r24	; 8
    1120:	e5 e0       	ldi	r30, 0x05	; 5
    1122:	ea 95       	dec	r30
    1124:	f1 f7       	brne	.-4      	; 0x1122 <t6963WriteData+0x28>
    1126:	00 00       	nop
             (1<<CE));
  _delay_us(1);    // Again, let's keep our hold time legit.
  PORTC |= (1<<CE); // De-assert the chip.
    1128:	42 9a       	sbi	0x08, 2	; 8
  PORTC |= ((1<<CD) | // Finally, put the CD, WR, and RD pins back to a known
    112a:	88 b1       	in	r24, 0x08	; 8
    112c:	8b 60       	ori	r24, 0x0B	; 11
    112e:	88 b9       	out	0x08, r24	; 8
            (1<<WR) | //  state. We'll do this after every basic command.
            (1<<RD));
}
    1130:	0f 90       	pop	r0
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <t6963ReadData>:

// Read a data byte from the controller.
uint8_t t6963ReadData(void)
{  
  t6963BusyWait();  // Wait for controller to be ready.
    1138:	0e 94 78 08 	call	0x10f0	; 0x10f0 <t6963BusyWait>
  uint8_t data;
  PORTC &= ~(1<<CD); // This is a DATA transaction.
    113c:	43 98       	cbi	0x08, 3	; 8
    113e:	85 e0       	ldi	r24, 0x05	; 5
    1140:	8a 95       	dec	r24
    1142:	f1 f7       	brne	.-4      	; 0x1140 <t6963ReadData+0x8>
    1144:	00 00       	nop
  _delay_us(1);      // Hold time.
  PORTC &= ~( (1<<CE) |  // Enable the chip...
    1146:	88 b1       	in	r24, 0x08	; 8
    1148:	89 7f       	andi	r24, 0xF9	; 249
    114a:	88 b9       	out	0x08, r24	; 8
    114c:	85 e0       	ldi	r24, 0x05	; 5
    114e:	8a 95       	dec	r24
    1150:	f1 f7       	brne	.-4      	; 0x114e <t6963ReadData+0x16>
    1152:	00 00       	nop
              (1<<RD) ); // ...and tell it this is a READ.
  _delay_us(1);      // Hold time.
  data = readData(); // Fetch the data.
    1154:	0e 94 14 11 	call	0x2228	; 0x2228 <readData>
  PORTC |= (1<<CE);  // De-select the chip.
    1158:	42 9a       	sbi	0x08, 2	; 8
  PORTC |= ((1<<CD) | // Go back to our known state for the signal lines.
    115a:	98 b1       	in	r25, 0x08	; 8
    115c:	9b 60       	ori	r25, 0x0B	; 11
    115e:	98 b9       	out	0x08, r25	; 8
            (1<<WR) |
            (1<<RD));
  return data;
}
    1160:	08 95       	ret

00001162 <t6963WriteCmd>:

// Write a command to the controller. Note that "reading" a command is
//  nonsensical and no ReadCommand() function is provided.
void t6963WriteCmd(uint8_t command)
{  
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	1f 92       	push	r1
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
  t6963BusyWait();   // Wait for controller to be ready.
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <t6963BusyWait>
  setData(command);  // Set up the data on the lines.
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	0e 94 fe 10 	call	0x21fc	; 0x21fc <setData>
    1178:	85 e0       	ldi	r24, 0x05	; 5
    117a:	8a 95       	dec	r24
    117c:	f1 f7       	brne	.-4      	; 0x117a <t6963WriteCmd+0x18>
    117e:	00 00       	nop
  _delay_us(1);      // Hold time.
  PORTC &= ~(1<<WR); // Tell the controller that we're WRITING.
    1180:	40 98       	cbi	0x08, 0	; 8
    1182:	e5 e0       	ldi	r30, 0x05	; 5
    1184:	ea 95       	dec	r30
    1186:	f1 f7       	brne	.-4      	; 0x1184 <t6963WriteCmd+0x22>
    1188:	00 00       	nop
  _delay_us(1);      // Hold time.
  PORTC &= ~(1<<CE); // Enable the controller to complete the write.
    118a:	42 98       	cbi	0x08, 2	; 8
    118c:	f5 e0       	ldi	r31, 0x05	; 5
    118e:	fa 95       	dec	r31
    1190:	f1 f7       	brne	.-4      	; 0x118e <t6963WriteCmd+0x2c>
    1192:	00 00       	nop
  _delay_us(1);      // Hold time, for the write to happen.
  PORTC |= (1<<CE);  // Deselect the chip.
    1194:	42 9a       	sbi	0x08, 2	; 8
  PORTC |= ((1<<CD) | // Put the lines back to known normal state.
    1196:	88 b1       	in	r24, 0x08	; 8
    1198:	8b 60       	ori	r24, 0x0B	; 11
    119a:	88 b9       	out	0x08, r24	; 8
            (1<<WR) |
            (1<<RD));
}
    119c:	0f 90       	pop	r0
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

000011a4 <t6963SetPointer>:

// Set the pointer to the byte which contains an arbirary x, y point. For our
//  160 x 128 pixel display, there are 20*128 memory address, so we need a
//  16-bit value to refer to the whole graphics area array.
void t6963SetPointer(uint8_t x, uint8_t y)
{
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
  // Calculate which address in our memory space contains the pixel. For each
  //  increase in y, we increase by 20 locations. For each 8 pixels in x, we
  //  increase by one location. Using a 3-right-shift is a cheap way of doing
  //  divide by 8 in a processor without a divide operation. Maybe the
  //  compiler knows that, maybe not.
  uint16_t pointerAddress = (y * 20) + (x>>3);
    11a8:	86 95       	lsr	r24
    11aa:	86 95       	lsr	r24
    11ac:	86 95       	lsr	r24
    11ae:	c8 2f       	mov	r28, r24
    11b0:	d0 e0       	ldi	r29, 0x00	; 0
    11b2:	84 e1       	ldi	r24, 0x14	; 20
    11b4:	68 9f       	mul	r22, r24
    11b6:	c0 0d       	add	r28, r0
    11b8:	d1 1d       	adc	r29, r1
    11ba:	11 24       	eor	r1, r1
  // Now that we have our address, we can write our data out.
  // This is the low byte of the address
  t6963WriteData((uint8_t)pointerAddress);
    11bc:	8c 2f       	mov	r24, r28
    11be:	0e 94 7d 08 	call	0x10fa	; 0x10fa <t6963WriteData>
  // This is the high byte of the address
  t6963WriteData((uint8_t)(pointerAddress>>8));
    11c2:	8d 2f       	mov	r24, r29
    11c4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <t6963WriteData>
  t6963WriteCmd(0x24);  // This is the command for "set pointer address".
    11c8:	84 e2       	ldi	r24, 0x24	; 36
}
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
  // Now that we have our address, we can write our data out.
  // This is the low byte of the address
  t6963WriteData((uint8_t)pointerAddress);
  // This is the high byte of the address
  t6963WriteData((uint8_t)(pointerAddress>>8));
  t6963WriteCmd(0x24);  // This is the command for "set pointer address".
    11ce:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <t6963WriteCmd>

000011d2 <t6963Clear>:
extern volatile uint8_t reverse; // This is defined in glcdbp.c

// Basic functionality: clearing the display. All we're *really* doing is 
//  writing a one or zero to all the memory locations for the display.
void t6963Clear(void)
{
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
  // Begin at the beginning.
  t6963SetPointer(0,0);
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <t6963SetPointer>
    11de:	c0 e0       	ldi	r28, 0x00	; 0
    11e0:	da e0       	ldi	r29, 0x0A	; 10
  //  mode here to shorten this up a bit, but meh. That would save us the 
  //  command write for each loop, and reduce the overall time by probably a 
  //  few milliseconds.
  for (uint16_t i = 0; i < 2560; i++)
  {
    if (reverse) t6963WriteData(0xff);
    11e2:	80 91 02 01 	lds	r24, 0x0102
    11e6:	88 23       	and	r24, r24
    11e8:	11 f0       	breq	.+4      	; 0x11ee <t6963Clear+0x1c>
    11ea:	8f ef       	ldi	r24, 0xFF	; 255
    11ec:	01 c0       	rjmp	.+2      	; 0x11f0 <t6963Clear+0x1e>
    else         t6963WriteData(0x00);
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	0e 94 7d 08 	call	0x10fa	; 0x10fa <t6963WriteData>
    t6963WriteCmd(0xc0);  // This is the "write-data-then-increment-pointer"
    11f4:	80 ec       	ldi	r24, 0xC0	; 192
    11f6:	0e 94 b1 08 	call	0x1162	; 0x1162 <t6963WriteCmd>
    11fa:	21 97       	sbiw	r28, 0x01	; 1
  t6963SetPointer(0,0);
  // Then, clear out the whole enchilada. We *could* use the auto increment 
  //  mode here to shorten this up a bit, but meh. That would save us the 
  //  command write for each loop, and reduce the overall time by probably a 
  //  few milliseconds.
  for (uint16_t i = 0; i < 2560; i++)
    11fc:	20 97       	sbiw	r28, 0x00	; 0
    11fe:	89 f7       	brne	.-30     	; 0x11e2 <t6963Clear+0x10>
    if (reverse) t6963WriteData(0xff);
    else         t6963WriteData(0x00);
    t6963WriteCmd(0xc0);  // This is the "write-data-then-increment-pointer"
                          //  command. Useful.
  }
}
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	08 95       	ret

00001206 <t6963DisplayInit>:

void t6963DisplayInit(void)
{
  // The first part of display initialization is to set the start location of
  //  the graphics in memory. We'll set it to 0x0000.
  t6963WriteData(0x00); // Write the low byte of the graphics home address.
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	0e 94 7d 08 	call	0x10fa	; 0x10fa <t6963WriteData>
  t6963WriteData(0x00); // Write the high byte of the graphics home address.
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <t6963WriteData>
  t6963WriteCmd(0x42);  // "Write graphics home address" command.
    1212:	82 e4       	ldi	r24, 0x42	; 66
    1214:	0e 94 b1 08 	call	0x1162	; 0x1162 <t6963WriteCmd>
  
  // Next, we need to set the graphics area. This is the length of each line
  //  before the line wraps to the next one. Note that it does not have to
  //  equal the actual number of pixels in the display- just equal to or
  //  greater than.
  t6963WriteData(20);   // # bytes per line (160 pixels/8 bits per byte)
    1218:	84 e1       	ldi	r24, 0x14	; 20
    121a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <t6963WriteData>
  t6963WriteData(0x00); // Always zero.
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	0e 94 7d 08 	call	0x10fa	; 0x10fa <t6963WriteData>
  t6963WriteCmd(0x43);  // "Write graphics area" command.
    1224:	83 e4       	ldi	r24, 0x43	; 67
    1226:	0e 94 b1 08 	call	0x1162	; 0x1162 <t6963WriteCmd>
  //          1   = RAM character generation
  //  MD2-0 - 000 = OR mode
  //          001 = XOR mode
  //          010 = AND mode
  //          100 = TEXT ATTRIBUTE mode
  t6963WriteCmd(0x80);
    122a:	80 e8       	ldi	r24, 0x80	; 128
    122c:	0e 94 b1 08 	call	0x1162	; 0x1162 <t6963WriteCmd>
  //     1  0  0  1  GRPH  TEXT  CUR  BLK
  //  GRPH - 1/0 graphics on/off
  //  TEXT - 1/0 text display on/off
  //  CUR  - 1/0 text cursor displayed/not displayed
  //  BLK  - 1/0 text cursory blink on/off
  t6963WriteCmd(0x98);
    1230:	88 e9       	ldi	r24, 0x98	; 152
    1232:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <t6963WriteCmd>

00001236 <t6963BitSR>:
//  S/R   -  1/0 Set/reset bit
//  B2:B0 -  index of bit to be set or reset (value is in bitIndex)
void t6963BitSR(uint8_t bit, uint8_t SR)
{
  uint8_t command = 0xf0;
  command |= SR;
    1236:	80 6f       	ori	r24, 0xF0	; 240
  command |= bit;
  t6963WriteCmd(command);
    1238:	86 2b       	or	r24, r22
    123a:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <t6963WriteCmd>

0000123e <t6963DrawPixel>:
//  which contains the pixel, then issue a "bit set/clear" command on that
//  bit. Note that the order of pixels is backwards- while the address of
//  the columns increases across the display, within a given 8-bit column,
//  bit 0 is the rightmost bit.
void t6963DrawPixel(uint8_t x, uint8_t y, PIX_VAL pixel)
{
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	1f 92       	push	r1
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	18 2f       	mov	r17, r24
  // Step one: select the byte in question.
  t6963SetPointer(x, y);
    124c:	49 83       	std	Y+1, r20	; 0x01
    124e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <t6963SetPointer>
  // Figure out which bit we're interested in setting/clearing
  uint8_t bitIndex = 7-(x%8);
    1252:	81 2f       	mov	r24, r17
    1254:	80 95       	com	r24
    1256:	87 70       	andi	r24, 0x07	; 7
  // Now we'll use the set/reset bit command to toggle the bit we're
  //  interested in.
  // Of course, before we can do that, we need to determine, based on the
  //  state of reverse, whether "ON" and "OFF" correspond to set/reset or
  //  reset/set.
  if (reverse) // We're in dark-on-light mode...
    1258:	90 91 02 01 	lds	r25, 0x0102
    125c:	49 81       	ldd	r20, Y+1	; 0x01
    125e:	99 23       	and	r25, r25
    1260:	19 f0       	breq	.+6      	; 0x1268 <t6963DrawPixel+0x2a>
  {
    if (pixel == ON) // ...so ON corresponds to a pixel that is dark.
    1262:	41 11       	cpse	r20, r1
    1264:	03 c0       	rjmp	.+6      	; 0x126c <t6963DrawPixel+0x2e>
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <t6963DrawPixel+0x32>
    else
        t6963BitSR(bitIndex, PIX_LT);
  }
  else
  {
    if (pixel == ON) // ...so ON corresponds to a pixel that is light.
    1268:	41 11       	cpse	r20, r1
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <t6963DrawPixel+0x32>
void t6963BitSR(uint8_t bit, uint8_t SR)
{
  uint8_t command = 0xf0;
  command |= SR;
  command |= bit;
  t6963WriteCmd(command);
    126c:	88 6f       	ori	r24, 0xF8	; 248
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <t6963DrawPixel+0x34>
    1270:	80 6f       	ori	r24, 0xF0	; 240
    if (pixel == ON) // ...so ON corresponds to a pixel that is light.
        t6963BitSR(bitIndex, PIX_LT);
    else
        t6963BitSR(bitIndex, PIX_DK);
  }
}
    1272:	0f 90       	pop	r0
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
void t6963BitSR(uint8_t bit, uint8_t SR)
{
  uint8_t command = 0xf0;
  command |= SR;
  command |= bit;
  t6963WriteCmd(command);
    127a:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <t6963WriteCmd>

0000127e <t6963ReadBlock>:
//  columns; that is, the first byte in the buffer will be (x, y) to (x, y+7),
//  and the last buffer should be (x+7, y) to (x+7, y+7). This sucks, b/c we
//  are getting data from the display in the form (x, y) to (x+7, y) and we
//  need to effectively rotate that matrix 90 degrees, bit by bit.
void t6963ReadBlock(uint8_t x, uint8_t y, uint8_t *buffer)
{
    127e:	9f 92       	push	r9
    1280:	af 92       	push	r10
    1282:	bf 92       	push	r11
    1284:	cf 92       	push	r12
    1286:	df 92       	push	r13
    1288:	ef 92       	push	r14
    128a:	ff 92       	push	r15
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	2a 97       	sbiw	r28, 0x0a	; 10
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	c8 2e       	mov	r12, r24
    12a6:	a6 2e       	mov	r10, r22
    12a8:	ce 01       	movw	r24, r28
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	7c 01       	movw	r14, r24
  uint8_t firstColBuffer, secondColBuffer;
  uint8_t dataBuffer[8];
  for (uint8_t i = 0; i < 8; i++)
    12ae:	d1 2c       	mov	r13, r1
    t6963WriteCmd(0xc5);    // Read data command, don't change pointer.
    secondColBuffer = t6963ReadData(); // Read the data.
    // Okay, so now we have the data we're interested in. We'll need to
    //  bit-shift it; if the data spans two bytes, we need to put those two
    //  bytes into one.
    dataBuffer[i] = firstColBuffer<<(x%8);
    12b0:	9c 2d       	mov	r25, r12
    12b2:	97 70       	andi	r25, 0x07	; 7
    12b4:	b9 2e       	mov	r11, r25
    dataBuffer[i] |= secondColBuffer>>(8 - (x%8));
    12b6:	08 e0       	ldi	r16, 0x08	; 8
    12b8:	10 e0       	ldi	r17, 0x00	; 0
    12ba:	09 1b       	sub	r16, r25
    12bc:	11 09       	sbc	r17, r1
    12be:	6d 2d       	mov	r22, r13
    12c0:	6a 0d       	add	r22, r10
{
  uint8_t firstColBuffer, secondColBuffer;
  uint8_t dataBuffer[8];
  for (uint8_t i = 0; i < 8; i++)
  {
    t6963SetPointer(x,y+i); // This sets our pointer to the location containing
    12c2:	8c 2d       	mov	r24, r12
    12c4:	49 87       	std	Y+9, r20	; 0x09
    12c6:	5a 87       	std	Y+10, r21	; 0x0a
    12c8:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <t6963SetPointer>
                            //  the first pixel of interest.
    t6963WriteCmd(0xc1);    // Read data command, increment pointer.
    12cc:	81 ec       	ldi	r24, 0xC1	; 193
    12ce:	0e 94 b1 08 	call	0x1162	; 0x1162 <t6963WriteCmd>
    firstColBuffer = t6963ReadData(); // Read the data.
    12d2:	0e 94 9c 08 	call	0x1138	; 0x1138 <t6963ReadData>
    12d6:	98 2e       	mov	r9, r24
    t6963WriteCmd(0xc5);    // Read data command, don't change pointer.
    12d8:	85 ec       	ldi	r24, 0xC5	; 197
    12da:	0e 94 b1 08 	call	0x1162	; 0x1162 <t6963WriteCmd>
    secondColBuffer = t6963ReadData(); // Read the data.
    12de:	0e 94 9c 08 	call	0x1138	; 0x1138 <t6963ReadData>
    // Okay, so now we have the data we're interested in. We'll need to
    //  bit-shift it; if the data spans two bytes, we need to put those two
    //  bytes into one.
    dataBuffer[i] = firstColBuffer<<(x%8);
    dataBuffer[i] |= secondColBuffer>>(8 - (x%8));
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	00 2e       	mov	r0, r16
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <t6963ReadBlock+0x70>
    12ea:	35 95       	asr	r19
    12ec:	27 95       	ror	r18
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <t6963ReadBlock+0x6c>
    t6963WriteCmd(0xc5);    // Read data command, don't change pointer.
    secondColBuffer = t6963ReadData(); // Read the data.
    // Okay, so now we have the data we're interested in. We'll need to
    //  bit-shift it; if the data spans two bytes, we need to put those two
    //  bytes into one.
    dataBuffer[i] = firstColBuffer<<(x%8);
    12f2:	99 2d       	mov	r25, r9
    12f4:	0b 2c       	mov	r0, r11
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <t6963ReadBlock+0x7c>
    12f8:	99 0f       	add	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	ea f7       	brpl	.-6      	; 0x12f8 <t6963ReadBlock+0x7a>
    dataBuffer[i] |= secondColBuffer>>(8 - (x%8));
    12fe:	92 2b       	or	r25, r18
    1300:	f7 01       	movw	r30, r14
    1302:	91 93       	st	Z+, r25
    1304:	7f 01       	movw	r14, r30
//  need to effectively rotate that matrix 90 degrees, bit by bit.
void t6963ReadBlock(uint8_t x, uint8_t y, uint8_t *buffer)
{
  uint8_t firstColBuffer, secondColBuffer;
  uint8_t dataBuffer[8];
  for (uint8_t i = 0; i < 8; i++)
    1306:	d3 94       	inc	r13
    1308:	49 85       	ldd	r20, Y+9	; 0x09
    130a:	5a 85       	ldd	r21, Y+10	; 0x0a
    130c:	f8 e0       	ldi	r31, 0x08	; 8
    130e:	df 12       	cpse	r13, r31
    1310:	d6 cf       	rjmp	.-84     	; 0x12be <t6963ReadBlock+0x40>
    1312:	fa 01       	movw	r30, r20
    1314:	78 e0       	ldi	r23, 0x08	; 8
  {
    buffer[i] = 0; // Before we start OR-ing stuff into this, make sure the
                   //  address is clean!
    for (uint8_t j = 0; j <8; j++)
    {
      buffer[i] |= (dataBuffer[j]&(0x01<<j));
    1316:	21 e0       	ldi	r18, 0x01	; 1
    1318:	30 e0       	ldi	r19, 0x00	; 0
//  need to effectively rotate that matrix 90 degrees, bit by bit.
void t6963ReadBlock(uint8_t x, uint8_t y, uint8_t *buffer)
{
  uint8_t firstColBuffer, secondColBuffer;
  uint8_t dataBuffer[8];
  for (uint8_t i = 0; i < 8; i++)
    131a:	de 01       	movw	r26, r28
    131c:	11 96       	adiw	r26, 0x01	; 1
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	10 e0       	ldi	r17, 0x00	; 0
  {
    buffer[i] = 0; // Before we start OR-ing stuff into this, make sure the
                   //  address is clean!
    for (uint8_t j = 0; j <8; j++)
    {
      buffer[i] |= (dataBuffer[j]&(0x01<<j));
    1324:	6d 91       	ld	r22, X+
    1326:	a9 01       	movw	r20, r18
    1328:	08 2e       	mov	r0, r24
    132a:	01 c0       	rjmp	.+2      	; 0x132e <t6963ReadBlock+0xb0>
    132c:	44 0f       	add	r20, r20
    132e:	0a 94       	dec	r0
    1330:	ea f7       	brpl	.-6      	; 0x132c <t6963ReadBlock+0xae>
    1332:	64 23       	and	r22, r20
    1334:	61 2b       	or	r22, r17
    1336:	01 96       	adiw	r24, 0x01	; 1
  //  elements, buffer[1] contain bit 1, etc etc.
  for (uint8_t i = 0; i < 8; i++)
  {
    buffer[i] = 0; // Before we start OR-ing stuff into this, make sure the
                   //  address is clean!
    for (uint8_t j = 0; j <8; j++)
    1338:	88 30       	cpi	r24, 0x08	; 8
    133a:	91 05       	cpc	r25, r1
    133c:	11 f0       	breq	.+4      	; 0x1342 <t6963ReadBlock+0xc4>
    {
      buffer[i] |= (dataBuffer[j]&(0x01<<j));
    133e:	16 2f       	mov	r17, r22
    1340:	f1 cf       	rjmp	.-30     	; 0x1324 <t6963ReadBlock+0xa6>
    1342:	61 93       	st	Z+, r22
    1344:	71 50       	subi	r23, 0x01	; 1
    dataBuffer[i] |= secondColBuffer>>(8 - (x%8));
  }
  // dataBuffer now contains the block data, with dataBuffer[0] being the top
  //  row. We need to make buffer[0] contain bit 0 of each of dataBuffer's
  //  elements, buffer[1] contain bit 1, etc etc.
  for (uint8_t i = 0; i < 8; i++)
    1346:	49 f7       	brne	.-46     	; 0x131a <t6963ReadBlock+0x9c>
    for (uint8_t j = 0; j <8; j++)
    {
      buffer[i] |= (dataBuffer[j]&(0x01<<j));
    }
  } 
    1348:	2a 96       	adiw	r28, 0x0a	; 10
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	bf 90       	pop	r11
    1366:	af 90       	pop	r10
    1368:	9f 90       	pop	r9
    136a:	08 95       	ret

0000136c <serialInit>:

// Initialize the serial port hardware.
void serialInit(uint16_t baudRate)
{
  // Set baud rate 
  UBRR0 = baudRate;
    136c:	90 93 c5 00 	sts	0x00C5, r25
    1370:	80 93 c4 00 	sts	0x00C4, r24

  // Enable receiver and transmitter 
  UCSR0A = (1<<U2X0);
    1374:	82 e0       	ldi	r24, 0x02	; 2
    1376:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);  //Enable Interrupts on receive
    137a:	88 e9       	ldi	r24, 0x98	; 152
    137c:	80 93 c1 00 	sts	0x00C1, r24

  UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
    1380:	86 e0       	ldi	r24, 0x06	; 6
    1382:	80 93 c2 00 	sts	0x00C2, r24
    1386:	08 95       	ret

00001388 <putChar>:

// A simple function that waits for the clear to send from the USART, then
//  dumps out a data byte. All other serial puts are based on this.
void putChar(uint8_t TXData)
{
  while ( !( UCSR0A & (1<<UDRE0)) );  // Wait for empty transmit buffer
    1388:	90 91 c0 00 	lds	r25, 0x00C0
    138c:	95 ff       	sbrs	r25, 5
    138e:	fc cf       	rjmp	.-8      	; 0x1388 <putChar>
  UDR0 = TXData;    // Put data into buffer; uC automatically
    1390:	80 93 c6 00 	sts	0x00C6, r24
    1394:	08 95       	ret

00001396 <putHex>:
}

// I probably didn't need to write this, but I did. Converts an 8-bit number
//  to two-digit hex and prints it.
void putHex(uint8_t TXData)
{
    1396:	cf 93       	push	r28
  uint8_t hexChars[2]; // We'll use an array to buffer the characters.
  // First, let's isolate the two halves of the byte in question.
  hexChars[0] = (0x0F) & TXData;
    1398:	c8 2f       	mov	r28, r24
    139a:	cf 70       	andi	r28, 0x0F	; 15
  hexChars[1] = ((0xF0) & TXData)>>4;
    139c:	82 95       	swap	r24
    139e:	8f 70       	andi	r24, 0x0F	; 15
  // Okay, now we can convert them to an ASCII value.
  if (hexChars[1] < 10) hexChars[1] += '0';
    13a0:	8a 30       	cpi	r24, 0x0A	; 10
    13a2:	10 f4       	brcc	.+4      	; 0x13a8 <putHex+0x12>
    13a4:	80 5d       	subi	r24, 0xD0	; 208
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <putHex+0x14>
  else hexChars[1] += ('A'-10);
    13a8:	89 5c       	subi	r24, 0xC9	; 201
  putChar(hexChars[1]);
    13aa:	0e 94 c4 09 	call	0x1388	; 0x1388 <putChar>
  if (hexChars[0] < 10) hexChars[0] += '0';
    13ae:	ca 30       	cpi	r28, 0x0A	; 10
    13b0:	10 f4       	brcc	.+4      	; 0x13b6 <putHex+0x20>
    13b2:	80 e3       	ldi	r24, 0x30	; 48
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <putHex+0x22>
  else hexChars[0] += ('A'-10);
    13b6:	87 e3       	ldi	r24, 0x37	; 55
    13b8:	8c 0f       	add	r24, r28
  putChar(hexChars[0]);
}
    13ba:	cf 91       	pop	r28
  if (hexChars[1] < 10) hexChars[1] += '0';
  else hexChars[1] += ('A'-10);
  putChar(hexChars[1]);
  if (hexChars[0] < 10) hexChars[0] += '0';
  else hexChars[0] += ('A'-10);
  putChar(hexChars[0]);
    13bc:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <putChar>

000013c0 <putDec>:
}

// Convert an 8-bit value into a three-digit decimal number and print it.
void putDec(uint8_t TXData)
{
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	1f 92       	push	r1
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	28 2f       	mov	r18, r24
  uint8_t ones = TXData % 10;
    13d0:	0a e0       	ldi	r16, 0x0A	; 10
    13d2:	60 2f       	mov	r22, r16
    13d4:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodqi4>
    13d8:	19 2f       	mov	r17, r25
  TXData -= ones;
    13da:	82 2f       	mov	r24, r18
    13dc:	89 1b       	sub	r24, r25
  uint8_t tens = (TXData % 100)/10;
  uint8_t huns = TXData / 100;
    13de:	64 e6       	ldi	r22, 0x64	; 100
    13e0:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodqi4>
  putChar((huns) + '0');
    13e4:	80 5d       	subi	r24, 0xD0	; 208
    13e6:	99 83       	std	Y+1, r25	; 0x01
    13e8:	0e 94 c4 09 	call	0x1388	; 0x1388 <putChar>
// Convert an 8-bit value into a three-digit decimal number and print it.
void putDec(uint8_t TXData)
{
  uint8_t ones = TXData % 10;
  TXData -= ones;
  uint8_t tens = (TXData % 100)/10;
    13ec:	99 81       	ldd	r25, Y+1	; 0x01
    13ee:	89 2f       	mov	r24, r25
    13f0:	60 2f       	mov	r22, r16
    13f2:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodqi4>
  uint8_t huns = TXData / 100;
  putChar((huns) + '0');
  putChar((tens) + '0');
    13f6:	80 5d       	subi	r24, 0xD0	; 208
    13f8:	0e 94 c4 09 	call	0x1388	; 0x1388 <putChar>
  putChar((ones) + '0');
    13fc:	80 e3       	ldi	r24, 0x30	; 48
    13fe:	81 0f       	add	r24, r17
}
    1400:	0f 90       	pop	r0
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
  TXData -= ones;
  uint8_t tens = (TXData % 100)/10;
  uint8_t huns = TXData / 100;
  putChar((huns) + '0');
  putChar((tens) + '0');
  putChar((ones) + '0');
    140a:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <putChar>

0000140e <putBin>:
}

// Convert an 8-bit value into an 8-bit binary number and print it.
void putBin(uint8_t TXData)
{
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	d8 2f       	mov	r29, r24
    1414:	c8 e0       	ldi	r28, 0x08	; 8
  for (char i = 0; i < 8; i++)
  {
    if ((TXData & 0x01) == 0x01) putChar('1');
    1416:	d0 ff       	sbrs	r29, 0
    1418:	02 c0       	rjmp	.+4      	; 0x141e <putBin+0x10>
    141a:	81 e3       	ldi	r24, 0x31	; 49
    141c:	01 c0       	rjmp	.+2      	; 0x1420 <putBin+0x12>
    else putChar('0');
    141e:	80 e3       	ldi	r24, 0x30	; 48
    1420:	0e 94 c4 09 	call	0x1388	; 0x1388 <putChar>
    TXData = TXData>>1;
    1424:	d6 95       	lsr	r29
    1426:	c1 50       	subi	r28, 0x01	; 1
}

// Convert an 8-bit value into an 8-bit binary number and print it.
void putBin(uint8_t TXData)
{
  for (char i = 0; i < 8; i++)
    1428:	b1 f7       	brne	.-20     	; 0x1416 <putBin+0x8>
  {
    if ((TXData & 0x01) == 0x01) putChar('1');
    else putChar('0');
    TXData = TXData>>1;
  }
}
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <putLine>:

// Print a string, followed by carriage return and new line.
void putLine(char *TXData)
{
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	ec 01       	movw	r28, r24
  while (*TXData != '\0')
    1436:	89 91       	ld	r24, Y+
    1438:	88 23       	and	r24, r24
    143a:	19 f0       	breq	.+6      	; 0x1442 <putLine+0x12>
  {
    putChar(*(TXData++));
    143c:	0e 94 c4 09 	call	0x1388	; 0x1388 <putChar>
    1440:	fa cf       	rjmp	.-12     	; 0x1436 <putLine+0x6>
  }
  putChar('\n');
    1442:	8a e0       	ldi	r24, 0x0A	; 10
    1444:	0e 94 c4 09 	call	0x1388	; 0x1388 <putChar>
  putChar('\r');
    1448:	8d e0       	ldi	r24, 0x0D	; 13
}
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
  while (*TXData != '\0')
  {
    putChar(*(TXData++));
  }
  putChar('\n');
  putChar('\r');
    144e:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <putChar>

00001452 <serialBufferPop>:

// Grab the top byte off the serial FIFO and return it, adjusting the pointers
//  and size of the FIFO accordingly.
char serialBufferPop(void)
{
  bufferSize--;
    1452:	80 91 07 01 	lds	r24, 0x0107
    1456:	81 50       	subi	r24, 0x01	; 1
    1458:	80 93 07 01 	sts	0x0107, r24
  char retVal = rxRingBuffer[rxRingTail++];
    145c:	80 91 03 01 	lds	r24, 0x0103
    1460:	90 91 04 01 	lds	r25, 0x0104
    1464:	9c 01       	movw	r18, r24
    1466:	2f 5f       	subi	r18, 0xFF	; 255
    1468:	3f 4f       	sbci	r19, 0xFF	; 255
    146a:	30 93 04 01 	sts	0x0104, r19
    146e:	20 93 03 01 	sts	0x0103, r18
    1472:	fc 01       	movw	r30, r24
    1474:	e0 5f       	subi	r30, 0xF0	; 240
    1476:	fe 4f       	sbci	r31, 0xFE	; 254
    1478:	80 81       	ld	r24, Z
  if (rxRingTail == BUF_DEPTH) rxRingTail = 0;
    147a:	20 91 03 01 	lds	r18, 0x0103
    147e:	30 91 04 01 	lds	r19, 0x0104
    1482:	21 15       	cp	r18, r1
    1484:	31 40       	sbci	r19, 0x01	; 1
    1486:	21 f4       	brne	.+8      	; 0x1490 <serialBufferPop+0x3e>
    1488:	10 92 04 01 	sts	0x0104, r1
    148c:	10 92 03 01 	sts	0x0103, r1
  return retVal;
}
    1490:	08 95       	ret

00001492 <clearBuffer>:

// Clear the FIFO buffer. Note that this doesn't actually delete the info in
//  the buffer, it just resets the size and the pointers.
void clearBuffer(void)
{
  bufferSize = 0;
    1492:	10 92 07 01 	sts	0x0107, r1
  rxRingTail = 0;
    1496:	10 92 04 01 	sts	0x0104, r1
    149a:	10 92 03 01 	sts	0x0103, r1
  rxRingHead = 0;
    149e:	10 92 06 01 	sts	0x0106, r1
    14a2:	10 92 05 01 	sts	0x0105, r1
    14a6:	08 95       	ret

000014a8 <__vector_18>:
//  for the FIFO we use to store incoming commands. Note that there is no
//  overflow; that might be a nice touch but so far, I haven't even come close
//  to hitting the buffer depth. In fact, I've never exceeded a depth of more
//  than two or three bytes.
ISR(USART_RX_vect)
{
    14a8:	1f 92       	push	r1
    14aa:	0f 92       	push	r0
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	0f 92       	push	r0
    14b0:	11 24       	eor	r1, r1
    14b2:	2f 93       	push	r18
    14b4:	3f 93       	push	r19
    14b6:	8f 93       	push	r24
    14b8:	9f 93       	push	r25
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
	if (rxRingHead == BUF_DEPTH) rxRingHead = 0;
    14be:	80 91 05 01 	lds	r24, 0x0105
    14c2:	90 91 06 01 	lds	r25, 0x0106
    14c6:	81 15       	cp	r24, r1
    14c8:	91 40       	sbci	r25, 0x01	; 1
    14ca:	21 f4       	brne	.+8      	; 0x14d4 <__vector_18+0x2c>
    14cc:	10 92 06 01 	sts	0x0106, r1
    14d0:	10 92 05 01 	sts	0x0105, r1
	bufferSize++;
    14d4:	80 91 07 01 	lds	r24, 0x0107
    14d8:	8f 5f       	subi	r24, 0xFF	; 255
    14da:	80 93 07 01 	sts	0x0107, r24
	rxRingBuffer[rxRingHead++] = UDR0;
    14de:	80 91 05 01 	lds	r24, 0x0105
    14e2:	90 91 06 01 	lds	r25, 0x0106
    14e6:	9c 01       	movw	r18, r24
    14e8:	2f 5f       	subi	r18, 0xFF	; 255
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	30 93 06 01 	sts	0x0106, r19
    14f0:	20 93 05 01 	sts	0x0105, r18
    14f4:	20 91 c6 00 	lds	r18, 0x00C6
    14f8:	fc 01       	movw	r30, r24
    14fa:	e0 5f       	subi	r30, 0xF0	; 240
    14fc:	fe 4f       	sbci	r31, 0xFE	; 254
    14fe:	20 83       	st	Z, r18
}
    1500:	ff 91       	pop	r31
    1502:	ef 91       	pop	r30
    1504:	9f 91       	pop	r25
    1506:	8f 91       	pop	r24
    1508:	3f 91       	pop	r19
    150a:	2f 91       	pop	r18
    150c:	0f 90       	pop	r0
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	0f 90       	pop	r0
    1512:	1f 90       	pop	r1
    1514:	18 95       	reti

00001516 <ks0108bReset>:
// ks0108bReset()- pretty self explanatory, but I'm not really sure what
//  the point of twiddling the reset line is, as it doesn't seem to really
//  *reset* anything on the display. Makes us feel good, though.
void ks0108bReset(void)
{
  PORTC &= ~(1<<RESET);
    1516:	43 98       	cbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1518:	2f ef       	ldi	r18, 0xFF	; 255
    151a:	80 e7       	ldi	r24, 0x70	; 112
    151c:	92 e0       	ldi	r25, 0x02	; 2
    151e:	21 50       	subi	r18, 0x01	; 1
    1520:	80 40       	sbci	r24, 0x00	; 0
    1522:	90 40       	sbci	r25, 0x00	; 0
    1524:	e1 f7       	brne	.-8      	; 0x151e <ks0108bReset+0x8>
    1526:	00 c0       	rjmp	.+0      	; 0x1528 <ks0108bReset+0x12>
    1528:	00 00       	nop
  _delay_ms(50);
  PORTC |= (1<<RESET);
    152a:	43 9a       	sbi	0x08, 3	; 8
    152c:	2f ef       	ldi	r18, 0xFF	; 255
    152e:	80 e7       	ldi	r24, 0x70	; 112
    1530:	92 e0       	ldi	r25, 0x02	; 2
    1532:	21 50       	subi	r18, 0x01	; 1
    1534:	80 40       	sbci	r24, 0x00	; 0
    1536:	90 40       	sbci	r25, 0x00	; 0
    1538:	e1 f7       	brne	.-8      	; 0x1532 <ks0108bReset+0x1c>
    153a:	00 c0       	rjmp	.+0      	; 0x153c <ks0108bReset+0x26>
    153c:	00 00       	nop
    153e:	08 95       	ret

00001540 <strobeEN>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1540:	8a e1       	ldi	r24, 0x1A	; 26
    1542:	8a 95       	dec	r24
    1544:	f1 f7       	brne	.-4      	; 0x1542 <strobeEN+0x2>
    1546:	00 c0       	rjmp	.+0      	; 0x1548 <strobeEN+0x8>
// I found myself typing these lines over and over, so I made them a little
//  function of their very own.
void strobeEN(void)
{
  _delay_us(E_DELAY);
  PORTC |= (1<<EN);        // Set EN (Indicate data ready)
    1548:	40 9a       	sbi	0x08, 0	; 8
    154a:	8a e1       	ldi	r24, 0x1A	; 26
    154c:	8a 95       	dec	r24
    154e:	f1 f7       	brne	.-4      	; 0x154c <strobeEN+0xc>
    1550:	00 c0       	rjmp	.+0      	; 0x1552 <strobeEN+0x12>
  _delay_us(E_DELAY);
  PORTC &= ~(1 << EN);      // Clear EN (Activate write)
    1552:	40 98       	cbi	0x08, 0	; 8
    1554:	8a e1       	ldi	r24, 0x1A	; 26
    1556:	8a 95       	dec	r24
    1558:	f1 f7       	brne	.-4      	; 0x1556 <strobeEN+0x16>
    155a:	00 c0       	rjmp	.+0      	; 0x155c <strobeEN+0x1c>
    155c:	08 95       	ret

0000155e <setPinsDefault>:
// Everytime we finish up a transfer, we want to reset the pins to a default
//  state. This state is all pins high EXCEPT EN. We want to leave EN low
//  until we need to twiddle it.
void setPinsDefault(void)
{
  PORTC |= (  (1<<RS)| 
    155e:	88 b1       	in	r24, 0x08	; 8
    1560:	86 63       	ori	r24, 0x36	; 54
    1562:	88 b9       	out	0x08, r24	; 8
              (1<<CS1)|
              (1<<CS2)|
              (1<<R_W));
  PORTC &= ~(1<<EN);
    1564:	40 98       	cbi	0x08, 0	; 8
    1566:	08 95       	ret

00001568 <ks0108bDisplayOn>:

// Enable the display. Should only need to do this at startup time.
void ks0108bDisplayOn(void)
{
  // Data lines should be 0x3F for display enable.
  PORTC &= ~( (1<<R_W)|      // Clear R_W (Write mode)
    1568:	88 b1       	in	r24, 0x08	; 8
    156a:	89 7f       	andi	r24, 0xF9	; 249
    156c:	88 b9       	out	0x08, r24	; 8
              (1<<RS));      // Clear RS (Instruction mode)
  setData(0x3F);
    156e:	8f e3       	ldi	r24, 0x3F	; 63
    1570:	0e 94 fe 10 	call	0x21fc	; 0x21fc <setData>
  strobeEN();
    1574:	0e 94 a0 0a 	call	0x1540	; 0x1540 <strobeEN>
  hiZDataPins();     // Avoid bus contention with the ks0108b driver.
    1578:	0e 94 20 11 	call	0x2240	; 0x2240 <hiZDataPins>
  setPinsDefault();
    157c:	0c 94 af 0a 	jmp	0x155e	; 0x155e <setPinsDefault>

00001580 <ks0108bSetStartLine>:
// It's possible, if kinda weird, to tell the ks0108b that the start line is
//  not the top line of the display. We're not going to truck with that crap-
//  we'll just start at the top and call it good.
void ks0108bSetStartLine(void)
{
  PORTC &= ~( (1<<CS1)| // Let's hit both chips.
    1580:	88 b1       	in	r24, 0x08	; 8
    1582:	89 7c       	andi	r24, 0xC9	; 201
    1584:	88 b9       	out	0x08, r24	; 8
              (1<<CS2)|
              (1<<R_W)|  // Clear R_W (Write mode)
              (1<<RS));  // Clear RS (Register select for
                         //  enable register)
  // Data lines should be 0xC0 for set start line to 0.
  setData(0xC0);
    1586:	80 ec       	ldi	r24, 0xC0	; 192
    1588:	0e 94 fe 10 	call	0x21fc	; 0x21fc <setData>
  strobeEN();
    158c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <strobeEN>
  hiZDataPins();     // Avoid bus contention with the ks0108b driver.
    1590:	0e 94 20 11 	call	0x2240	; 0x2240 <hiZDataPins>
  setPinsDefault();
    1594:	0c 94 af 0a 	jmp	0x155e	; 0x155e <setPinsDefault>

00001598 <ks0108bSetColumn>:
//  which half of the screen we're on in the next stage or our operation- that
//  will determine which chip select line we need to assert, since we don't
//  need to assert a CS line here (it wouldn't help anyway).
void ks0108bSetColumn(uint8_t address)
{  
  PORTC &= ~( (1<<R_W)|
    1598:	98 b1       	in	r25, 0x08	; 8
    159a:	99 7f       	andi	r25, 0xF9	; 249
    159c:	98 b9       	out	0x08, r25	; 8
              (1<<RS));
  // For Y writes, bits 7:6 of the data bus should be set to 01. We should
  //  just make sure that's done before we do anything else...
  column = address;
    159e:	80 93 09 01 	sts	0x0109, r24
  address = (address | 0x40) & 0x7F;
    15a2:	8f 73       	andi	r24, 0x3F	; 63
  setData(address);
    15a4:	80 64       	ori	r24, 0x40	; 64
    15a6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <setData>
  strobeEN();
    15aa:	0e 94 a0 0a 	call	0x1540	; 0x1540 <strobeEN>
  hiZDataPins();     // Avoid bus contention with the ks0108b driver.
    15ae:	0e 94 20 11 	call	0x2240	; 0x2240 <hiZDataPins>
  setPinsDefault();
    15b2:	0c 94 af 0a 	jmp	0x155e	; 0x155e <setPinsDefault>

000015b6 <ks0108bSetPage>:
//  halves of the screen on the same page, so writes that proceed across from
//  L to R can continue across the page boundary without interruption.
void ks0108bSetPage(uint8_t address)
{  
  // Now, on to the actual port manipulations needed to make this happen.
  PORTC &= ~( (1<<R_W)|      // Clear R_W (Write mode)
    15b6:	98 b1       	in	r25, 0x08	; 8
    15b8:	99 7f       	andi	r25, 0xF9	; 249
    15ba:	98 b9       	out	0x08, r25	; 8
              (1<<RS));      // Clear RS (Register select for
                             //  address registers)
  // For X writes, bits 7:3 of the data bus should be set to 10111. We should
  //  just make sure that's done before we do anything else...
  address = (address | 0xB8) & 0xBF;
    15bc:	87 70       	andi	r24, 0x07	; 7
  setData(address);
    15be:	88 6b       	ori	r24, 0xB8	; 184
    15c0:	0e 94 fe 10 	call	0x21fc	; 0x21fc <setData>
  strobeEN();
    15c4:	0e 94 a0 0a 	call	0x1540	; 0x1540 <strobeEN>
  hiZDataPins();     // Avoid bus contention with the ks0108b driver.
    15c8:	0e 94 20 11 	call	0x2240	; 0x2240 <hiZDataPins>
  setPinsDefault();
    15cc:	0c 94 af 0a 	jmp	0x155e	; 0x155e <setPinsDefault>

000015d0 <ks0108bWriteData>:
void ks0108bWriteData(uint8_t data)
{  
  // By tracking what column we're writing to, we can avoid having to
  //  do any weird "which side am I on" logic, keeping the interface more
  //  intuitive.
  if (column < 64)   PORTC &= ~( (1<<CS1) |
    15d0:	90 91 09 01 	lds	r25, 0x0109
    15d4:	90 34       	cpi	r25, 0x40	; 64
    15d6:	18 f4       	brcc	.+6      	; 0x15de <ks0108bWriteData+0xe>
    15d8:	98 b1       	in	r25, 0x08	; 8
    15da:	9b 7e       	andi	r25, 0xEB	; 235
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <ks0108bWriteData+0x12>
                                 (1<<R_W));
  else               PORTC &= ~( (1<<CS2) |
    15de:	98 b1       	in	r25, 0x08	; 8
    15e0:	9b 7d       	andi	r25, 0xDB	; 219
    15e2:	98 b9       	out	0x08, r25	; 8
                                 (1<<R_W));
  
  // setData() is a function which abstracts the fact that the data lines
  //  to the LCD are not on the same port.
  setData(data);
    15e4:	0e 94 fe 10 	call	0x21fc	; 0x21fc <setData>
  
  strobeEN();        // Twiddle EN to latch the data.
    15e8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <strobeEN>
  hiZDataPins();     // Avoid bus contention with the ks0108b driver.
    15ec:	0e 94 20 11 	call	0x2240	; 0x2240 <hiZDataPins>
  setPinsDefault();
    15f0:	0e 94 af 0a 	call	0x155e	; 0x155e <setPinsDefault>
  //  internal pointer to increment. We need to update our pointer to
  //  account for that, but if the update pushes our pointer past the
  //  edge, we want to wrap back around. The display doesn't handle
  //  wrapping automatically, so we need to wrap it manually with the
  //  set column function.
  if (++column > 127) 
    15f4:	80 91 09 01 	lds	r24, 0x0109
    15f8:	8f 5f       	subi	r24, 0xFF	; 255
    15fa:	87 fd       	sbrc	r24, 7
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <ks0108bWriteData+0x34>
    15fe:	80 93 09 01 	sts	0x0109, r24
    1602:	08 95       	ret
  {
    column = 0;
    1604:	10 92 09 01 	sts	0x0109, r1
    ks0108bSetColumn(0);
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <ks0108bSetColumn>

0000160e <ks0108bClear>:
  return data;
}

// Clear is janky- set x and y to zero and write across the screen.
void ks0108bClear(void)
{
    160e:	1f 93       	push	r17
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
  uint8_t clearVal = 0;
  if (reverse == 1) clearVal = 0xFF;
    1614:	90 91 02 01 	lds	r25, 0x0102
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	91 30       	cpi	r25, 0x01	; 1
    161c:	09 f0       	breq	.+2      	; 0x1620 <ks0108bClear+0x12>
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	18 2f       	mov	r17, r24
    1622:	11 95       	neg	r17
  for (uint8_t y = 0; y<8; y++)
    1624:	c0 e0       	ldi	r28, 0x00	; 0
  {
    ks0108bSetPage(y);
    1626:	8c 2f       	mov	r24, r28
    1628:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <ks0108bSetPage>
    ks0108bSetColumn(0);
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <ks0108bSetColumn>
    for (uint8_t x = 0; x<128; x++)
    1632:	d0 e0       	ldi	r29, 0x00	; 0
    {
      ks0108bWriteData(clearVal);
    1634:	81 2f       	mov	r24, r17
    1636:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <ks0108bWriteData>
  if (reverse == 1) clearVal = 0xFF;
  for (uint8_t y = 0; y<8; y++)
  {
    ks0108bSetPage(y);
    ks0108bSetColumn(0);
    for (uint8_t x = 0; x<128; x++)
    163a:	df 5f       	subi	r29, 0xFF	; 255
    163c:	d0 38       	cpi	r29, 0x80	; 128
    163e:	d1 f7       	brne	.-12     	; 0x1634 <ks0108bClear+0x26>
// Clear is janky- set x and y to zero and write across the screen.
void ks0108bClear(void)
{
  uint8_t clearVal = 0;
  if (reverse == 1) clearVal = 0xFF;
  for (uint8_t y = 0; y<8; y++)
    1640:	cf 5f       	subi	r28, 0xFF	; 255
    1642:	c8 30       	cpi	r28, 0x08	; 8
    1644:	81 f7       	brne	.-32     	; 0x1626 <ks0108bClear+0x18>
    for (uint8_t x = 0; x<128; x++)
    {
      ks0108bWriteData(clearVal);
    }
  }
  ks0108bSetPage(0);
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <ks0108bSetPage>
  ks0108bSetColumn(0);
    164c:	80 e0       	ldi	r24, 0x00	; 0
}
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    {
      ks0108bWriteData(clearVal);
    }
  }
  ks0108bSetPage(0);
  ks0108bSetColumn(0);
    1654:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <ks0108bSetColumn>

00001658 <ks0108bReadData>:
//   3. Pull EN low.
//   4. Pull EN high.
//   5. Data is available to be read.
//   6. Reset signal lines to rest state.
uint8_t ks0108bReadData(uint8_t x)
{  
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	1f 92       	push	r1
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
  uint8_t data;
  
  if (x<64)  // Are we on the left half of the display?
    1662:	80 34       	cpi	r24, 0x40	; 64
    1664:	10 f4       	brcc	.+4      	; 0x166a <ks0108bReadData+0x12>
  {  
    PORTC &= ~(1<<CS1);
    1666:	44 98       	cbi	0x08, 4	; 8
    1668:	01 c0       	rjmp	.+2      	; 0x166c <ks0108bReadData+0x14>
  }
  else       // Or the right half of the display?
  {  
    PORTC &= ~(1<<CS2);
    166a:	45 98       	cbi	0x08, 5	; 8
    166c:	85 e3       	ldi	r24, 0x35	; 53
    166e:	8a 95       	dec	r24
    1670:	f1 f7       	brne	.-4      	; 0x166e <ks0108bReadData+0x16>
    1672:	00 00       	nop
  }
  // The number of twiddles of EN is...bizarre. This was established via
  //  experimentation, rather than through any actual data sheet content.
  _delay_us(R_DELAY);
  PORTC |= (1<<EN);
    1674:	40 9a       	sbi	0x08, 0	; 8
    1676:	95 e3       	ldi	r25, 0x35	; 53
    1678:	9a 95       	dec	r25
    167a:	f1 f7       	brne	.-4      	; 0x1678 <ks0108bReadData+0x20>
    167c:	00 00       	nop
  _delay_us(R_DELAY);
  PORTC &= ~(1<<EN);
    167e:	40 98       	cbi	0x08, 0	; 8
    1680:	e5 e3       	ldi	r30, 0x35	; 53
    1682:	ea 95       	dec	r30
    1684:	f1 f7       	brne	.-4      	; 0x1682 <ks0108bReadData+0x2a>
    1686:	00 00       	nop
  _delay_us(R_DELAY);
  PORTC |= (1<<EN);  
    1688:	40 9a       	sbi	0x08, 0	; 8
    168a:	f5 e3       	ldi	r31, 0x35	; 53
    168c:	fa 95       	dec	r31
    168e:	f1 f7       	brne	.-4      	; 0x168c <ks0108bReadData+0x34>
    1690:	00 00       	nop
  _delay_us(R_DELAY);
  data = readData();  
    1692:	0e 94 14 11 	call	0x2228	; 0x2228 <readData>
  PORTC &= ~(1<<EN);
    1696:	40 98       	cbi	0x08, 0	; 8
    1698:	95 e3       	ldi	r25, 0x35	; 53
    169a:	9a 95       	dec	r25
    169c:	f1 f7       	brne	.-4      	; 0x169a <ks0108bReadData+0x42>
    169e:	00 00       	nop
  _delay_us(R_DELAY);
  setPinsDefault();
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	0e 94 af 0a 	call	0x155e	; 0x155e <setPinsDefault>
  return data;
}
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	0f 90       	pop	r0
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	08 95       	ret

000016b0 <ks0108bReadBlock>:

// ks0108bReadBlock()- reads an 8x8 block of arbitrary pixels from the display.
//  The block may be split across more than one page, so we'll need to buffer
//  from up to two pages, then do some shifting.
void ks0108bReadBlock(uint8_t x, uint8_t y, uint8_t *buffer)
{
    16b0:	9f 92       	push	r9
    16b2:	af 92       	push	r10
    16b4:	bf 92       	push	r11
    16b6:	cf 92       	push	r12
    16b8:	df 92       	push	r13
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	d8 2e       	mov	r13, r24
    16c8:	b4 2e       	mov	r11, r20
    16ca:	c5 2e       	mov	r12, r21
  uint8_t firstRowPixels, secondRowPixels;
  // If y is NOT divisible by 8, then y%8 pixels are on the first line,
  //  and 8-y%8 pixels are on the second line.
  firstRowPixels = y%8;
    16cc:	86 2f       	mov	r24, r22
    16ce:	87 70       	andi	r24, 0x07	; 7
    16d0:	98 2e       	mov	r9, r24
  secondRowPixels = 8 - (y%8);
    16d2:	88 e0       	ldi	r24, 0x08	; 8
    16d4:	e8 2e       	mov	r14, r24
    16d6:	e9 18       	sub	r14, r9
  // Okay, now we know how many pixels are in each row. Now let's pull the
  //  data from those two rows.
  ks0108bSetPage(y/8);
    16d8:	a6 2e       	mov	r10, r22
    16da:	a6 94       	lsr	r10
    16dc:	a6 94       	lsr	r10
    16de:	a6 94       	lsr	r10
    16e0:	8a 2d       	mov	r24, r10
    16e2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <ks0108bSetPage>
    16e6:	cb 2d       	mov	r28, r11
    16e8:	dc 2d       	mov	r29, r12
  for (uint8_t i = 0; i<8; i++)
    16ea:	f1 2c       	mov	r15, r1
  {
    // Fetch the data and left-shift it so the topmost pixel of the group
    //  we're interested in is the MSB.
    buffer[i] = ks0108bReadData(x+i)<<(8-firstRowPixels);
    16ec:	08 e0       	ldi	r16, 0x08	; 8
    16ee:	10 e0       	ldi	r17, 0x00	; 0
    16f0:	09 19       	sub	r16, r9
    16f2:	11 09       	sbc	r17, r1
    16f4:	8f 2d       	mov	r24, r15
    16f6:	8d 0d       	add	r24, r13
    16f8:	0e 94 2c 0b 	call	0x1658	; 0x1658 <ks0108bReadData>
    16fc:	00 2e       	mov	r0, r16
    16fe:	01 c0       	rjmp	.+2      	; 0x1702 <ks0108bReadBlock+0x52>
    1700:	88 0f       	add	r24, r24
    1702:	0a 94       	dec	r0
    1704:	ea f7       	brpl	.-6      	; 0x1700 <ks0108bReadBlock+0x50>
    1706:	89 93       	st	Y+, r24
  firstRowPixels = y%8;
  secondRowPixels = 8 - (y%8);
  // Okay, now we know how many pixels are in each row. Now let's pull the
  //  data from those two rows.
  ks0108bSetPage(y/8);
  for (uint8_t i = 0; i<8; i++)
    1708:	f3 94       	inc	r15
    170a:	88 e0       	ldi	r24, 0x08	; 8
    170c:	f8 12       	cpse	r15, r24
    170e:	f2 cf       	rjmp	.-28     	; 0x16f4 <ks0108bReadBlock+0x44>
  {
    // Fetch the data and left-shift it so the topmost pixel of the group
    //  we're interested in is the MSB.
    buffer[i] = ks0108bReadData(x+i)<<(8-firstRowPixels);
  }
  ks0108bSetPage((y/8) + 1);
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	8a 0d       	add	r24, r10
    1714:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <ks0108bSetPage>
    1718:	cb 2d       	mov	r28, r11
    171a:	dc 2d       	mov	r29, r12
  for (uint8_t i = 0; i<8; i++)
    171c:	f1 2c       	mov	r15, r1
  {
    buffer[i] |= ks0108bReadData(x+i)>>(8-secondRowPixels);
    171e:	08 e0       	ldi	r16, 0x08	; 8
    1720:	10 e0       	ldi	r17, 0x00	; 0
    1722:	0e 19       	sub	r16, r14
    1724:	11 09       	sbc	r17, r1
    1726:	e8 80       	ld	r14, Y
    1728:	8f 2d       	mov	r24, r15
    172a:	8d 0d       	add	r24, r13
    172c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <ks0108bReadData>
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	00 2e       	mov	r0, r16
    1736:	02 c0       	rjmp	.+4      	; 0x173c <ks0108bReadBlock+0x8c>
    1738:	35 95       	asr	r19
    173a:	27 95       	ror	r18
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <ks0108bReadBlock+0x88>
    1740:	2e 29       	or	r18, r14
    1742:	29 93       	st	Y+, r18
    // Fetch the data and left-shift it so the topmost pixel of the group
    //  we're interested in is the MSB.
    buffer[i] = ks0108bReadData(x+i)<<(8-firstRowPixels);
  }
  ks0108bSetPage((y/8) + 1);
  for (uint8_t i = 0; i<8; i++)
    1744:	f3 94       	inc	r15
    1746:	88 e0       	ldi	r24, 0x08	; 8
    1748:	f8 12       	cpse	r15, r24
    174a:	ed cf       	rjmp	.-38     	; 0x1726 <ks0108bReadBlock+0x76>
  {
    buffer[i] |= ks0108bReadData(x+i)>>(8-secondRowPixels);
  }
}
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	ff 90       	pop	r15
    1756:	ef 90       	pop	r14
    1758:	df 90       	pop	r13
    175a:	cf 90       	pop	r12
    175c:	bf 90       	pop	r11
    175e:	af 90       	pop	r10
    1760:	9f 90       	pop	r9
    1762:	08 95       	ret

00001764 <ks0108bDrawPixel>:
// This is the display-specific pixel draw command. Pretty simple- located the
//  pixel's row and column, read the existing data, twiddle the single pixel
//  according to what we want it to end up being, then re-write the whole
//  byte.
void ks0108bDrawPixel(uint8_t x, uint8_t y, PIX_VAL pixel)
{
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	1f 92       	push	r1
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	18 2f       	mov	r17, r24
    1774:	06 2f       	mov	r16, r22
  ks0108bSetColumn(x);  // x is simple; it's just the x coordinate.
    1776:	49 83       	std	Y+1, r20	; 0x01
    1778:	0e 94 cc 0a 	call	0x1598	; 0x1598 <ks0108bSetColumn>
  ks0108bSetPage(y/8);  // y is less simple; we need to find the page that the
    177c:	80 2f       	mov	r24, r16
    177e:	86 95       	lsr	r24
    1780:	86 95       	lsr	r24
    1782:	86 95       	lsr	r24
    1784:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <ks0108bSetPage>
                        //  pixel in question resides on.
  uint8_t currentPixelData = ks0108bReadData(x);  // fetch the existing state
    1788:	81 2f       	mov	r24, r17
    178a:	0e 94 2c 0b 	call	0x1658	; 0x1658 <ks0108bReadData>
    178e:	98 2f       	mov	r25, r24
  uint8_t pixelToWrite = (y%8);  // determine which pixel to write
    1790:	60 2f       	mov	r22, r16
    1792:	67 70       	andi	r22, 0x07	; 7
  // This section handles the specifics- do we want to turn the pixel on or
  //  off? The dark-on-white mode status factors into that, as does the user's
  //  command.
  if (reverse == 0)
    1794:	80 91 02 01 	lds	r24, 0x0102
    1798:	49 81       	ldd	r20, Y+1	; 0x01
  {
    if (pixel == ON) currentPixelData |= (1<<pixelToWrite);
    179a:	21 e0       	ldi	r18, 0x01	; 1
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	06 2e       	mov	r0, r22
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <ks0108bDrawPixel+0x40>
    17a2:	22 0f       	add	r18, r18
    17a4:	0a 94       	dec	r0
    17a6:	ea f7       	brpl	.-6      	; 0x17a2 <ks0108bDrawPixel+0x3e>
  uint8_t currentPixelData = ks0108bReadData(x);  // fetch the existing state
  uint8_t pixelToWrite = (y%8);  // determine which pixel to write
  // This section handles the specifics- do we want to turn the pixel on or
  //  off? The dark-on-white mode status factors into that, as does the user's
  //  command.
  if (reverse == 0)
    17a8:	81 11       	cpse	r24, r1
    17aa:	03 c0       	rjmp	.+6      	; 0x17b2 <ks0108bDrawPixel+0x4e>
  {
    if (pixel == ON) currentPixelData |= (1<<pixelToWrite);
    17ac:	41 11       	cpse	r20, r1
    17ae:	05 c0       	rjmp	.+10     	; 0x17ba <ks0108bDrawPixel+0x56>
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <ks0108bDrawPixel+0x52>
    else       currentPixelData &= ~(1<<pixelToWrite);
  }
  else
  {
    if (pixel == OFF) currentPixelData |= (1<<pixelToWrite);
    17b2:	41 30       	cpi	r20, 0x01	; 1
    17b4:	11 f4       	brne	.+4      	; 0x17ba <ks0108bDrawPixel+0x56>
    17b6:	29 2b       	or	r18, r25
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <ks0108bDrawPixel+0x5a>
    else       currentPixelData &= ~(1<<pixelToWrite);
    17ba:	20 95       	com	r18
    17bc:	29 23       	and	r18, r25
  }
  // Now we need to go back to the original column- the read incremented the
  //  address counter- and write the changed value back to the display.
  ks0108bSetColumn(x);
    17be:	81 2f       	mov	r24, r17
    17c0:	29 83       	std	Y+1, r18	; 0x01
    17c2:	0e 94 cc 0a 	call	0x1598	; 0x1598 <ks0108bSetColumn>
  ks0108bWriteData(currentPixelData);
    17c6:	29 81       	ldd	r18, Y+1	; 0x01
    17c8:	82 2f       	mov	r24, r18
}
    17ca:	0f 90       	pop	r0
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    else       currentPixelData &= ~(1<<pixelToWrite);
  }
  // Now we need to go back to the original column- the read incremented the
  //  address counter- and write the changed value back to the display.
  ks0108bSetColumn(x);
  ks0108bWriteData(currentPixelData);
    17d4:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <ks0108bWriteData>

000017d8 <lcdConfig>:

// Configure functions for the two display types. The details are in the
//  appropriate driver files.
void lcdConfig(void)
{
  if (display == SMALL)
    17d8:	80 91 08 01 	lds	r24, 0x0108
    17dc:	81 11       	cpse	r24, r1
    17de:	0b c0       	rjmp	.+22     	; 0x17f6 <lcdConfig+0x1e>
  {
    ks0108bReset();
    17e0:	0e 94 8b 0a 	call	0x1516	; 0x1516 <ks0108bReset>
    ks0108bDisplayOn();
    17e4:	0e 94 b4 0a 	call	0x1568	; 0x1568 <ks0108bDisplayOn>
    ks0108bClear();
    17e8:	0e 94 07 0b 	call	0x160e	; 0x160e <ks0108bClear>
    xDim = 128;
    17ec:	80 e8       	ldi	r24, 0x80	; 128
    17ee:	80 93 01 01 	sts	0x0101, r24
    yDim = 64;
    17f2:	80 e4       	ldi	r24, 0x40	; 64
    17f4:	06 c0       	rjmp	.+12     	; 0x1802 <lcdConfig+0x2a>
  }
  else
  {
    t6963DisplayInit();
    17f6:	0e 94 03 09 	call	0x1206	; 0x1206 <t6963DisplayInit>
    xDim = 160;
    17fa:	80 ea       	ldi	r24, 0xA0	; 160
    17fc:	80 93 01 01 	sts	0x0101, r24
    yDim = 128;
    1800:	80 e8       	ldi	r24, 0x80	; 128
    1802:	80 93 00 01 	sts	0x0100, r24
    1806:	08 95       	ret

00001808 <lcdClearScreen>:
}

// Reset our text mode, then call the driver specific clear screen command.
void lcdClearScreen(void)
{
  cursorPos[0] = textOrigin[0];
    1808:	80 91 0c 01 	lds	r24, 0x010C
    180c:	80 93 0e 01 	sts	0x010E, r24
  cursorPos[1] = textOrigin[1];
    1810:	80 91 0d 01 	lds	r24, 0x010D
    1814:	80 93 0f 01 	sts	0x010F, r24
  textLength = 0;
    1818:	10 92 0b 01 	sts	0x010B, r1
    181c:	10 92 0a 01 	sts	0x010A, r1
  if (display == SMALL)	ks0108bClear();
    1820:	80 91 08 01 	lds	r24, 0x0108
    1824:	81 11       	cpse	r24, r1
    1826:	02 c0       	rjmp	.+4      	; 0x182c <lcdClearScreen+0x24>
    1828:	0c 94 07 0b 	jmp	0x160e	; 0x160e <ks0108bClear>
  else t6963Clear();
    182c:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <t6963Clear>

00001830 <lcdDrawPixel>:
//  commands. We gate the draw to save time- no point in drawing a pixel that
//  is outside the display area, which can happen in the case of large
//  circles or lines or boxes.
void lcdDrawPixel(uint8_t x, uint8_t y, PIX_VAL pixel)
{
	if (display == SMALL)
    1830:	90 91 08 01 	lds	r25, 0x0108
    1834:	91 11       	cpse	r25, r1
    1836:	0a c0       	rjmp	.+20     	; 0x184c <lcdDrawPixel+0x1c>
	{
		if (x<xDim && y<yDim) ks0108bDrawPixel(x, y, pixel);
    1838:	90 91 01 01 	lds	r25, 0x0101
    183c:	89 17       	cp	r24, r25
    183e:	90 f4       	brcc	.+36     	; 0x1864 <lcdDrawPixel+0x34>
    1840:	90 91 00 01 	lds	r25, 0x0100
    1844:	69 17       	cp	r22, r25
    1846:	70 f4       	brcc	.+28     	; 0x1864 <lcdDrawPixel+0x34>
    1848:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <ks0108bDrawPixel>
	}
  else if (display == LARGE)
    184c:	91 30       	cpi	r25, 0x01	; 1
    184e:	51 f4       	brne	.+20     	; 0x1864 <lcdDrawPixel+0x34>
  {
    if (x<xDim && y<yDim) t6963DrawPixel(x, y, pixel);
    1850:	90 91 01 01 	lds	r25, 0x0101
    1854:	89 17       	cp	r24, r25
    1856:	30 f4       	brcc	.+12     	; 0x1864 <lcdDrawPixel+0x34>
    1858:	90 91 00 01 	lds	r25, 0x0100
    185c:	69 17       	cp	r22, r25
    185e:	10 f4       	brcc	.+4      	; 0x1864 <lcdDrawPixel+0x34>
    1860:	0c 94 1f 09 	jmp	0x123e	; 0x123e <t6963DrawPixel>
    1864:	08 95       	ret

00001866 <lcdDrawLine>:
 // This code adopted from code originally posted to codekeep.net
 //	 (http://www.codekeep.net/snippets/e39b2d9e-0843-4405-8e31-44e212ca1c45.aspx)
 //	 by Woon Khang Tang on 1/29/2009.
 
void lcdDrawLine(uint8_t p1x, uint8_t p1y, uint8_t p2x, uint8_t p2y, PIX_VAL pixel)
{
    1866:	2f 92       	push	r2
    1868:	3f 92       	push	r3
    186a:	4f 92       	push	r4
    186c:	5f 92       	push	r5
    186e:	6f 92       	push	r6
    1870:	7f 92       	push	r7
    1872:	8f 92       	push	r8
    1874:	9f 92       	push	r9
    1876:	af 92       	push	r10
    1878:	bf 92       	push	r11
    187a:	cf 92       	push	r12
    187c:	df 92       	push	r13
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	48 2e       	mov	r4, r24
    188c:	56 2e       	mov	r5, r22
    int16_t F, x, y;

    if (p1x > p2x)  // Swap points if p1 is on the right of p2
    188e:	48 17       	cp	r20, r24
    1890:	28 f4       	brcc	.+10     	; 0x189c <lcdDrawLine+0x36>
    {
      x = p1x;
      p1x = p2x;
      p2x = x;
      y = p1y;
      p1y = p2y;
    1892:	52 2e       	mov	r5, r18
      p2y = y;
    1894:	26 2f       	mov	r18, r22
    1896:	84 2d       	mov	r24, r4
    1898:	44 2e       	mov	r4, r20
    189a:	48 2f       	mov	r20, r24
    }

    // Handle trivial cases separately for algorithm speed up.
    // Trivial case 1: m = +/-INF (Vertical line)
    if (p1x == p2x)
    189c:	44 12       	cpse	r4, r20
    189e:	1a c0       	rjmp	.+52     	; 0x18d4 <lcdDrawLine+0x6e>
    {
        if (p1y > p2y)  // Swap y-coordinates if p1 is above p2
    18a0:	25 15       	cp	r18, r5
    18a2:	18 f4       	brcc	.+6      	; 0x18aa <lcdDrawLine+0x44>
    18a4:	85 2d       	mov	r24, r5
    18a6:	52 2e       	mov	r5, r18
    18a8:	28 2f       	mov	r18, r24
          p1y = p2y;
          p2y = y;
        }
        x = p1x;
        y = p1y;
        while (y <= p2y)
    18aa:	c0 e0       	ldi	r28, 0x00	; 0
    18ac:	d0 e0       	ldi	r29, 0x00	; 0
    18ae:	05 2d       	mov	r16, r5
    18b0:	10 e0       	ldi	r17, 0x00	; 0
    18b2:	62 2e       	mov	r6, r18
    18b4:	71 2c       	mov	r7, r1
    18b6:	ce 01       	movw	r24, r28
    18b8:	80 0f       	add	r24, r16
    18ba:	91 1f       	adc	r25, r17
    18bc:	68 16       	cp	r6, r24
    18be:	79 06       	cpc	r7, r25
    18c0:	0c f4       	brge	.+2      	; 0x18c4 <lcdDrawLine+0x5e>
    18c2:	c0 c0       	rjmp	.+384    	; 0x1a44 <lcdDrawLine+0x1de>
    18c4:	6c 2f       	mov	r22, r28
    18c6:	65 0d       	add	r22, r5
        {
          lcdDrawPixel(x, y, ON);
    18c8:	40 e0       	ldi	r20, 0x00	; 0
    18ca:	84 2d       	mov	r24, r4
    18cc:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
    18d0:	21 96       	adiw	r28, 0x01	; 1
    18d2:	f1 cf       	rjmp	.-30     	; 0x18b6 <lcdDrawLine+0x50>
    18d4:	a4 2c       	mov	r10, r4
    18d6:	b1 2c       	mov	r11, r1
    18d8:	84 2e       	mov	r8, r20
    18da:	91 2c       	mov	r9, r1
          y++;
        }
        return;
    }
    // Trivial case 2: m = 0 (Horizontal line)
    else if (p1y == p2y)
    18dc:	52 12       	cpse	r5, r18
    18de:	11 c0       	rjmp	.+34     	; 0x1902 <lcdDrawLine+0x9c>
    {
        x = p1x;
        y = p1y;

        while (x <= p2x)
    18e0:	c0 e0       	ldi	r28, 0x00	; 0
    18e2:	d0 e0       	ldi	r29, 0x00	; 0
    18e4:	ce 01       	movw	r24, r28
    18e6:	8a 0d       	add	r24, r10
    18e8:	9b 1d       	adc	r25, r11
    18ea:	88 16       	cp	r8, r24
    18ec:	99 06       	cpc	r9, r25
    18ee:	0c f4       	brge	.+2      	; 0x18f2 <lcdDrawLine+0x8c>
    18f0:	a9 c0       	rjmp	.+338    	; 0x1a44 <lcdDrawLine+0x1de>
        {
          lcdDrawPixel(x, y, ON);
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	65 2d       	mov	r22, r5
    18f6:	8c 2f       	mov	r24, r28
    18f8:	84 0d       	add	r24, r4
    18fa:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
    18fe:	21 96       	adiw	r28, 0x01	; 1
    1900:	f1 cf       	rjmp	.-30     	; 0x18e4 <lcdDrawLine+0x7e>
          x++;
        }
        return;
    }

    int16_t dy            = p2y - p1y;  // y-increment from p1 to p2
    1902:	62 2e       	mov	r6, r18
    1904:	71 2c       	mov	r7, r1
    1906:	c5 2d       	mov	r28, r5
    1908:	d0 e0       	ldi	r29, 0x00	; 0
    190a:	93 01       	movw	r18, r6
    190c:	2c 1b       	sub	r18, r28
    190e:	3d 0b       	sbc	r19, r29
    int16_t dx            = p2x - p1x;  // x-increment from p1 to p2
    1910:	85 01       	movw	r16, r10
    1912:	a4 01       	movw	r20, r8
    1914:	4a 19       	sub	r20, r10
    1916:	5b 09       	sbc	r21, r11
    int16_t dy2           = (dy << 1);  // dy << 1 == 2*dy
    1918:	69 01       	movw	r12, r18
    191a:	cc 0c       	add	r12, r12
    191c:	dd 1c       	adc	r13, r13
    int16_t dx2           = (dx << 1);
    191e:	7a 01       	movw	r14, r20
    1920:	ee 0c       	add	r14, r14
    1922:	ff 1c       	adc	r15, r15
    int16_t dy2_minus_dx2 = dy2 - dx2;  // precompute constant for speed up
    1924:	16 01       	movw	r2, r12
    int16_t dy2_plus_dx2  = dy2 + dx2;

    if (dy >= 0)    // m >= 0
    1926:	37 fd       	sbrc	r19, 7
    1928:	44 c0       	rjmp	.+136    	; 0x19b2 <lcdDrawLine+0x14c>

    int16_t dy            = p2y - p1y;  // y-increment from p1 to p2
    int16_t dx            = p2x - p1x;  // x-increment from p1 to p2
    int16_t dy2           = (dy << 1);  // dy << 1 == 2*dy
    int16_t dx2           = (dx << 1);
    int16_t dy2_minus_dx2 = dy2 - dx2;  // precompute constant for speed up
    192a:	2e 18       	sub	r2, r14
    192c:	3f 08       	sbc	r3, r15
    int16_t dy2_plus_dx2  = dy2 + dx2;

    if (dy >= 0)    // m >= 0
    {
        // Case 1: 0 <= m <= 1 (Original case)
        if (dy <= dx)   
    192e:	42 17       	cp	r20, r18
    1930:	53 07       	cpc	r21, r19
    1932:	fc f0       	brlt	.+62     	; 0x1972 <lcdDrawLine+0x10c>
        {
		
            F = dy2 - dx;    // initial F
    1934:	86 01       	movw	r16, r12
    1936:	04 1b       	sub	r16, r20
    1938:	15 0b       	sbc	r17, r21

            x = p1x;
            y = p1y;
            while (x <= p2x)
    193a:	e1 2c       	mov	r14, r1
    193c:	f1 2c       	mov	r15, r1
    193e:	c7 01       	movw	r24, r14
    1940:	8a 0d       	add	r24, r10
    1942:	9b 1d       	adc	r25, r11
    1944:	88 16       	cp	r8, r24
    1946:	99 06       	cpc	r9, r25
    1948:	0c f4       	brge	.+2      	; 0x194c <lcdDrawLine+0xe6>
    194a:	7c c0       	rjmp	.+248    	; 0x1a44 <lcdDrawLine+0x1de>
            {
                lcdDrawPixel(x, y, ON);
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	6c 2f       	mov	r22, r28
    1950:	84 2d       	mov	r24, r4
    1952:	8e 0d       	add	r24, r14
    1954:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
                if (F <= 0)
    1958:	10 16       	cp	r1, r16
    195a:	11 06       	cpc	r1, r17
    195c:	1c f0       	brlt	.+6      	; 0x1964 <lcdDrawLine+0xfe>
                {
                    F += dy2;
    195e:	0c 0d       	add	r16, r12
    1960:	1d 1d       	adc	r17, r13
    1962:	03 c0       	rjmp	.+6      	; 0x196a <lcdDrawLine+0x104>
                }
                else
                {
                    y++;
    1964:	21 96       	adiw	r28, 0x01	; 1
                    F += dy2_minus_dx2;
    1966:	02 0d       	add	r16, r2
    1968:	13 1d       	adc	r17, r3
    196a:	8f ef       	ldi	r24, 0xFF	; 255
    196c:	e8 1a       	sub	r14, r24
    196e:	f8 0a       	sbc	r15, r24
    1970:	e6 cf       	rjmp	.-52     	; 0x193e <lcdDrawLine+0xd8>
        }
        // Case 2: 1 < m < INF (Mirror about y=x line
        // replace all dy by dx and dx by dy)
        else
        {
            F = dx2 - dy;    // initial F
    1972:	67 01       	movw	r12, r14
    1974:	c2 1a       	sub	r12, r18
    1976:	d3 0a       	sbc	r13, r19

            y = p1y;
            x = p1x;
            while (y <= p2y)
    1978:	a1 2c       	mov	r10, r1
    197a:	b1 2c       	mov	r11, r1
    197c:	c5 01       	movw	r24, r10
    197e:	8c 0f       	add	r24, r28
    1980:	9d 1f       	adc	r25, r29
    1982:	68 16       	cp	r6, r24
    1984:	79 06       	cpc	r7, r25
    1986:	0c f4       	brge	.+2      	; 0x198a <lcdDrawLine+0x124>
    1988:	5d c0       	rjmp	.+186    	; 0x1a44 <lcdDrawLine+0x1de>
            {
                lcdDrawPixel(x, y, ON);
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	65 2d       	mov	r22, r5
    198e:	6a 0d       	add	r22, r10
    1990:	80 2f       	mov	r24, r16
    1992:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
                if (F <= 0)
    1996:	1c 14       	cp	r1, r12
    1998:	1d 04       	cpc	r1, r13
    199a:	1c f0       	brlt	.+6      	; 0x19a2 <lcdDrawLine+0x13c>
                {
                    F += dx2;
    199c:	ce 0c       	add	r12, r14
    199e:	df 1c       	adc	r13, r15
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <lcdDrawLine+0x144>
                }
                else
                {
                    x++;
    19a2:	0f 5f       	subi	r16, 0xFF	; 255
    19a4:	1f 4f       	sbci	r17, 0xFF	; 255
                    F -= dy2_minus_dx2;
    19a6:	c2 18       	sub	r12, r2
    19a8:	d3 08       	sbc	r13, r3
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	a8 1a       	sub	r10, r24
    19ae:	b8 0a       	sbc	r11, r24
    19b0:	e5 cf       	rjmp	.-54     	; 0x197c <lcdDrawLine+0x116>
    int16_t dy            = p2y - p1y;  // y-increment from p1 to p2
    int16_t dx            = p2x - p1x;  // x-increment from p1 to p2
    int16_t dy2           = (dy << 1);  // dy << 1 == 2*dy
    int16_t dx2           = (dx << 1);
    int16_t dy2_minus_dx2 = dy2 - dx2;  // precompute constant for speed up
    int16_t dy2_plus_dx2  = dy2 + dx2;
    19b2:	2e 0c       	add	r2, r14
    19b4:	3f 1c       	adc	r3, r15
        }
    }
    else    // m < 0
    {
        // Case 3: -1 <= m < 0 (Mirror about x-axis, replace all dy by -dy)
        if (dx >= -dy)
    19b6:	ee 27       	eor	r30, r30
    19b8:	ff 27       	eor	r31, r31
    19ba:	e2 1b       	sub	r30, r18
    19bc:	f3 0b       	sbc	r31, r19
    19be:	4e 17       	cp	r20, r30
    19c0:	5f 07       	cpc	r21, r31
    19c2:	0c f1       	brlt	.+66     	; 0x1a06 <lcdDrawLine+0x1a0>
        {
            F = -dy2 - dx;    // initial F
    19c4:	00 27       	eor	r16, r16
    19c6:	11 27       	eor	r17, r17
    19c8:	0c 19       	sub	r16, r12
    19ca:	1d 09       	sbc	r17, r13
    19cc:	04 1b       	sub	r16, r20
    19ce:	15 0b       	sbc	r17, r21

            x = p1x;
            y = p1y;
            while (x <= p2x)
    19d0:	e1 2c       	mov	r14, r1
    19d2:	f1 2c       	mov	r15, r1
    19d4:	c7 01       	movw	r24, r14
    19d6:	8a 0d       	add	r24, r10
    19d8:	9b 1d       	adc	r25, r11
    19da:	88 16       	cp	r8, r24
    19dc:	99 06       	cpc	r9, r25
    19de:	94 f1       	brlt	.+100    	; 0x1a44 <lcdDrawLine+0x1de>
            {
                lcdDrawPixel(x, y, ON);
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	6c 2f       	mov	r22, r28
    19e4:	84 2d       	mov	r24, r4
    19e6:	8e 0d       	add	r24, r14
    19e8:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
                if (F <= 0)
    19ec:	10 16       	cp	r1, r16
    19ee:	11 06       	cpc	r1, r17
    19f0:	1c f0       	brlt	.+6      	; 0x19f8 <lcdDrawLine+0x192>
                {
                    F -= dy2;
    19f2:	0c 19       	sub	r16, r12
    19f4:	1d 09       	sbc	r17, r13
    19f6:	03 c0       	rjmp	.+6      	; 0x19fe <lcdDrawLine+0x198>
                }
                else
                {
                    y--;
    19f8:	21 97       	sbiw	r28, 0x01	; 1
                    F -= dy2_plus_dx2;
    19fa:	02 19       	sub	r16, r2
    19fc:	13 09       	sbc	r17, r3
    19fe:	8f ef       	ldi	r24, 0xFF	; 255
    1a00:	e8 1a       	sub	r14, r24
    1a02:	f8 0a       	sbc	r15, r24
    1a04:	e7 cf       	rjmp	.-50     	; 0x19d4 <lcdDrawLine+0x16e>
        }
        // Case 4: -INF < m < -1 (Mirror about x-axis and mirror 
        // about y=x line, replace all dx by -dy and dy by dx)
        else    
        {
            F = dx2 + dy;    // initial F
    1a06:	67 01       	movw	r12, r14
    1a08:	c2 0e       	add	r12, r18
    1a0a:	d3 1e       	adc	r13, r19

            y = p1y;
            x = p1x;
            while (y >= p2y)
    1a0c:	a1 2c       	mov	r10, r1
    1a0e:	b1 2c       	mov	r11, r1
    1a10:	ce 01       	movw	r24, r28
    1a12:	8a 19       	sub	r24, r10
    1a14:	9b 09       	sbc	r25, r11
    1a16:	86 15       	cp	r24, r6
    1a18:	97 05       	cpc	r25, r7
    1a1a:	a4 f0       	brlt	.+40     	; 0x1a44 <lcdDrawLine+0x1de>
            {
                lcdDrawPixel(x, y, ON);
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	65 2d       	mov	r22, r5
    1a20:	6a 19       	sub	r22, r10
    1a22:	80 2f       	mov	r24, r16
    1a24:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
                if (F <= 0)
    1a28:	1c 14       	cp	r1, r12
    1a2a:	1d 04       	cpc	r1, r13
    1a2c:	1c f0       	brlt	.+6      	; 0x1a34 <lcdDrawLine+0x1ce>
                {
                    F += dx2;
    1a2e:	ce 0c       	add	r12, r14
    1a30:	df 1c       	adc	r13, r15
    1a32:	04 c0       	rjmp	.+8      	; 0x1a3c <lcdDrawLine+0x1d6>
                }
                else
                {
                    x++;
    1a34:	0f 5f       	subi	r16, 0xFF	; 255
    1a36:	1f 4f       	sbci	r17, 0xFF	; 255
                    F += dy2_plus_dx2;
    1a38:	c2 0c       	add	r12, r2
    1a3a:	d3 1c       	adc	r13, r3
    1a3c:	8f ef       	ldi	r24, 0xFF	; 255
    1a3e:	a8 1a       	sub	r10, r24
    1a40:	b8 0a       	sbc	r11, r24
    1a42:	e6 cf       	rjmp	.-52     	; 0x1a10 <lcdDrawLine+0x1aa>
                }
                y--;
            }
        }
    }
}
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	ff 90       	pop	r15
    1a4e:	ef 90       	pop	r14
    1a50:	df 90       	pop	r13
    1a52:	cf 90       	pop	r12
    1a54:	bf 90       	pop	r11
    1a56:	af 90       	pop	r10
    1a58:	9f 90       	pop	r9
    1a5a:	8f 90       	pop	r8
    1a5c:	7f 90       	pop	r7
    1a5e:	6f 90       	pop	r6
    1a60:	5f 90       	pop	r5
    1a62:	4f 90       	pop	r4
    1a64:	3f 90       	pop	r3
    1a66:	2f 90       	pop	r2
    1a68:	08 95       	ret

00001a6a <lcdDrawBox>:
  }
}

// Draw box is just four lines. It's really just a shortcut.
void lcdDrawBox(uint8_t p1x, uint8_t p1y, uint8_t p2x, uint8_t p2y, PIX_VAL pixel)
{
    1a6a:	ef 92       	push	r14
    1a6c:	ff 92       	push	r15
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	e8 2e       	mov	r14, r24
    1a78:	f6 2e       	mov	r15, r22
    1a7a:	c4 2f       	mov	r28, r20
    1a7c:	12 2f       	mov	r17, r18
	lcdDrawLine(p1x, p1y, p1x, p2y, pixel);
    1a7e:	48 2f       	mov	r20, r24
    1a80:	0e 94 33 0c 	call	0x1866	; 0x1866 <lcdDrawLine>
	lcdDrawLine(p1x, p1y, p2x, p1y, pixel);
    1a84:	2f 2d       	mov	r18, r15
    1a86:	4c 2f       	mov	r20, r28
    1a88:	6f 2d       	mov	r22, r15
    1a8a:	8e 2d       	mov	r24, r14
    1a8c:	0e 94 33 0c 	call	0x1866	; 0x1866 <lcdDrawLine>
	lcdDrawLine(p2x, p2y, p1x, p2y, pixel);
    1a90:	21 2f       	mov	r18, r17
    1a92:	4e 2d       	mov	r20, r14
    1a94:	61 2f       	mov	r22, r17
    1a96:	8c 2f       	mov	r24, r28
    1a98:	0e 94 33 0c 	call	0x1866	; 0x1866 <lcdDrawLine>
	lcdDrawLine(p2x, p2y, p2x, p1y, pixel);
    1a9c:	2f 2d       	mov	r18, r15
    1a9e:	4c 2f       	mov	r20, r28
    1aa0:	61 2f       	mov	r22, r17
    1aa2:	8c 2f       	mov	r24, r28
    1aa4:	0e 94 33 0c 	call	0x1866	; 0x1866 <lcdDrawLine>
}
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	1f 91       	pop	r17
    1aae:	0f 91       	pop	r16
    1ab0:	ff 90       	pop	r15
    1ab2:	ef 90       	pop	r14
    1ab4:	08 95       	ret

00001ab6 <lcdDrawCircle>:

// I found this code on wikipedia- it's the general circle version of
//  Bresenham's line algorithm. It works great. I'm not going to attempt to
//  comment it- look it up yourself, lazy.
void lcdDrawCircle(uint8_t x0, uint8_t y0, uint8_t r, PIX_VAL pixel)
{
    1ab6:	5f 92       	push	r5
    1ab8:	6f 92       	push	r6
    1aba:	7f 92       	push	r7
    1abc:	8f 92       	push	r8
    1abe:	9f 92       	push	r9
    1ac0:	af 92       	push	r10
    1ac2:	bf 92       	push	r11
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	b8 2e       	mov	r11, r24
    1ad6:	a6 2e       	mov	r10, r22
  int x = r, y = 0;
    1ad8:	04 2f       	mov	r16, r20
    1ada:	10 e0       	ldi	r17, 0x00	; 0
  int xChange = 1 - (r << 1);
    1adc:	98 01       	movw	r18, r16
    1ade:	22 0f       	add	r18, r18
    1ae0:	33 1f       	adc	r19, r19
    1ae2:	ee 24       	eor	r14, r14
    1ae4:	e3 94       	inc	r14
    1ae6:	f1 2c       	mov	r15, r1
    1ae8:	e2 1a       	sub	r14, r18
    1aea:	f3 0a       	sbc	r15, r19
  int yChange = 0;
  int radiusError = 0;
    1aec:	c1 2c       	mov	r12, r1
    1aee:	d1 2c       	mov	r13, r1
// I found this code on wikipedia- it's the general circle version of
//  Bresenham's line algorithm. It works great. I'm not going to attempt to
//  comment it- look it up yourself, lazy.
void lcdDrawCircle(uint8_t x0, uint8_t y0, uint8_t r, PIX_VAL pixel)
{
  int x = r, y = 0;
    1af0:	c0 e0       	ldi	r28, 0x00	; 0
    1af2:	d0 e0       	ldi	r29, 0x00	; 0
    1af4:	8c 2e       	mov	r8, r28
    1af6:	8a 0c       	add	r8, r10
  int yChange = 0;
  int radiusError = 0;
 
  while(x >= y)
  {
    lcdDrawPixel(x + x0, y + y0, ON);
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	68 2d       	mov	r22, r8
    1afc:	7b 2c       	mov	r7, r11
    1afe:	70 0e       	add	r7, r16
    1b00:	87 2d       	mov	r24, r7
    1b02:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
    1b06:	9c 2e       	mov	r9, r28
    1b08:	9b 0c       	add	r9, r11
    lcdDrawPixel(y + x0, x + y0, ON);
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	6a 2c       	mov	r6, r10
    1b0e:	60 0e       	add	r6, r16
    1b10:	66 2d       	mov	r22, r6
    1b12:	89 2d       	mov	r24, r9
    1b14:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
    lcdDrawPixel(-x + x0, y + y0, ON);
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	68 2d       	mov	r22, r8
    1b1c:	8b 2c       	mov	r8, r11
    1b1e:	80 1a       	sub	r8, r16
    1b20:	88 2d       	mov	r24, r8
    1b22:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
    1b26:	5b 2c       	mov	r5, r11
    1b28:	5c 1a       	sub	r5, r28
    lcdDrawPixel(-y + x0, x + y0, ON);
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	66 2d       	mov	r22, r6
    1b2e:	85 2d       	mov	r24, r5
    1b30:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
    1b34:	6a 2c       	mov	r6, r10
    1b36:	6c 1a       	sub	r6, r28
    lcdDrawPixel(-x + x0, -y + y0, ON);
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	66 2d       	mov	r22, r6
    1b3c:	88 2d       	mov	r24, r8
    1b3e:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
    lcdDrawPixel(-y + x0, -x + y0, ON);
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	8a 2c       	mov	r8, r10
    1b46:	80 1a       	sub	r8, r16
    1b48:	68 2d       	mov	r22, r8
    1b4a:	85 2d       	mov	r24, r5
    1b4c:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
    lcdDrawPixel(x + x0, -y + y0, ON);
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	66 2d       	mov	r22, r6
    1b54:	87 2d       	mov	r24, r7
    1b56:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
    lcdDrawPixel(y + x0, -x + y0, ON);
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	68 2d       	mov	r22, r8
    1b5e:	89 2d       	mov	r24, r9
    1b60:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
 
    y++;
    radiusError += yChange;
    1b64:	9e 01       	movw	r18, r28
    1b66:	22 0f       	add	r18, r18
    1b68:	33 1f       	adc	r19, r19
    1b6a:	c2 0e       	add	r12, r18
    1b6c:	d3 1e       	adc	r13, r19
    1b6e:	21 96       	adiw	r28, 0x01	; 1
    yChange += 2;
    if(((radiusError << 1) + xChange) > 0)
    1b70:	96 01       	movw	r18, r12
    1b72:	22 0f       	add	r18, r18
    1b74:	33 1f       	adc	r19, r19
    1b76:	2e 0d       	add	r18, r14
    1b78:	3f 1d       	adc	r19, r15
    1b7a:	12 16       	cp	r1, r18
    1b7c:	13 06       	cpc	r1, r19
    1b7e:	3c f4       	brge	.+14     	; 0x1b8e <lcdDrawCircle+0xd8>
    {
      x--;
    1b80:	01 50       	subi	r16, 0x01	; 1
    1b82:	11 09       	sbc	r17, r1
      radiusError += xChange;
    1b84:	ce 0c       	add	r12, r14
    1b86:	df 1c       	adc	r13, r15
      xChange += 2;
    1b88:	82 e0       	ldi	r24, 0x02	; 2
    1b8a:	e8 0e       	add	r14, r24
    1b8c:	f1 1c       	adc	r15, r1
  int x = r, y = 0;
  int xChange = 1 - (r << 1);
  int yChange = 0;
  int radiusError = 0;
 
  while(x >= y)
    1b8e:	0c 17       	cp	r16, r28
    1b90:	1d 07       	cpc	r17, r29
    1b92:	0c f0       	brlt	.+2      	; 0x1b96 <lcdDrawCircle+0xe0>
    1b94:	af cf       	rjmp	.-162    	; 0x1af4 <lcdDrawCircle+0x3e>
      x--;
      radiusError += xChange;
      xChange += 2;
    }
  }
}
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	ff 90       	pop	r15
    1ba0:	ef 90       	pop	r14
    1ba2:	df 90       	pop	r13
    1ba4:	cf 90       	pop	r12
    1ba6:	bf 90       	pop	r11
    1ba8:	af 90       	pop	r10
    1baa:	9f 90       	pop	r9
    1bac:	8f 90       	pop	r8
    1bae:	7f 90       	pop	r7
    1bb0:	6f 90       	pop	r6
    1bb2:	5f 90       	pop	r5
    1bb4:	08 95       	ret

00001bb6 <lcdDrawChar>:
}

// This is the by-pixel character rendering function. At this point, there's no
//  support for the t6963 built-in character generator. Get on that, won't you?
void lcdDrawChar(char printMe)
{
    1bb6:	ef 92       	push	r14
    1bb8:	ff 92       	push	r15
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	c8 2f       	mov	r28, r24
  // So, we'll check our three special cases first: backspace and newline.
  switch(printMe)
    1bc4:	88 30       	cpi	r24, 0x08	; 8
    1bc6:	a9 f1       	breq	.+106    	; 0x1c32 <lcdDrawChar+0x7c>
    1bc8:	8d 30       	cpi	r24, 0x0D	; 13
    1bca:	09 f0       	breq	.+2      	; 0x1bce <lcdDrawChar+0x18>
    1bcc:	9f c0       	rjmp	.+318    	; 0x1d0c <lcdDrawChar+0x156>
  {
    case '\r':  // Newline.
    // For backspace tracking purposes, we want to track how many characters
    //  we're skipping on this line.
    while (cursorPos[0] <= (xDim-6))
    1bce:	60 91 01 01 	lds	r22, 0x0101
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	65 50       	subi	r22, 0x05	; 5
    1bd6:	71 09       	sbc	r23, r1
    1bd8:	40 91 0a 01 	lds	r20, 0x010A
    1bdc:	50 91 0b 01 	lds	r21, 0x010B
    1be0:	e0 91 0e 01 	lds	r30, 0x010E
    1be4:	8e 2f       	mov	r24, r30
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	ea 5f       	subi	r30, 0xFA	; 250
    1bea:	9a 01       	movw	r18, r20
    1bec:	2f 5f       	subi	r18, 0xFF	; 255
    1bee:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf0:	86 17       	cp	r24, r22
    1bf2:	97 07       	cpc	r25, r23
    1bf4:	14 f4       	brge	.+4      	; 0x1bfa <lcdDrawChar+0x44>
    1bf6:	a9 01       	movw	r20, r18
    1bf8:	f5 cf       	rjmp	.-22     	; 0x1be4 <lcdDrawChar+0x2e>
    1bfa:	50 93 0b 01 	sts	0x010B, r21
    1bfe:	40 93 0a 01 	sts	0x010A, r20
      cursorPos[0] += 6;
      textLength++;
    }
    // Then, we want to reset the imaginary cursor to the start of the next
    //  "line" of text- 8 pixels below the top of the current line.
    cursorPos[0] = textOrigin[0];
    1c02:	80 91 0c 01 	lds	r24, 0x010C
    1c06:	80 93 0e 01 	sts	0x010E, r24
    cursorPos[1] += 8;
    1c0a:	80 91 0f 01 	lds	r24, 0x010F
    1c0e:	88 5f       	subi	r24, 0xF8	; 248
    1c10:	80 93 0f 01 	sts	0x010F, r24
    // If we've reached the bottom of the screen, we want to wrap to the top
    //  of the area that we defined to contain text by setting the text origin
    //  at some earlier time.
    if (cursorPos[1] >= (yDim-7)) cursorPos[1] = textOrigin[1];
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	40 91 00 01 	lds	r20, 0x0100
    1c1a:	50 e0       	ldi	r21, 0x00	; 0
    1c1c:	47 50       	subi	r20, 0x07	; 7
    1c1e:	51 09       	sbc	r21, r1
    1c20:	84 17       	cp	r24, r20
    1c22:	95 07       	cpc	r25, r21
    1c24:	0c f4       	brge	.+2      	; 0x1c28 <lcdDrawChar+0x72>
    1c26:	72 c0       	rjmp	.+228    	; 0x1d0c <lcdDrawChar+0x156>
    1c28:	80 91 0d 01 	lds	r24, 0x010D
    1c2c:	80 93 0f 01 	sts	0x010F, r24
    1c30:	6d c0       	rjmp	.+218    	; 0x1d0c <lcdDrawChar+0x156>
    break;
    
    case '\b':
    if (textLength > 0) // no text, no backspace!
    1c32:	40 91 0a 01 	lds	r20, 0x010A
    1c36:	50 91 0b 01 	lds	r21, 0x010B
    1c3a:	41 15       	cp	r20, r1
    1c3c:	51 05       	cpc	r21, r1
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <lcdDrawChar+0x8c>
    1c40:	65 c0       	rjmp	.+202    	; 0x1d0c <lcdDrawChar+0x156>
    {
      textLength--; // Reduce the number of characters we've written.
    1c42:	41 50       	subi	r20, 0x01	; 1
    1c44:	51 09       	sbc	r21, r1
    1c46:	50 93 0b 01 	sts	0x010B, r21
    1c4a:	40 93 0a 01 	sts	0x010A, r20
      //  printed, so we can delete it.
      
      // Special case: we're at the beginning of a line.
      //  We'll want to go to the end of the previous line and delete what
      //  we find there.
      if (cursorPos[0] == textOrigin[0])
    1c4e:	20 91 0e 01 	lds	r18, 0x010E
    1c52:	80 91 0c 01 	lds	r24, 0x010C
    1c56:	28 13       	cpse	r18, r24
    1c58:	35 c0       	rjmp	.+106    	; 0x1cc4 <lcdDrawChar+0x10e>
      {
        // Even more special: we're at the top of the text block, so we want
        //  to go to the bottom line of the text block, last character, and
        //  delete what we find there.
        if (cursorPos[1] == textOrigin[1])
    1c5a:	30 91 0f 01 	lds	r19, 0x010F
    1c5e:	80 91 0d 01 	lds	r24, 0x010D
    1c62:	38 13       	cpse	r19, r24
    1c64:	1e c0       	rjmp	.+60     	; 0x1ca2 <lcdDrawChar+0xec>
        {
          while (cursorPos[1] < (yDim-8)) cursorPos[1] +=8;
    1c66:	40 91 00 01 	lds	r20, 0x0100
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	48 50       	subi	r20, 0x08	; 8
    1c6e:	51 09       	sbc	r21, r1
    1c70:	68 e0       	ldi	r22, 0x08	; 8
    1c72:	63 0f       	add	r22, r19
    1c74:	83 2f       	mov	r24, r19
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	84 17       	cp	r24, r20
    1c7a:	95 07       	cpc	r25, r21
    1c7c:	14 f4       	brge	.+4      	; 0x1c82 <lcdDrawChar+0xcc>
    1c7e:	36 2f       	mov	r19, r22
    1c80:	f7 cf       	rjmp	.-18     	; 0x1c70 <lcdDrawChar+0xba>
    1c82:	30 93 0f 01 	sts	0x010F, r19
          while (cursorPos[0] <= (xDim-6)) cursorPos[0] += 6;
    1c86:	40 91 01 01 	lds	r20, 0x0101
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	45 50       	subi	r20, 0x05	; 5
    1c8e:	51 09       	sbc	r21, r1
    1c90:	36 e0       	ldi	r19, 0x06	; 6
    1c92:	32 0f       	add	r19, r18
    1c94:	82 2f       	mov	r24, r18
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	84 17       	cp	r24, r20
    1c9a:	95 07       	cpc	r25, r21
    1c9c:	9c f4       	brge	.+38     	; 0x1cc4 <lcdDrawChar+0x10e>
    1c9e:	23 2f       	mov	r18, r19
    1ca0:	f7 cf       	rjmp	.-18     	; 0x1c90 <lcdDrawChar+0xda>
          cursorPos[0]-=6;
        }
        else // Not at the top of the block, just the start of the line.
        {
          cursorPos[1] -= 8;
    1ca2:	38 50       	subi	r19, 0x08	; 8
    1ca4:	30 93 0f 01 	sts	0x010F, r19
          while (cursorPos[0] <= (xDim-6)) cursorPos[0] += 6;
    1ca8:	40 91 01 01 	lds	r20, 0x0101
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	45 50       	subi	r20, 0x05	; 5
    1cb0:	51 09       	sbc	r21, r1
    1cb2:	36 e0       	ldi	r19, 0x06	; 6
    1cb4:	32 0f       	add	r19, r18
    1cb6:	82 2f       	mov	r24, r18
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	84 17       	cp	r24, r20
    1cbc:	95 07       	cpc	r25, r21
    1cbe:	14 f4       	brge	.+4      	; 0x1cc4 <lcdDrawChar+0x10e>
    1cc0:	23 2f       	mov	r18, r19
    1cc2:	f7 cf       	rjmp	.-18     	; 0x1cb2 <lcdDrawChar+0xfc>
        }
      }
      // Normal case: not at the left or top edge of the block
      else
      {
        cursorPos[0] -= 6;
    1cc4:	26 50       	subi	r18, 0x06	; 6
    1cc6:	20 93 0e 01 	sts	0x010E, r18
      } 
      
      // Now that our cursor is where it ought to be, we can blank out the
      //   current character location by turning the pixels there off.
      for (uint8_t x = cursorPos[0]; x<cursorPos[0]+5; x++)
    1cca:	d0 91 0e 01 	lds	r29, 0x010E
    1cce:	40 91 0e 01 	lds	r20, 0x010E
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	4c 5f       	subi	r20, 0xFC	; 252
    1cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd8:	6d 2f       	mov	r22, r29
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	46 17       	cp	r20, r22
    1cde:	57 07       	cpc	r21, r23
    1ce0:	ac f0       	brlt	.+42     	; 0x1d0c <lcdDrawChar+0x156>
      {
        for (uint8_t y = cursorPos[1]; y<cursorPos[1]+8; y++)
    1ce2:	10 91 0f 01 	lds	r17, 0x010F
    1ce6:	40 91 0f 01 	lds	r20, 0x010F
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	49 5f       	subi	r20, 0xF9	; 249
    1cee:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf0:	e1 2f       	mov	r30, r17
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	4e 17       	cp	r20, r30
    1cf6:	5f 07       	cpc	r21, r31
    1cf8:	3c f0       	brlt	.+14     	; 0x1d08 <lcdDrawChar+0x152>
        {
          lcdDrawPixel(x,y,OFF);
    1cfa:	41 e0       	ldi	r20, 0x01	; 1
    1cfc:	61 2f       	mov	r22, r17
    1cfe:	8d 2f       	mov	r24, r29
    1d00:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
      
      // Now that our cursor is where it ought to be, we can blank out the
      //   current character location by turning the pixels there off.
      for (uint8_t x = cursorPos[0]; x<cursorPos[0]+5; x++)
      {
        for (uint8_t y = cursorPos[1]; y<cursorPos[1]+8; y++)
    1d04:	1f 5f       	subi	r17, 0xFF	; 255
    1d06:	ef cf       	rjmp	.-34     	; 0x1ce6 <lcdDrawChar+0x130>
        cursorPos[0] -= 6;
      } 
      
      // Now that our cursor is where it ought to be, we can blank out the
      //   current character location by turning the pixels there off.
      for (uint8_t x = cursorPos[0]; x<cursorPos[0]+5; x++)
    1d08:	df 5f       	subi	r29, 0xFF	; 255
    1d0a:	e1 cf       	rjmp	.-62     	; 0x1cce <lcdDrawChar+0x118>
    break;
  }
  
  // Special cases handled; we can move on to the general case of characters
  //  that we can print out. That's everything between space and tilde.
	if ((printMe >= ' ') && (printMe <= '~'))
    1d0c:	80 ee       	ldi	r24, 0xE0	; 224
    1d0e:	8c 0f       	add	r24, r28
    1d10:	8f 35       	cpi	r24, 0x5F	; 95
    1d12:	08 f0       	brcs	.+2      	; 0x1d16 <lcdDrawChar+0x160>
    1d14:	68 c0       	rjmp	.+208    	; 0x1de6 <lcdDrawChar+0x230>
	{
    // All the characters are stored in a big huge block of the flash memory;
    //  each one takes five bytes. To find the five bytes in question, we need
    //  to subtract the offset of ASCII values we can't print (everything
    //  before ' ') and then multiply by five.
		uint16_t charOffset = printMe - ' ';
    1d16:	2c 2f       	mov	r18, r28
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	20 52       	subi	r18, 0x20	; 32
    1d1c:	31 09       	sbc	r19, r1
		charOffset=5*charOffset;
    textLength++;
    1d1e:	80 91 0a 01 	lds	r24, 0x010A
    1d22:	90 91 0b 01 	lds	r25, 0x010B
    1d26:	01 96       	adiw	r24, 0x01	; 1
    1d28:	90 93 0b 01 	sts	0x010B, r25
    1d2c:	80 93 0a 01 	sts	0x010A, r24
    
    // This is the arbitrary character generator. For this, cursorPos is the
    //   upper left of the character, and we'll draw it pixel by pixel, one
    //   column at a time. It's slower, but more flexible.
    for (uint8_t x = cursorPos[0]; x<cursorPos[0]+5; x++)
    1d30:	f0 90 0e 01 	lds	r15, 0x010E
    // All the characters are stored in a big huge block of the flash memory;
    //  each one takes five bytes. To find the five bytes in question, we need
    //  to subtract the offset of ASCII values we can't print (everything
    //  before ' ') and then multiply by five.
		uint16_t charOffset = printMe - ' ';
		charOffset=5*charOffset;
    1d34:	85 e0       	ldi	r24, 0x05	; 5
    1d36:	82 9f       	mul	r24, r18
    1d38:	e0 01       	movw	r28, r0
    1d3a:	83 9f       	mul	r24, r19
    1d3c:	d0 0d       	add	r29, r0
    1d3e:	11 24       	eor	r1, r1
    1d40:	c0 55       	subi	r28, 0x50	; 80
    1d42:	d2 4f       	sbci	r29, 0xF2	; 242
    textLength++;
    
    // This is the arbitrary character generator. For this, cursorPos is the
    //   upper left of the character, and we'll draw it pixel by pixel, one
    //   column at a time. It's slower, but more flexible.
    for (uint8_t x = cursorPos[0]; x<cursorPos[0]+5; x++)
    1d44:	80 91 0e 01 	lds	r24, 0x010E
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	2c 5f       	subi	r18, 0xFC	; 252
    1d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d50:	4f 2d       	mov	r20, r15
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	24 17       	cp	r18, r20
    1d56:	35 07       	cpc	r19, r21
    1d58:	2c f1       	brlt	.+74     	; 0x1da4 <lcdDrawChar+0x1ee>
    {
      uint8_t colTemp = pgm_read_byte(&characterArray[charOffset++]);
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	04 91       	lpm	r16, Z
      for (uint8_t y = cursorPos[1]; y<cursorPos[1]+8; y++)
    1d5e:	e0 90 0f 01 	lds	r14, 0x010F
      {
        if ((colTemp>>(y-cursorPos[1]))&0x01) lcdDrawPixel(x,y,ON);
    1d62:	10 e0       	ldi	r17, 0x00	; 0
    //   upper left of the character, and we'll draw it pixel by pixel, one
    //   column at a time. It's slower, but more flexible.
    for (uint8_t x = cursorPos[0]; x<cursorPos[0]+5; x++)
    {
      uint8_t colTemp = pgm_read_byte(&characterArray[charOffset++]);
      for (uint8_t y = cursorPos[1]; y<cursorPos[1]+8; y++)
    1d64:	40 91 0f 01 	lds	r20, 0x010F
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	2e 2d       	mov	r18, r14
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	fa 01       	movw	r30, r20
    1d70:	37 96       	adiw	r30, 0x07	; 7
    1d72:	e2 17       	cp	r30, r18
    1d74:	f3 07       	cpc	r31, r19
    1d76:	9c f0       	brlt	.+38     	; 0x1d9e <lcdDrawChar+0x1e8>
      {
        if ((colTemp>>(y-cursorPos[1]))&0x01) lcdDrawPixel(x,y,ON);
    1d78:	24 1b       	sub	r18, r20
    1d7a:	35 0b       	sbc	r19, r21
    1d7c:	c8 01       	movw	r24, r16
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <lcdDrawChar+0x1ce>
    1d80:	95 95       	asr	r25
    1d82:	87 95       	ror	r24
    1d84:	2a 95       	dec	r18
    1d86:	e2 f7       	brpl	.-8      	; 0x1d80 <lcdDrawChar+0x1ca>
    1d88:	80 ff       	sbrs	r24, 0
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <lcdDrawChar+0x1da>
    1d8c:	40 e0       	ldi	r20, 0x00	; 0
    1d8e:	01 c0       	rjmp	.+2      	; 0x1d92 <lcdDrawChar+0x1dc>
        else lcdDrawPixel(x,y,OFF);
    1d90:	41 e0       	ldi	r20, 0x01	; 1
    1d92:	6e 2d       	mov	r22, r14
    1d94:	8f 2d       	mov	r24, r15
    1d96:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
    //   upper left of the character, and we'll draw it pixel by pixel, one
    //   column at a time. It's slower, but more flexible.
    for (uint8_t x = cursorPos[0]; x<cursorPos[0]+5; x++)
    {
      uint8_t colTemp = pgm_read_byte(&characterArray[charOffset++]);
      for (uint8_t y = cursorPos[1]; y<cursorPos[1]+8; y++)
    1d9a:	e3 94       	inc	r14
    1d9c:	e3 cf       	rjmp	.-58     	; 0x1d64 <lcdDrawChar+0x1ae>
    textLength++;
    
    // This is the arbitrary character generator. For this, cursorPos is the
    //   upper left of the character, and we'll draw it pixel by pixel, one
    //   column at a time. It's slower, but more flexible.
    for (uint8_t x = cursorPos[0]; x<cursorPos[0]+5; x++)
    1d9e:	f3 94       	inc	r15
    1da0:	21 96       	adiw	r28, 0x01	; 1
    1da2:	d0 cf       	rjmp	.-96     	; 0x1d44 <lcdDrawChar+0x18e>
      {
        if ((colTemp>>(y-cursorPos[1]))&0x01) lcdDrawPixel(x,y,ON);
        else lcdDrawPixel(x,y,OFF);
      }
    }
    cursorPos[0] += 6;  // Increment our x position by one character space.
    1da4:	26 e0       	ldi	r18, 0x06	; 6
    1da6:	28 0f       	add	r18, r24
    1da8:	20 93 0e 01 	sts	0x010E, r18
    // if we're at the end of the line, we need to wrap to the next line.
    if (cursorPos[0] >= (xDim-6))
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	80 91 01 01 	lds	r24, 0x0101
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	06 97       	sbiw	r24, 0x06	; 6
    1db6:	28 17       	cp	r18, r24
    1db8:	39 07       	cpc	r19, r25
    1dba:	ac f0       	brlt	.+42     	; 0x1de6 <lcdDrawChar+0x230>
    {
      cursorPos[0] = textOrigin[0];
    1dbc:	80 91 0c 01 	lds	r24, 0x010C
    1dc0:	80 93 0e 01 	sts	0x010E, r24
      cursorPos[1] += 8;
    1dc4:	20 91 0f 01 	lds	r18, 0x010F
    1dc8:	28 5f       	subi	r18, 0xF8	; 248
    1dca:	20 93 0f 01 	sts	0x010F, r18
      if (cursorPos[1] >= (yDim-7)) cursorPos[1] = textOrigin[1];
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	80 91 00 01 	lds	r24, 0x0100
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	07 97       	sbiw	r24, 0x07	; 7
    1dd8:	28 17       	cp	r18, r24
    1dda:	39 07       	cpc	r19, r25
    1ddc:	24 f0       	brlt	.+8      	; 0x1de6 <lcdDrawChar+0x230>
    1dde:	80 91 0d 01 	lds	r24, 0x010D
    1de2:	80 93 0f 01 	sts	0x010F, r24
    }
	}	
}
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	08 95       	ret

00001df4 <lcdEraseBlock>:

// This function has room for lots of improvement. We draw over the block to
//   be erased pixel by pixel, but we *could* do it column by column on the
//   ks0108b or row by row on the t6963.
void lcdEraseBlock(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
    1df4:	ef 92       	push	r14
    1df6:	ff 92       	push	r15
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	1f 92       	push	r1
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	e8 2e       	mov	r14, r24
    1e08:	f6 2e       	mov	r15, r22
    1e0a:	14 2f       	mov	r17, r20
  // We want to go from upper left to lower right- if some degenerate user
  //   thinks to be cute, we want to make sure that our points are redefined
  //   so that (x0,y0) is the upper left, and (x1,y1) is lower right.
  if (x1<x0)
    1e0c:	48 17       	cp	r20, r24
    1e0e:	10 f4       	brcc	.+4      	; 0x1e14 <lcdEraseBlock+0x20>
    1e10:	e4 2e       	mov	r14, r20
    1e12:	18 2f       	mov	r17, r24
  {
    uint8_t xTemp = x0;
    x0 = x1;
    x1 = xTemp;
  }
  if (y1<y0)
    1e14:	2f 15       	cp	r18, r15
    1e16:	28 f4       	brcc	.+10     	; 0x1e22 <lcdEraseBlock+0x2e>
    1e18:	8f 2d       	mov	r24, r15
    1e1a:	f2 2e       	mov	r15, r18
    1e1c:	28 2f       	mov	r18, r24
  }
  // Now that we've got that settled, we'll start at point (x0,y0) and just
  //   use the lcdPixelDraw() function to turn off each pixel in the block.
  //   We'll do this by defining points (i,j), iterating across in x, then
  //   down y.
  for (uint8_t j = y0; j <= y1; j++)
    1e1e:	01 c0       	rjmp	.+2      	; 0x1e22 <lcdEraseBlock+0x2e>
    1e20:	f3 94       	inc	r15
    1e22:	2f 15       	cp	r18, r15
    1e24:	60 f0       	brcs	.+24     	; 0x1e3e <lcdEraseBlock+0x4a>
    1e26:	0e 2d       	mov	r16, r14
  {
    for (uint8_t i = x0; i <= x1; i++)
    1e28:	10 17       	cp	r17, r16
    1e2a:	d0 f3       	brcs	.-12     	; 0x1e20 <lcdEraseBlock+0x2c>
    {
      lcdDrawPixel(i,j,OFF);
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	6f 2d       	mov	r22, r15
    1e30:	80 2f       	mov	r24, r16
    1e32:	29 83       	std	Y+1, r18	; 0x01
    1e34:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
  //   use the lcdPixelDraw() function to turn off each pixel in the block.
  //   We'll do this by defining points (i,j), iterating across in x, then
  //   down y.
  for (uint8_t j = y0; j <= y1; j++)
  {
    for (uint8_t i = x0; i <= x1; i++)
    1e38:	0f 5f       	subi	r16, 0xFF	; 255
    1e3a:	29 81       	ldd	r18, Y+1	; 0x01
    1e3c:	f5 cf       	rjmp	.-22     	; 0x1e28 <lcdEraseBlock+0x34>
    {
      lcdDrawPixel(i,j,OFF);
    }
  }
}
    1e3e:	0f 90       	pop	r0
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	08 95       	ret

00001e4e <lcdDrawLogo>:

// Draw the SparkFun logo, pixel by pixel. We do this as a splash screen.
void lcdDrawLogo(void)
{
    1e4e:	bf 92       	push	r11
    1e50:	cf 92       	push	r12
    1e52:	df 92       	push	r13
    1e54:	ef 92       	push	r14
    1e56:	ff 92       	push	r15
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
  // x and y are the left and top edges of the logo. We want to center the
  //  logo; it's 16 pixels tall and 20 pixels wide. Thus, the center of the
  //  screen is 10 pixels to far to the right and 8 pixels to far down.
  uint8_t x = ((xDim/2)-10);
    1e60:	e0 90 01 01 	lds	r14, 0x0101
    1e64:	e6 94       	lsr	r14
    1e66:	e6 ef       	ldi	r30, 0xF6	; 246
    1e68:	ce 2e       	mov	r12, r30
    1e6a:	ce 0c       	add	r12, r14
  uint8_t y  = ((yDim/2)-8);
    1e6c:	d0 90 00 01 	lds	r13, 0x0100
    1e70:	d6 94       	lsr	r13
    1e72:	f8 ef       	ldi	r31, 0xF8	; 248
    1e74:	bf 2e       	mov	r11, r31
    1e76:	bd 0c       	add	r11, r13
    1e78:	cc e9       	ldi	r28, 0x9C	; 156
    1e7a:	dd e0       	ldi	r29, 0x0D	; 13
    1e7c:	0c 2d       	mov	r16, r12
  //  with the top half. The logo is stored with the 10 bytes forming the
  //  top half first in memory, then the 10 for the bottom half next.
  for (uint8_t i = 0; i<10; i++)
  {
    // Pull in the next byte of the logo.
    uint8_t colTemp = pgm_read_byte(&logoArray[i]);
    1e7e:	fe 01       	movw	r30, r28
    1e80:	14 91       	lpm	r17, Z
    1e82:	fb 2c       	mov	r15, r11
    // Iterate over the bits in that byte, drawing one pixel at a time by
    //  looking at the lowest bit in the byte, and drawing according to
    //  that pixel and the 'reverse' flag.
    for (uint8_t j = 0; j<8; j++)
    {
      if (reverse == 0)
    1e84:	90 91 02 01 	lds	r25, 0x0102
    1e88:	81 2f       	mov	r24, r17
    1e8a:	81 70       	andi	r24, 0x01	; 1
    1e8c:	91 11       	cpse	r25, r1
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <lcdDrawLogo+0x46>
      {
        if (colTemp&0x01) lcdDrawPixel(x+i,y+j,ON);
    1e90:	19 f0       	breq	.+6      	; 0x1e98 <lcdDrawLogo+0x4a>
    1e92:	04 c0       	rjmp	.+8      	; 0x1e9c <lcdDrawLogo+0x4e>
        else lcdDrawPixel(x+i,y+j,OFF);
      }
      else
      {
        if (colTemp&0x01) lcdDrawPixel(x+i,y+j,OFF);
    1e94:	88 23       	and	r24, r24
    1e96:	11 f0       	breq	.+4      	; 0x1e9c <lcdDrawLogo+0x4e>
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	01 c0       	rjmp	.+2      	; 0x1e9e <lcdDrawLogo+0x50>
        else lcdDrawPixel(x+i,y+j,ON);
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	6f 2d       	mov	r22, r15
    1ea0:	80 2f       	mov	r24, r16
    1ea2:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
      }
      // By right shifting, we keep the LSb the bit we're interested in.
      //  That way, we only need to mask it with 0x01 and get a zero/nonzero
      //  reading on it.
      colTemp = colTemp>>1;
    1ea6:	16 95       	lsr	r17
    1ea8:	f3 94       	inc	r15
    // Pull in the next byte of the logo.
    uint8_t colTemp = pgm_read_byte(&logoArray[i]);
    // Iterate over the bits in that byte, drawing one pixel at a time by
    //  looking at the lowest bit in the byte, and drawing according to
    //  that pixel and the 'reverse' flag.
    for (uint8_t j = 0; j<8; j++)
    1eaa:	fd 10       	cpse	r15, r13
    1eac:	eb cf       	rjmp	.-42     	; 0x1e84 <lcdDrawLogo+0x36>
    1eae:	21 96       	adiw	r28, 0x01	; 1
    1eb0:	0f 5f       	subi	r16, 0xFF	; 255
  uint8_t y  = ((yDim/2)-8);

  // Now we're going to iterate over the bytes in the logo array, starting
  //  with the top half. The logo is stored with the 10 bytes forming the
  //  top half first in memory, then the 10 for the bottom half next.
  for (uint8_t i = 0; i<10; i++)
    1eb2:	0e 11       	cpse	r16, r14
    1eb4:	e4 cf       	rjmp	.-56     	; 0x1e7e <lcdDrawLogo+0x30>
    1eb6:	c6 ea       	ldi	r28, 0xA6	; 166
    1eb8:	dd e0       	ldi	r29, 0x0D	; 13
    1eba:	1c 2d       	mov	r17, r12
  }  
  y+=8;  // Increment y, since we're drawing the lower half of the logo. Then
         //  we do more or less exactly the same thing.
  for (uint8_t i = 10; i<20; i++)
  {
    uint8_t colTemp = pgm_read_byte(&logoArray[i]);
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	c4 90       	lpm	r12, Z
    1ec0:	0d 2d       	mov	r16, r13
    for (uint8_t j = 0; j<8; j++)
    1ec2:	f1 2c       	mov	r15, r1
    {
      if (reverse == 0)
    1ec4:	90 91 02 01 	lds	r25, 0x0102
    1ec8:	8c 2d       	mov	r24, r12
    1eca:	81 70       	andi	r24, 0x01	; 1
    1ecc:	91 11       	cpse	r25, r1
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <lcdDrawLogo+0x86>
      {
        if (colTemp&0x01) lcdDrawPixel(x+i-10,y+j,ON);
    1ed0:	19 f0       	breq	.+6      	; 0x1ed8 <lcdDrawLogo+0x8a>
    1ed2:	04 c0       	rjmp	.+8      	; 0x1edc <lcdDrawLogo+0x8e>
        else lcdDrawPixel(x+i-10,y+j,OFF);
      }
      else
      {
        if (colTemp&0x01) lcdDrawPixel(x+i-10,y+j,OFF);
    1ed4:	88 23       	and	r24, r24
    1ed6:	11 f0       	breq	.+4      	; 0x1edc <lcdDrawLogo+0x8e>
    1ed8:	41 e0       	ldi	r20, 0x01	; 1
    1eda:	01 c0       	rjmp	.+2      	; 0x1ede <lcdDrawLogo+0x90>
        else lcdDrawPixel(x+i-10,y+j,ON);
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	60 2f       	mov	r22, r16
    1ee0:	81 2f       	mov	r24, r17
    1ee2:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
      }
      colTemp = colTemp>>1;
    1ee6:	c6 94       	lsr	r12
  y+=8;  // Increment y, since we're drawing the lower half of the logo. Then
         //  we do more or less exactly the same thing.
  for (uint8_t i = 10; i<20; i++)
  {
    uint8_t colTemp = pgm_read_byte(&logoArray[i]);
    for (uint8_t j = 0; j<8; j++)
    1ee8:	f3 94       	inc	r15
    1eea:	0f 5f       	subi	r16, 0xFF	; 255
    1eec:	f8 e0       	ldi	r31, 0x08	; 8
    1eee:	ff 12       	cpse	r15, r31
    1ef0:	e9 cf       	rjmp	.-46     	; 0x1ec4 <lcdDrawLogo+0x76>
    1ef2:	21 96       	adiw	r28, 0x01	; 1
    1ef4:	1f 5f       	subi	r17, 0xFF	; 255
      colTemp = colTemp>>1;
    }
  }  
  y+=8;  // Increment y, since we're drawing the lower half of the logo. Then
         //  we do more or less exactly the same thing.
  for (uint8_t i = 10; i<20; i++)
    1ef6:	1e 11       	cpse	r17, r14
    1ef8:	e1 cf       	rjmp	.-62     	; 0x1ebc <lcdDrawLogo+0x6e>
      }
      colTemp = colTemp>>1;
    }
  }

}
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	1f 91       	pop	r17
    1f00:	0f 91       	pop	r16
    1f02:	ff 90       	pop	r15
    1f04:	ef 90       	pop	r14
    1f06:	df 90       	pop	r13
    1f08:	cf 90       	pop	r12
    1f0a:	bf 90       	pop	r11
    1f0c:	08 95       	ret

00001f0e <lcdGetDataBlock>:
//  background. The data comes back as a block of 8 bytes; bit 0 is the upper
//  pixel; byte 0 is the leftmost column. Both types of display use this
//  structure but it's easier for the ks0108b.
void lcdGetDataBlock(uint8_t x, uint8_t y, uint8_t *buffer)
{
  if (display == SMALL) ks0108bReadBlock(x, y, buffer);
    1f0e:	90 91 08 01 	lds	r25, 0x0108
    1f12:	91 11       	cpse	r25, r1
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <lcdGetDataBlock+0xc>
    1f16:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <ks0108bReadBlock>
  else                  t6963ReadBlock(x, y, buffer);
    1f1a:	0c 94 3f 09 	jmp	0x127e	; 0x127e <t6963ReadBlock>

00001f1e <lcdDrawSprite>:
//  before the write occurred. As with characters, x and y are the upper left
//  corner of the sprite. angle is establised by one of four ASCII characters-
//  '0', '3', '6', '9', which correspond to hands on a clock.
void lcdDrawSprite(uint8_t x, uint8_t y, uint8_t sprite, char angle, 
                    PIX_VAL pixel)
  {
    1f1e:	9f 92       	push	r9
    1f20:	af 92       	push	r10
    1f22:	bf 92       	push	r11
    1f24:	cf 92       	push	r12
    1f26:	df 92       	push	r13
    1f28:	ef 92       	push	r14
    1f2a:	ff 92       	push	r15
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	29 97       	sbiw	r28, 0x09	; 9
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	b8 2e       	mov	r11, r24
    1f46:	16 2f       	mov	r17, r22
    uint16_t spriteIndex = sprite*8; // Index of the first byte of our sprite.
    1f48:	88 e0       	ldi	r24, 0x08	; 8
    1f4a:	48 9f       	mul	r20, r24
    1f4c:	70 01       	movw	r14, r0
    1f4e:	11 24       	eor	r1, r1
    uint8_t buffer[8]; // We'll use this buffer, along with the mask, to
                       //  draw only the sprite without disturbing the
                       //  background.
    lcdGetDataBlock(x, y, buffer);
    1f50:	ae 01       	movw	r20, r28
    1f52:	4f 5f       	subi	r20, 0xFF	; 255
    1f54:	5f 4f       	sbci	r21, 0xFF	; 255
    1f56:	8b 2d       	mov	r24, r11
    1f58:	29 87       	std	Y+9, r18	; 0x09
    1f5a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <lcdGetDataBlock>
    // Okay, now our buffer is full of the contents of the landing zone for
    //  the sprite. We can now clear the sprite's landing spot (by ANDing with
    //  the mask) and draw in bits where the sprite should be (by ORing with
    //  the sprite). To accommodate reverse mode, we'll complement all the bits
    //  before masking. The draw routine will handle the rendering.
    for (uint16_t i = spriteIndex; i < spriteIndex + 8; i++)
    1f5e:	de 01       	movw	r26, r28
    1f60:	11 96       	adiw	r26, 0x01	; 1
    1f62:	a7 01       	movw	r20, r14
    1f64:	c7 01       	movw	r24, r14
    1f66:	08 96       	adiw	r24, 0x08	; 8
    1f68:	29 85       	ldd	r18, Y+9	; 0x09
    1f6a:	48 17       	cp	r20, r24
    1f6c:	59 07       	cpc	r21, r25
    1f6e:	b0 f4       	brcc	.+44     	; 0x1f9c <lcdDrawSprite+0x7e>
    {
      if (reverse) buffer[i-spriteIndex] ^= 0xff;
    1f70:	30 91 02 01 	lds	r19, 0x0102
    1f74:	33 23       	and	r19, r19
    1f76:	19 f0       	breq	.+6      	; 0x1f7e <lcdDrawSprite+0x60>
    1f78:	3c 91       	ld	r19, X
    1f7a:	30 95       	com	r19
    1f7c:	3c 93       	st	X, r19
    1f7e:	fa 01       	movw	r30, r20
    1f80:	e4 5e       	subi	r30, 0xE4	; 228
    1f82:	f2 4f       	sbci	r31, 0xF2	; 242
      buffer[i-spriteIndex] &= pgm_read_byte(&maskArray[i]);
    1f84:	34 91       	lpm	r19, Z
    1f86:	fa 01       	movw	r30, r20
    1f88:	e4 5a       	subi	r30, 0xA4	; 164
    1f8a:	f2 4f       	sbci	r31, 0xF2	; 242
      buffer[i-spriteIndex] |= pgm_read_byte(&spriteArray[i]);
    1f8c:	e4 91       	lpm	r30, Z
    //  the sprite). To accommodate reverse mode, we'll complement all the bits
    //  before masking. The draw routine will handle the rendering.
    for (uint16_t i = spriteIndex; i < spriteIndex + 8; i++)
    {
      if (reverse) buffer[i-spriteIndex] ^= 0xff;
      buffer[i-spriteIndex] &= pgm_read_byte(&maskArray[i]);
    1f8e:	6c 91       	ld	r22, X
    1f90:	36 23       	and	r19, r22
      buffer[i-spriteIndex] |= pgm_read_byte(&spriteArray[i]);
    1f92:	3e 2b       	or	r19, r30
    1f94:	3d 93       	st	X+, r19
    // Okay, now our buffer is full of the contents of the landing zone for
    //  the sprite. We can now clear the sprite's landing spot (by ANDing with
    //  the mask) and draw in bits where the sprite should be (by ORing with
    //  the sprite). To accommodate reverse mode, we'll complement all the bits
    //  before masking. The draw routine will handle the rendering.
    for (uint16_t i = spriteIndex; i < spriteIndex + 8; i++)
    1f96:	4f 5f       	subi	r20, 0xFF	; 255
    1f98:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9a:	e7 cf       	rjmp	.-50     	; 0x1f6a <lcdDrawSprite+0x4c>
    }
    // The buffer now holds the block as it should look. Now we need to print
    //  it, pixel by pixel, to the screen. I'm not going to go into the
    //  nitty gritty details of how I figured this out- suffice it to say,
    //  graph paper was involved.
    switch(angle)
    1f9c:	23 33       	cpi	r18, 0x33	; 51
    1f9e:	51 f1       	breq	.+84     	; 0x1ff4 <lcdDrawSprite+0xd6>
    1fa0:	78 f4       	brcc	.+30     	; 0x1fc0 <lcdDrawSprite+0xa2>
    1fa2:	20 33       	cpi	r18, 0x30	; 48
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <lcdDrawSprite+0x8a>
    1fa6:	b0 c0       	rjmp	.+352    	; 0x2108 <lcdDrawSprite+0x1ea>
    1fa8:	6e 01       	movw	r12, r28
    1faa:	f9 e0       	ldi	r31, 0x09	; 9
    1fac:	cf 0e       	add	r12, r31
    1fae:	d1 1c       	adc	r13, r1
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	01 96       	adiw	r24, 0x01	; 1
    1fb4:	7c 01       	movw	r14, r24
    1fb6:	a7 e0       	ldi	r26, 0x07	; 7
    1fb8:	9a 2e       	mov	r9, r26
    1fba:	91 0e       	add	r9, r17
    1fbc:	11 50       	subi	r17, 0x01	; 1
    1fbe:	3c c0       	rjmp	.+120    	; 0x2038 <lcdDrawSprite+0x11a>
    1fc0:	26 33       	cpi	r18, 0x36	; 54
    1fc2:	81 f0       	breq	.+32     	; 0x1fe4 <lcdDrawSprite+0xc6>
    1fc4:	29 33       	cpi	r18, 0x39	; 57
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <lcdDrawSprite+0xac>
    1fc8:	9f c0       	rjmp	.+318    	; 0x2108 <lcdDrawSprite+0x1ea>
    1fca:	87 e0       	ldi	r24, 0x07	; 7
    1fcc:	c8 2e       	mov	r12, r24
    1fce:	c1 0e       	add	r12, r17
    1fd0:	aa 24       	eor	r10, r10
    1fd2:	aa 94       	dec	r10
    1fd4:	a1 0e       	add	r10, r17
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	31 96       	adiw	r30, 0x01	; 1
    1fda:	7f 01       	movw	r14, r30
    1fdc:	17 e0       	ldi	r17, 0x07	; 7
    1fde:	1b 0d       	add	r17, r11
    1fe0:	ba 94       	dec	r11
    1fe2:	8c c0       	rjmp	.+280    	; 0x20fc <lcdDrawSprite+0x1de>
    1fe4:	b7 e0       	ldi	r27, 0x07	; 7
    1fe6:	db 2e       	mov	r13, r27
    1fe8:	db 0c       	add	r13, r11
    1fea:	ba 94       	dec	r11
    1fec:	ce 01       	movw	r24, r28
    1fee:	01 96       	adiw	r24, 0x01	; 1
    1ff0:	7c 01       	movw	r14, r24
    1ff2:	65 c0       	rjmp	.+202    	; 0x20be <lcdDrawSprite+0x1a0>
    1ff4:	6e 01       	movw	r12, r28
    1ff6:	99 e0       	ldi	r25, 0x09	; 9
    1ff8:	c9 0e       	add	r12, r25
    1ffa:	d1 1c       	adc	r13, r1
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	31 96       	adiw	r30, 0x01	; 1
    2000:	7f 01       	movw	r14, r30
    2002:	3c c0       	rjmp	.+120    	; 0x207c <lcdDrawSprite+0x15e>
      {
        for (uint8_t j = 0; j<8; j++)
        {
          if (pixel == ON)
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+i,y+7-j,ON);
    2004:	f7 01       	movw	r30, r14
    2006:	80 81       	ld	r24, Z
      case '0':
      for (uint8_t i = 0; i<8; i++)
      {
        for (uint8_t j = 0; j<8; j++)
        {
          if (pixel == ON)
    2008:	01 11       	cpse	r16, r1
    200a:	18 c0       	rjmp	.+48     	; 0x203c <lcdDrawSprite+0x11e>
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+i,y+7-j,ON);
    200c:	80 fd       	sbrc	r24, 0
    200e:	18 c0       	rjmp	.+48     	; 0x2040 <lcdDrawSprite+0x122>
            else lcdDrawPixel(x+i,y+7-j,OFF);
          }
          else
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+i,y+7-j,OFF);
    2010:	41 e0       	ldi	r20, 0x01	; 1
            else lcdDrawPixel(x+i,y+7-j,ON);
    2012:	6a 2d       	mov	r22, r10
    2014:	8b 2d       	mov	r24, r11
    2016:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
          }
          buffer[i] = buffer[i]>>1;
    201a:	f7 01       	movw	r30, r14
    201c:	80 81       	ld	r24, Z
    201e:	86 95       	lsr	r24
    2020:	80 83       	st	Z, r24
    2022:	aa 94       	dec	r10
    switch(angle)
    {
      case '0':
      for (uint8_t i = 0; i<8; i++)
      {
        for (uint8_t j = 0; j<8; j++)
    2024:	a1 12       	cpse	r10, r17
    2026:	ee cf       	rjmp	.-36     	; 0x2004 <lcdDrawSprite+0xe6>
    2028:	ff ef       	ldi	r31, 0xFF	; 255
    202a:	ef 1a       	sub	r14, r31
    202c:	ff 0a       	sbc	r15, r31
    202e:	b3 94       	inc	r11
    //  nitty gritty details of how I figured this out- suffice it to say,
    //  graph paper was involved.
    switch(angle)
    {
      case '0':
      for (uint8_t i = 0; i<8; i++)
    2030:	ec 14       	cp	r14, r12
    2032:	fd 04       	cpc	r15, r13
    2034:	09 f4       	brne	.+2      	; 0x2038 <lcdDrawSprite+0x11a>
    2036:	68 c0       	rjmp	.+208    	; 0x2108 <lcdDrawSprite+0x1ea>
    2038:	a9 2c       	mov	r10, r9
    203a:	e4 cf       	rjmp	.-56     	; 0x2004 <lcdDrawSprite+0xe6>
            if (buffer[i]&0x01) lcdDrawPixel(x+i,y+7-j,ON);
            else lcdDrawPixel(x+i,y+7-j,OFF);
          }
          else
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+i,y+7-j,OFF);
    203c:	80 fd       	sbrc	r24, 0
    203e:	e8 cf       	rjmp	.-48     	; 0x2010 <lcdDrawSprite+0xf2>
            else lcdDrawPixel(x+i,y+7-j,ON);
    2040:	40 e0       	ldi	r20, 0x00	; 0
    2042:	e7 cf       	rjmp	.-50     	; 0x2012 <lcdDrawSprite+0xf4>
      {
        for (uint8_t j = 0; j<8; j++)
        {
          if (pixel == ON)
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+j,y+i,ON);
    2044:	f7 01       	movw	r30, r14
    2046:	80 81       	ld	r24, Z
      case '3':
      for (uint8_t i = 0; i<8; i++)
      {
        for (uint8_t j = 0; j<8; j++)
        {
          if (pixel == ON)
    2048:	01 11       	cpse	r16, r1
    204a:	1b c0       	rjmp	.+54     	; 0x2082 <lcdDrawSprite+0x164>
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+j,y+i,ON);
    204c:	80 fd       	sbrc	r24, 0
    204e:	1b c0       	rjmp	.+54     	; 0x2086 <lcdDrawSprite+0x168>
            else lcdDrawPixel(x+j,y+i,OFF);
          }
          else
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+j,y+i,OFF);
    2050:	41 e0       	ldi	r20, 0x01	; 1
            else lcdDrawPixel(x+j,y+i,ON);
    2052:	61 2f       	mov	r22, r17
    2054:	8a 2d       	mov	r24, r10
    2056:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
          }
          buffer[i] = buffer[i]>>1;
    205a:	f7 01       	movw	r30, r14
    205c:	80 81       	ld	r24, Z
    205e:	86 95       	lsr	r24
    2060:	80 83       	st	Z, r24
      }
      break;
      case '3':
      for (uint8_t i = 0; i<8; i++)
      {
        for (uint8_t j = 0; j<8; j++)
    2062:	93 94       	inc	r9
    2064:	a3 94       	inc	r10
    2066:	f8 e0       	ldi	r31, 0x08	; 8
    2068:	9f 12       	cpse	r9, r31
    206a:	ec cf       	rjmp	.-40     	; 0x2044 <lcdDrawSprite+0x126>
    206c:	8f ef       	ldi	r24, 0xFF	; 255
    206e:	e8 1a       	sub	r14, r24
    2070:	f8 0a       	sbc	r15, r24
    2072:	1f 5f       	subi	r17, 0xFF	; 255
          buffer[i] = buffer[i]>>1;
        }
      }
      break;
      case '3':
      for (uint8_t i = 0; i<8; i++)
    2074:	ec 14       	cp	r14, r12
    2076:	fd 04       	cpc	r15, r13
    2078:	09 f4       	brne	.+2      	; 0x207c <lcdDrawSprite+0x15e>
    207a:	46 c0       	rjmp	.+140    	; 0x2108 <lcdDrawSprite+0x1ea>
    }
    // The buffer now holds the block as it should look. Now we need to print
    //  it, pixel by pixel, to the screen. I'm not going to go into the
    //  nitty gritty details of how I figured this out- suffice it to say,
    //  graph paper was involved.
    switch(angle)
    207c:	ab 2c       	mov	r10, r11
    207e:	91 2c       	mov	r9, r1
    2080:	e1 cf       	rjmp	.-62     	; 0x2044 <lcdDrawSprite+0x126>
            if (buffer[i]&0x01) lcdDrawPixel(x+j,y+i,ON);
            else lcdDrawPixel(x+j,y+i,OFF);
          }
          else
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+j,y+i,OFF);
    2082:	80 fd       	sbrc	r24, 0
    2084:	e5 cf       	rjmp	.-54     	; 0x2050 <lcdDrawSprite+0x132>
            else lcdDrawPixel(x+j,y+i,ON);
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	e4 cf       	rjmp	.-56     	; 0x2052 <lcdDrawSprite+0x134>
      {
        for (uint8_t j = 0; j<8; j++)
        {
          if (pixel == ON)
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+7-i,y+j,ON);
    208a:	f7 01       	movw	r30, r14
    208c:	80 81       	ld	r24, Z
      case '6':
      for (uint8_t i = 0; i<8; i++)
      {
        for (uint8_t j = 0; j<8; j++)
        {
          if (pixel == ON)
    208e:	01 11       	cpse	r16, r1
    2090:	19 c0       	rjmp	.+50     	; 0x20c4 <lcdDrawSprite+0x1a6>
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+7-i,y+j,ON);
    2092:	80 fd       	sbrc	r24, 0
    2094:	19 c0       	rjmp	.+50     	; 0x20c8 <lcdDrawSprite+0x1aa>
            else lcdDrawPixel(x+7-i,y+j,OFF);
          }
          else
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+7-i,y+j,OFF);
    2096:	41 e0       	ldi	r20, 0x01	; 1
            else lcdDrawPixel(x+7-i,y+j,ON);
    2098:	6c 2d       	mov	r22, r12
    209a:	8d 2d       	mov	r24, r13
    209c:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
          }
          buffer[i] = buffer[i]>>1;
    20a0:	f7 01       	movw	r30, r14
    20a2:	80 81       	ld	r24, Z
    20a4:	86 95       	lsr	r24
    20a6:	80 83       	st	Z, r24
      }
      break;
      case '6':
      for (uint8_t i = 0; i<8; i++)
      {
        for (uint8_t j = 0; j<8; j++)
    20a8:	a3 94       	inc	r10
    20aa:	c3 94       	inc	r12
    20ac:	f8 e0       	ldi	r31, 0x08	; 8
    20ae:	af 12       	cpse	r10, r31
    20b0:	ec cf       	rjmp	.-40     	; 0x208a <lcdDrawSprite+0x16c>
    20b2:	8f ef       	ldi	r24, 0xFF	; 255
    20b4:	e8 1a       	sub	r14, r24
    20b6:	f8 0a       	sbc	r15, r24
    20b8:	da 94       	dec	r13
          buffer[i] = buffer[i]>>1;
        }
      }
      break;
      case '6':
      for (uint8_t i = 0; i<8; i++)
    20ba:	db 14       	cp	r13, r11
    20bc:	29 f1       	breq	.+74     	; 0x2108 <lcdDrawSprite+0x1ea>
    }
    // The buffer now holds the block as it should look. Now we need to print
    //  it, pixel by pixel, to the screen. I'm not going to go into the
    //  nitty gritty details of how I figured this out- suffice it to say,
    //  graph paper was involved.
    switch(angle)
    20be:	c1 2e       	mov	r12, r17
    20c0:	a1 2c       	mov	r10, r1
    20c2:	e3 cf       	rjmp	.-58     	; 0x208a <lcdDrawSprite+0x16c>
            if (buffer[i]&0x01) lcdDrawPixel(x+7-i,y+j,ON);
            else lcdDrawPixel(x+7-i,y+j,OFF);
          }
          else
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+7-i,y+j,OFF);
    20c4:	80 fd       	sbrc	r24, 0
    20c6:	e7 cf       	rjmp	.-50     	; 0x2096 <lcdDrawSprite+0x178>
            else lcdDrawPixel(x+7-i,y+j,ON);
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	e6 cf       	rjmp	.-52     	; 0x2098 <lcdDrawSprite+0x17a>
      {
        for (uint8_t j = 0; j<8; j++)
        {
          if (pixel == ON)
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+7-j,y+7-i,ON);
    20cc:	f7 01       	movw	r30, r14
    20ce:	80 81       	ld	r24, Z
      case '9':
      for (uint8_t i = 0; i<8; i++)
      {
        for (uint8_t j = 0; j<8; j++)
        {
          if (pixel == ON)
    20d0:	01 11       	cpse	r16, r1
    20d2:	16 c0       	rjmp	.+44     	; 0x2100 <lcdDrawSprite+0x1e2>
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+7-j,y+7-i,ON);
    20d4:	80 fd       	sbrc	r24, 0
    20d6:	16 c0       	rjmp	.+44     	; 0x2104 <lcdDrawSprite+0x1e6>
            else lcdDrawPixel(x+7-j,y+7-i,OFF);
          }
          else
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+7-j,y+7-i,OFF);
    20d8:	41 e0       	ldi	r20, 0x01	; 1
            else lcdDrawPixel(x+7-j,y+7-i,ON);
    20da:	6c 2d       	mov	r22, r12
    20dc:	8d 2d       	mov	r24, r13
    20de:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
          }
          buffer[i] = buffer[i]>>1;
    20e2:	f7 01       	movw	r30, r14
    20e4:	80 81       	ld	r24, Z
    20e6:	86 95       	lsr	r24
    20e8:	80 83       	st	Z, r24
    20ea:	da 94       	dec	r13
      }
      break;
      case '9':
      for (uint8_t i = 0; i<8; i++)
      {
        for (uint8_t j = 0; j<8; j++)
    20ec:	db 10       	cpse	r13, r11
    20ee:	ee cf       	rjmp	.-36     	; 0x20cc <lcdDrawSprite+0x1ae>
    20f0:	ff ef       	ldi	r31, 0xFF	; 255
    20f2:	ef 1a       	sub	r14, r31
    20f4:	ff 0a       	sbc	r15, r31
    20f6:	ca 94       	dec	r12
          buffer[i] = buffer[i]>>1;
        }
      }
      break;
      case '9':
      for (uint8_t i = 0; i<8; i++)
    20f8:	ca 14       	cp	r12, r10
    20fa:	31 f0       	breq	.+12     	; 0x2108 <lcdDrawSprite+0x1ea>
    20fc:	d1 2e       	mov	r13, r17
    20fe:	e6 cf       	rjmp	.-52     	; 0x20cc <lcdDrawSprite+0x1ae>
            if (buffer[i]&0x01) lcdDrawPixel(x+7-j,y+7-i,ON);
            else lcdDrawPixel(x+7-j,y+7-i,OFF);
          }
          else
          {
            if (buffer[i]&0x01) lcdDrawPixel(x+7-j,y+7-i,OFF);
    2100:	80 fd       	sbrc	r24, 0
    2102:	ea cf       	rjmp	.-44     	; 0x20d8 <lcdDrawSprite+0x1ba>
            else lcdDrawPixel(x+7-j,y+7-i,ON);
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	e9 cf       	rjmp	.-46     	; 0x20da <lcdDrawSprite+0x1bc>
          buffer[i] = buffer[i]>>1;
        }
      }
      break;
    }
  }
    2108:	29 96       	adiw	r28, 0x09	; 9
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	bf 90       	pop	r11
    2126:	af 90       	pop	r10
    2128:	9f 90       	pop	r9
    212a:	08 95       	ret

0000212c <lcdDrawBig>:




void lcdDrawBig(uint8_t x, uint8_t y, uint8_t digit)
{
    212c:	7f 92       	push	r7
    212e:	8f 92       	push	r8
    2130:	9f 92       	push	r9
    2132:	af 92       	push	r10
    2134:	bf 92       	push	r11
    2136:	cf 92       	push	r12
    2138:	df 92       	push	r13
    213a:	ef 92       	push	r14
    213c:	ff 92       	push	r15
    213e:	0f 93       	push	r16
    2140:	1f 93       	push	r17
    2142:	cf 93       	push	r28
    2144:	df 93       	push	r29
    2146:	78 2e       	mov	r7, r24
	for(uint8_t j = 0;j<64;j++){	// Iterate down by lines
		for(uint8_t i = 0;i<5;i++){	// Iterator across line by bytes
			uint8_t byteTemp = pgm_read_byte(&bigNumArray[digit*320+5*j+i]);
    2148:	20 e4       	ldi	r18, 0x40	; 64
    214a:	31 e0       	ldi	r19, 0x01	; 1
    214c:	42 9f       	mul	r20, r18
    214e:	60 01       	movw	r12, r0
    2150:	43 9f       	mul	r20, r19
    2152:	d0 0c       	add	r13, r0
    2154:	11 24       	eor	r1, r1
    2156:	b6 2e       	mov	r11, r22
    2158:	c0 e0       	ldi	r28, 0x00	; 0
    215a:	d0 e0       	ldi	r29, 0x00	; 0




void lcdDrawBig(uint8_t x, uint8_t y, uint8_t digit)
{
    215c:	97 2c       	mov	r9, r7
    215e:	00 e0       	ldi	r16, 0x00	; 0
    2160:	10 e0       	ldi	r17, 0x00	; 0
    2162:	7e 01       	movw	r14, r28
    2164:	ec 0c       	add	r14, r12
    2166:	fd 1c       	adc	r15, r13
    2168:	c7 01       	movw	r24, r14
    216a:	84 56       	subi	r24, 0x64	; 100
    216c:	9f 4f       	sbci	r25, 0xFF	; 255
    216e:	7c 01       	movw	r14, r24
    2170:	f7 01       	movw	r30, r14
    2172:	e0 0f       	add	r30, r16
    2174:	f1 1f       	adc	r31, r17
	for(uint8_t j = 0;j<64;j++){	// Iterate down by lines
		for(uint8_t i = 0;i<5;i++){	// Iterator across line by bytes
			uint8_t byteTemp = pgm_read_byte(&bigNumArray[digit*320+5*j+i]);
    2176:	84 90       	lpm	r8, Z
			for(uint8_t b = 0;b<8;b++){	// Iterate through byte by bit-shifting
    2178:	a1 2c       	mov	r10, r1
				if (reverse == 0)
    217a:	20 91 02 01 	lds	r18, 0x0102
    217e:	98 2d       	mov	r25, r8
    2180:	91 70       	andi	r25, 0x01	; 1
    2182:	8a 2d       	mov	r24, r10
    2184:	89 0d       	add	r24, r9
    2186:	21 11       	cpse	r18, r1
    2188:	03 c0       	rjmp	.+6      	; 0x2190 <lcdDrawBig+0x64>
				{
					if (byteTemp&0x01) lcdDrawPixel(x+8*i+b,y+j,ON);
    218a:	99 23       	and	r25, r25
    218c:	19 f0       	breq	.+6      	; 0x2194 <lcdDrawBig+0x68>
    218e:	04 c0       	rjmp	.+8      	; 0x2198 <lcdDrawBig+0x6c>
					else lcdDrawPixel(x+8*i+b,y+j,OFF);
				}
				else
				{
					if (byteTemp&0x01) lcdDrawPixel(x+8*i+b,y+j,OFF);
    2190:	99 23       	and	r25, r25
    2192:	11 f0       	breq	.+4      	; 0x2198 <lcdDrawBig+0x6c>
    2194:	41 e0       	ldi	r20, 0x01	; 1
    2196:	01 c0       	rjmp	.+2      	; 0x219a <lcdDrawBig+0x6e>
					else lcdDrawPixel(x+8*i+b,y+j,ON);
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	6b 2d       	mov	r22, r11
    219c:	0e 94 18 0c 	call	0x1830	; 0x1830 <lcdDrawPixel>
				}
				byteTemp = byteTemp>>1;
    21a0:	86 94       	lsr	r8
void lcdDrawBig(uint8_t x, uint8_t y, uint8_t digit)
{
	for(uint8_t j = 0;j<64;j++){	// Iterate down by lines
		for(uint8_t i = 0;i<5;i++){	// Iterator across line by bytes
			uint8_t byteTemp = pgm_read_byte(&bigNumArray[digit*320+5*j+i]);
			for(uint8_t b = 0;b<8;b++){	// Iterate through byte by bit-shifting
    21a2:	a3 94       	inc	r10
    21a4:	88 e0       	ldi	r24, 0x08	; 8
    21a6:	a8 12       	cpse	r10, r24
    21a8:	e8 cf       	rjmp	.-48     	; 0x217a <lcdDrawBig+0x4e>
    21aa:	0f 5f       	subi	r16, 0xFF	; 255
    21ac:	1f 4f       	sbci	r17, 0xFF	; 255
    21ae:	98 0e       	add	r9, r24


void lcdDrawBig(uint8_t x, uint8_t y, uint8_t digit)
{
	for(uint8_t j = 0;j<64;j++){	// Iterate down by lines
		for(uint8_t i = 0;i<5;i++){	// Iterator across line by bytes
    21b0:	05 30       	cpi	r16, 0x05	; 5
    21b2:	11 05       	cpc	r17, r1
    21b4:	e9 f6       	brne	.-70     	; 0x2170 <lcdDrawBig+0x44>
    21b6:	b3 94       	inc	r11
    21b8:	25 96       	adiw	r28, 0x05	; 5



void lcdDrawBig(uint8_t x, uint8_t y, uint8_t digit)
{
	for(uint8_t j = 0;j<64;j++){	// Iterate down by lines
    21ba:	c0 34       	cpi	r28, 0x40	; 64
    21bc:	91 e0       	ldi	r25, 0x01	; 1
    21be:	d9 07       	cpc	r29, r25
    21c0:	69 f6       	brne	.-102    	; 0x215c <lcdDrawBig+0x30>
		}
	}
	
	
	
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	ff 90       	pop	r15
    21cc:	ef 90       	pop	r14
    21ce:	df 90       	pop	r13
    21d0:	cf 90       	pop	r12
    21d2:	bf 90       	pop	r11
    21d4:	af 90       	pop	r10
    21d6:	9f 90       	pop	r9
    21d8:	8f 90       	pop	r8
    21da:	7f 90       	pop	r7
    21dc:	08 95       	ret

000021de <ioInit>:

void ioInit(void)
{
  // Set up the data direction registers for the data bus pins.
  //  The data bus is on PB0:1 and PD2:7, so make those pins outputs.
  DDRB = 0b00001111;
    21de:	8f e0       	ldi	r24, 0x0F	; 15
    21e0:	84 b9       	out	0x04, r24	; 4
  DDRD = 0b11111100;
    21e2:	8c ef       	ldi	r24, 0xFC	; 252
    21e4:	8a b9       	out	0x0a, r24	; 10

  PORTB &= ~(1<<nBL_EN);  // Turn backlight on
    21e6:	2a 98       	cbi	0x05, 2	; 5
  
  // Now we need to configure the I/O to support the two types of display.
  if (display == SMALL)
    21e8:	80 91 08 01 	lds	r24, 0x0108
    21ec:	88 23       	and	r24, r24
    21ee:	11 f0       	breq	.+4      	; 0x21f4 <ioInit+0x16>
  {
    DDRC =  ((1<<EN) | (1<<RS) | (1<<R_W) | (1<<RESET) | (1<<CS1) | (1<<CS2));
    PORTC = ((1<<EN) | (1<<RS) | (1<<R_W) | (1<<RESET) | (1<<CS1) | (1<<CS2));
  }
  else if (display == LARGE)
    21f0:	81 30       	cpi	r24, 0x01	; 1
    21f2:	19 f4       	brne	.+6      	; 0x21fa <ioInit+0x1c>
  {
    DDRC =  ((1<<WR) | (1<<RD) | (1<<CE) | (1<<CD) | (1<<HALT) | (1<<RST));
    21f4:	8f e3       	ldi	r24, 0x3F	; 63
    21f6:	87 b9       	out	0x07, r24	; 7
    PORTC = ((1<<WR) | (1<<RD) | (1<<CE) | (1<<CD) | (1<<HALT) | (1<<RST));
    21f8:	88 b9       	out	0x08, r24	; 8
    21fa:	08 95       	ret

000021fc <setData>:
// Abstracts away the fact that the data pins are not on one port. We *could*
//  inline this code whereever necessary, but who wants to read all this?
void setData(uint8_t data)
{
  // Set the port direction registers to make data pins outputs.
  DDRB |= 0x03;
    21fc:	94 b1       	in	r25, 0x04	; 4
    21fe:	93 60       	ori	r25, 0x03	; 3
    2200:	94 b9       	out	0x04, r25	; 4
  DDRD |= 0xFC;
    2202:	9a b1       	in	r25, 0x0a	; 10
    2204:	9c 6f       	ori	r25, 0xFC	; 252
    2206:	9a b9       	out	0x0a, r25	; 10
  
  PORTB &= 0xFC;    // Clear PB7:2 in preparation for data.
    2208:	95 b1       	in	r25, 0x05	; 5
    220a:	9c 7f       	andi	r25, 0xFC	; 252
    220c:	95 b9       	out	0x05, r25	; 5
  PORTD &= 0x03;    // Clear PD1:0.
    220e:	9b b1       	in	r25, 0x0b	; 11
    2210:	93 70       	andi	r25, 0x03	; 3
    2212:	9b b9       	out	0x0b, r25	; 11
  
  PORTB |= (data & 0x03); // Mask off PB1:0 so we don't change them
    2214:	25 b1       	in	r18, 0x05	; 5
    2216:	98 2f       	mov	r25, r24
    2218:	93 70       	andi	r25, 0x03	; 3
    221a:	92 2b       	or	r25, r18
    221c:	95 b9       	out	0x05, r25	; 5
                          //  and then write the other 6 bits.
  PORTD |= (data & 0xFC); // Mask off PD7:2 so we don't change them
    221e:	9b b1       	in	r25, 0x0b	; 11
    2220:	8c 7f       	andi	r24, 0xFC	; 252
    2222:	89 2b       	or	r24, r25
    2224:	8b b9       	out	0x0b, r24	; 11
    2226:	08 95       	ret

00002228 <readData>:

// Same deal as setData.
uint8_t readData(void)
{
  // Set the port direction to input.
  DDRB &= ~(0x03);
    2228:	84 b1       	in	r24, 0x04	; 4
    222a:	8c 7f       	andi	r24, 0xFC	; 252
    222c:	84 b9       	out	0x04, r24	; 4
  DDRD &= ~(0xFC);
    222e:	8a b1       	in	r24, 0x0a	; 10
    2230:	83 70       	andi	r24, 0x03	; 3
    2232:	8a b9       	out	0x0a, r24	; 10
  
  // Pull the data in.
  uint8_t data = (PINB & 0x03);
    2234:	83 b1       	in	r24, 0x03	; 3
  data |= (PIND & 0xFC);
    2236:	99 b1       	in	r25, 0x09	; 9
    2238:	9c 7f       	andi	r25, 0xFC	; 252
  // Set the port direction to input.
  DDRB &= ~(0x03);
  DDRD &= ~(0xFC);
  
  // Pull the data in.
  uint8_t data = (PINB & 0x03);
    223a:	83 70       	andi	r24, 0x03	; 3
  data |= (PIND & 0xFC);
  
  return data;
}
    223c:	89 2b       	or	r24, r25
    223e:	08 95       	ret

00002240 <hiZDataPins>:
//  added this function to put the data pins in a hi-z state. I suppose I
//  could just call readData(), but this is easier to read.
void hiZDataPins(void)
{
  // Set the port direction to input.
  DDRB &= ~(0x03);
    2240:	84 b1       	in	r24, 0x04	; 4
    2242:	8c 7f       	andi	r24, 0xFC	; 252
    2244:	84 b9       	out	0x04, r24	; 4
  DDRD &= ~(0xFC);
    2246:	8a b1       	in	r24, 0x0a	; 10
    2248:	83 70       	andi	r24, 0x03	; 3
    224a:	8a b9       	out	0x0a, r24	; 10
    224c:	08 95       	ret

0000224e <uiStateMachine>:


// This is a state machine that acts based on the received command from the
//  main program loop.
void uiStateMachine(char command)
{
    224e:	0f 93       	push	r16
    2250:	1f 93       	push	r17
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	00 d0       	rcall	.+0      	; 0x2258 <uiStateMachine+0xa>
    2258:	00 d0       	rcall	.+0      	; 0x225a <uiStateMachine+0xc>
    225a:	1f 92       	push	r1
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
  // We will *assume* a state of ON for pixel values; we can clear that later.
  PIX_VAL pixel = ON;
  // Now, let's figure out where to start, based on our command input. There's
  //  a lot of good information about the switch constants in the header file.

  switch(command)
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	8a 31       	cpi	r24, 0x1A	; 26
    2264:	91 05       	cpc	r25, r1
    2266:	08 f0       	brcs	.+2      	; 0x226a <uiStateMachine+0x1c>
    2268:	81 c1       	rjmp	.+770    	; 0x256c <uiStateMachine+0x31e>
    226a:	fc 01       	movw	r30, r24
    226c:	ec 5c       	subi	r30, 0xCC	; 204
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__tablejump2__>
    reverse ^= 0x01;
    lcdClearScreen();
    break;	*/
    
    case TOGGLE_BGND:   // Switch between reverse mode and normal mode.
      reverse ^= 0x01;
    2274:	80 91 02 01 	lds	r24, 0x0102
    2278:	91 e0       	ldi	r25, 0x01	; 1
    227a:	89 27       	eor	r24, r25
    227c:	80 93 02 01 	sts	0x0102, r24
      toggleReverse();
    2280:	0e 94 ce 12 	call	0x259c	; 0x259c <toggleReverse>
	
    
    default: // if the character that followed the '|' is not a valid command,
    break;   //  ignore it.
  }
}
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    2292:	1f 91       	pop	r17
    2294:	0f 91       	pop	r16
    break;	*/
    
    case TOGGLE_BGND:   // Switch between reverse mode and normal mode.
      reverse ^= 0x01;
      toggleReverse();
      lcdClearScreen();
    2296:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <lcdClearScreen>
	
    
    default: // if the character that followed the '|' is not a valid command,
    break;   //  ignore it.
  }
}
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
      toggleReverse();
      lcdClearScreen();
    break;
    
    case TOGGLE_SPLASH: // Turn the splash-on-startup SparkFun logo off.
      toggleSplash();
    22ac:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <toggleSplash>
    
    case ADJ_BL_LEVEL:  // The first real, meaty command. Adjust the backlight.
      while(1)  // Stay here until we are *told* to leave.
      {
        // If there's data in the serial buffer, move it to the cmdBuffer.
        if (bufferSize > 0)
    22b0:	80 91 07 01 	lds	r24, 0x0107
    22b4:	88 23       	and	r24, r24
    22b6:	e1 f3       	breq	.-8      	; 0x22b0 <uiStateMachine+0x62>
        {
          cmdBuffer[cmdBufferPtr++] = serialBufferPop();
    22b8:	0e 94 29 0a 	call	0x1452	; 0x1452 <serialBufferPop>
    22bc:	89 83       	std	Y+1, r24	; 0x01
        if (cmdBufferPtr > 0)
        {
          cmdBufferPtr = 0;  // Reset the command buffer pointer.
          // We need to make sure our level never exceeds 100, or weird
          //   things can happen to the PWM generator.
          if ((uint8_t)cmdBuffer[0] > 100) cmdBuffer[0] = 100;
    22be:	85 36       	cpi	r24, 0x65	; 101
    22c0:	10 f0       	brcs	.+4      	; 0x22c6 <uiStateMachine+0x78>
    22c2:	84 e6       	ldi	r24, 0x64	; 100
    22c4:	89 83       	std	Y+1, r24	; 0x01
          // Set the backlight level- this is an alias to the actual register,
          //  renamed for convenience.
          BL_LEVEL = cmdBuffer[0];
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	90 93 8b 00 	sts	0x008B, r25
    22ce:	80 93 8a 00 	sts	0x008A, r24
          // Store the new value in EEPROM.
          setBacklightLevel(cmdBuffer[0]);
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
	
    
    default: // if the character that followed the '|' is not a valid command,
    break;   //  ignore it.
  }
}
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	df 91       	pop	r29
    22e0:	cf 91       	pop	r28
    22e2:	1f 91       	pop	r17
    22e4:	0f 91       	pop	r16
          if ((uint8_t)cmdBuffer[0] > 100) cmdBuffer[0] = 100;
          // Set the backlight level- this is an alias to the actual register,
          //  renamed for convenience.
          BL_LEVEL = cmdBuffer[0];
          // Store the new value in EEPROM.
          setBacklightLevel(cmdBuffer[0]);
    22e6:	0c 94 ed 12 	jmp	0x25da	; 0x25da <setBacklightLevel>
    break;
    
    case ADJ_BAUD_RATE:
      while(1)  // Stay here until we are *told* to leave.
      {
        if (bufferSize > 0)
    22ea:	80 91 07 01 	lds	r24, 0x0107
    22ee:	88 23       	and	r24, r24
    22f0:	e1 f3       	breq	.-8      	; 0x22ea <uiStateMachine+0x9c>
        {
          cmdBuffer[cmdBufferPtr++] = serialBufferPop();
    22f2:	0e 94 29 0a 	call	0x1452	; 0x1452 <serialBufferPop>
    22f6:	18 2f       	mov	r17, r24
        // Again, a one-byte command. Once we have a byte in the cmdBuffer,
        //  parse it.
        if (cmdBufferPtr > 0)
        {
          cmdBufferPtr = 0;
          setBaudRate(cmdBuffer[0]); // This will reject invalid settings,
    22f8:	0e 94 df 12 	call	0x25be	; 0x25be <setBaudRate>
                                     //   which is to say, anything outside
                                     //   of the range ASCII 1-6.
          switch(cmdBuffer[0])
    22fc:	13 33       	cpi	r17, 0x33	; 51
    22fe:	a9 f0       	breq	.+42     	; 0x232a <uiStateMachine+0xdc>
    2300:	40 f4       	brcc	.+16     	; 0x2312 <uiStateMachine+0xc4>
    2302:	11 33       	cpi	r17, 0x31	; 49
    2304:	79 f0       	breq	.+30     	; 0x2324 <uiStateMachine+0xd6>
    2306:	12 33       	cpi	r17, 0x32	; 50
    2308:	09 f0       	breq	.+2      	; 0x230c <uiStateMachine+0xbe>
    230a:	30 c1       	rjmp	.+608    	; 0x256c <uiStateMachine+0x31e>
          {
            case '1':
            serialInit(BR4800);
            break;
            case '2':
            serialInit(BR9600);
    230c:	8f ec       	ldi	r24, 0xCF	; 207
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	0e c0       	rjmp	.+28     	; 0x232e <uiStateMachine+0xe0>
        {
          cmdBufferPtr = 0;
          setBaudRate(cmdBuffer[0]); // This will reject invalid settings,
                                     //   which is to say, anything outside
                                     //   of the range ASCII 1-6.
          switch(cmdBuffer[0])
    2312:	15 33       	cpi	r17, 0x35	; 53
    2314:	d1 f0       	breq	.+52     	; 0x234a <uiStateMachine+0xfc>
    2316:	b0 f0       	brcs	.+44     	; 0x2344 <uiStateMachine+0xf6>
    2318:	16 33       	cpi	r17, 0x36	; 54
    231a:	09 f0       	breq	.+2      	; 0x231e <uiStateMachine+0xd0>
    231c:	27 c1       	rjmp	.+590    	; 0x256c <uiStateMachine+0x31e>
            break;
            case '5':
            serialInit(BR57600);
            break;
            case '6':
            serialInit(BR115200);
    231e:	80 e1       	ldi	r24, 0x10	; 16
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	05 c0       	rjmp	.+10     	; 0x232e <uiStateMachine+0xe0>
                                     //   which is to say, anything outside
                                     //   of the range ASCII 1-6.
          switch(cmdBuffer[0])
          {
            case '1':
            serialInit(BR4800);
    2324:	80 ea       	ldi	r24, 0xA0	; 160
    2326:	91 e0       	ldi	r25, 0x01	; 1
    2328:	02 c0       	rjmp	.+4      	; 0x232e <uiStateMachine+0xe0>
            break;
            case '2':
            serialInit(BR9600);
            break;
            case '3':
            serialInit(BR19200);
    232a:	87 e6       	ldi	r24, 0x67	; 103
    232c:	90 e0       	ldi	r25, 0x00	; 0
	
    
    default: // if the character that followed the '|' is not a valid command,
    break;   //  ignore it.
  }
}
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	df 91       	pop	r29
    233a:	cf 91       	pop	r28
    233c:	1f 91       	pop	r17
    233e:	0f 91       	pop	r16
          {
            case '1':
            serialInit(BR4800);
            break;
            case '2':
            serialInit(BR9600);
    2340:	0c 94 b6 09 	jmp	0x136c	; 0x136c <serialInit>
            break;
            case '3':
            serialInit(BR19200);
            break;
            case '4':
            serialInit(BR38400);
    2344:	83 e3       	ldi	r24, 0x33	; 51
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	f2 cf       	rjmp	.-28     	; 0x232e <uiStateMachine+0xe0>
            break;
            case '5':
            serialInit(BR57600);
    234a:	82 e2       	ldi	r24, 0x22	; 34
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	ef cf       	rjmp	.-34     	; 0x232e <uiStateMachine+0xe0>
    break;
    
    case ADJ_TEXT_X: // This is the x-origin of our text "window".
      while(1)  // Stay here until we are *told* to leave.
      {
        if (bufferSize > 0)
    2350:	80 91 07 01 	lds	r24, 0x0107
    2354:	88 23       	and	r24, r24
    2356:	e1 f3       	breq	.-8      	; 0x2350 <uiStateMachine+0x102>
        {
          cmdBuffer[cmdBufferPtr++] = serialBufferPop();
    2358:	0e 94 29 0a 	call	0x1452	; 0x1452 <serialBufferPop>
          cmdBufferPtr = 0;
          // The most recent byte is the new X origin of the text window- IF it
          //   makes sense. It only makes sense if it is at least 6 pixels from
          //   the right edge of the screen. We use the xDim variable from
          //   lcd.c to make sure we don't botch that. Ignore invalid input.
          if (cmdBuffer[0] <= (xDim-6))
    235c:	20 91 01 01 	lds	r18, 0x0101
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	25 50       	subi	r18, 0x05	; 5
    2364:	31 09       	sbc	r19, r1
    2366:	48 2f       	mov	r20, r24
    2368:	50 e0       	ldi	r21, 0x00	; 0
    236a:	42 17       	cp	r20, r18
    236c:	53 07       	cpc	r21, r19
    236e:	0c f0       	brlt	.+2      	; 0x2372 <uiStateMachine+0x124>
    2370:	fd c0       	rjmp	.+506    	; 0x256c <uiStateMachine+0x31e>
          {
            textOrigin[0] = cmdBuffer[0];
    2372:	80 93 0c 01 	sts	0x010C, r24
            cursorPos[0] = textOrigin[0];
    2376:	80 93 0e 01 	sts	0x010E, r24
    237a:	15 c0       	rjmp	.+42     	; 0x23a6 <uiStateMachine+0x158>
    break;
    
    case ADJ_TEXT_Y:
      while(1)  // Stay here until we are *told* to leave.
      {
        if (bufferSize > 0)
    237c:	80 91 07 01 	lds	r24, 0x0107
    2380:	88 23       	and	r24, r24
    2382:	e1 f3       	breq	.-8      	; 0x237c <uiStateMachine+0x12e>
        {
          cmdBuffer[cmdBufferPtr++] = serialBufferPop();
    2384:	0e 94 29 0a 	call	0x1452	; 0x1452 <serialBufferPop>
          cmdBufferPtr = 0;
          // The most recent byte is the new Y origin of the text window- IF it
          //   makes sense. It only makes sense if it is at least 8 pixels from
          //   the bottom edge of the screen. Use the yDim variable from lcd.c
          //   to make sure we don't botch that. Ignore invalid input.
          if (cmdBuffer[0] <= (yDim-8))
    2388:	20 91 00 01 	lds	r18, 0x0100
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	27 50       	subi	r18, 0x07	; 7
    2390:	31 09       	sbc	r19, r1
    2392:	48 2f       	mov	r20, r24
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	42 17       	cp	r20, r18
    2398:	53 07       	cpc	r21, r19
    239a:	0c f0       	brlt	.+2      	; 0x239e <uiStateMachine+0x150>
    239c:	e7 c0       	rjmp	.+462    	; 0x256c <uiStateMachine+0x31e>
          {
            textOrigin[1] = cmdBuffer[0];
    239e:	80 93 0d 01 	sts	0x010D, r24
            cursorPos[1] = textOrigin[1];
    23a2:	80 93 0f 01 	sts	0x010F, r24
            textLength = 0;
    23a6:	10 92 0b 01 	sts	0x010B, r1
    23aa:	10 92 0a 01 	sts	0x010A, r1
    23ae:	de c0       	rjmp	.+444    	; 0x256c <uiStateMachine+0x31e>
  // We will *assume* a state of ON for pixel values; we can clear that later.
  PIX_VAL pixel = ON;
  // Now, let's figure out where to start, based on our command input. There's
  //  a lot of good information about the switch constants in the header file.

  switch(command)
    23b0:	10 e0       	ldi	r17, 0x00	; 0
    break;
    
    case DRAW_PIXEL:
      while(1)  // Stay here until we are *told* to leave.
      {
        if (bufferSize > 0)
    23b2:	80 91 07 01 	lds	r24, 0x0107
    23b6:	88 23       	and	r24, r24
    23b8:	61 f0       	breq	.+24     	; 0x23d2 <uiStateMachine+0x184>
        {
          cmdBuffer[cmdBufferPtr++] = serialBufferPop();
    23ba:	01 e0       	ldi	r16, 0x01	; 1
    23bc:	01 0f       	add	r16, r17
    23be:	0e 94 29 0a 	call	0x1452	; 0x1452 <serialBufferPop>
    23c2:	e1 e0       	ldi	r30, 0x01	; 1
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	ec 0f       	add	r30, r28
    23c8:	fd 1f       	adc	r31, r29
    23ca:	e1 0f       	add	r30, r17
    23cc:	f1 1d       	adc	r31, r1
    23ce:	80 83       	st	Z, r24
    23d0:	10 2f       	mov	r17, r16
        }
        // This is a three-value command- x, y, ON/OFF.
        if (cmdBufferPtr > 2)
    23d2:	13 30       	cpi	r17, 0x03	; 3
    23d4:	70 f3       	brcs	.-36     	; 0x23b2 <uiStateMachine+0x164>
        {
          cmdBufferPtr = 0;
          // If the user *specifically* sends a 0 for the third byte, turn
          //  the pixel off. Otherwise, turn it on.
          if (cmdBuffer[2] == 0) pixel = OFF;
    23d6:	41 e0       	ldi	r20, 0x01	; 1
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	81 11       	cpse	r24, r1
    23dc:	40 e0       	ldi	r20, 0x00	; 0
          lcdDrawPixel(cmdBuffer[0], cmdBuffer[1], pixel);
    23de:	6a 81       	ldd	r22, Y+2	; 0x02
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
	
    
    default: // if the character that followed the '|' is not a valid command,
    break;   //  ignore it.
  }
}
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	1f 91       	pop	r17
    23f2:	0f 91       	pop	r16
        {
          cmdBufferPtr = 0;
          // If the user *specifically* sends a 0 for the third byte, turn
          //  the pixel off. Otherwise, turn it on.
          if (cmdBuffer[2] == 0) pixel = OFF;
          lcdDrawPixel(cmdBuffer[0], cmdBuffer[1], pixel);
    23f4:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <lcdDrawPixel>
  // We will *assume* a state of ON for pixel values; we can clear that later.
  PIX_VAL pixel = ON;
  // Now, let's figure out where to start, based on our command input. There's
  //  a lot of good information about the switch constants in the header file.

  switch(command)
    23f8:	10 e0       	ldi	r17, 0x00	; 0
    break;
    
    case DRAW_LINE:      
    while(1)  // Stay here until we are *told* to leave.
      {
        if (bufferSize > 0)
    23fa:	80 91 07 01 	lds	r24, 0x0107
    23fe:	88 23       	and	r24, r24
    2400:	61 f0       	breq	.+24     	; 0x241a <uiStateMachine+0x1cc>
        {
          cmdBuffer[cmdBufferPtr++] = serialBufferPop();
    2402:	01 e0       	ldi	r16, 0x01	; 1
    2404:	01 0f       	add	r16, r17
    2406:	0e 94 29 0a 	call	0x1452	; 0x1452 <serialBufferPop>
    240a:	e1 e0       	ldi	r30, 0x01	; 1
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	ec 0f       	add	r30, r28
    2410:	fd 1f       	adc	r31, r29
    2412:	e1 0f       	add	r30, r17
    2414:	f1 1d       	adc	r31, r1
    2416:	80 83       	st	Z, r24
    2418:	10 2f       	mov	r17, r16
        }
        // Five-byte command.
        if (cmdBufferPtr > 4)
    241a:	15 30       	cpi	r17, 0x05	; 5
    241c:	70 f3       	brcs	.-36     	; 0x23fa <uiStateMachine+0x1ac>
        {
          cmdBufferPtr = 0;
          // Same sort of logic- if the user sends a 0 for the pixel value,
          //  turn pixels off, otherwise, turn them on.
          if (cmdBuffer[4] == 0) pixel = OFF;
    241e:	01 e0       	ldi	r16, 0x01	; 1
    2420:	8d 81       	ldd	r24, Y+5	; 0x05
    2422:	81 11       	cpse	r24, r1
    2424:	00 e0       	ldi	r16, 0x00	; 0
          lcdDrawLine(cmdBuffer[0], cmdBuffer[1], // start point x,y
    2426:	2c 81       	ldd	r18, Y+4	; 0x04
    2428:	4b 81       	ldd	r20, Y+3	; 0x03
    242a:	6a 81       	ldd	r22, Y+2	; 0x02
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	0e 94 33 0c 	call	0x1866	; 0x1866 <lcdDrawLine>
                      pixel);                     // draw or erase?
          break; // This is where we tell to code to leave the while loop.
        }
      }
    
    break;
    2432:	9c c0       	rjmp	.+312    	; 0x256c <uiStateMachine+0x31e>
  // We will *assume* a state of ON for pixel values; we can clear that later.
  PIX_VAL pixel = ON;
  // Now, let's figure out where to start, based on our command input. There's
  //  a lot of good information about the switch constants in the header file.

  switch(command)
    2434:	10 e0       	ldi	r17, 0x00	; 0
    break;
    
    case DRAW_CIRCLE:      
    while(1)  // Stay here until we are *told* to leave.
      {
        if (bufferSize > 0)
    2436:	80 91 07 01 	lds	r24, 0x0107
    243a:	88 23       	and	r24, r24
    243c:	61 f0       	breq	.+24     	; 0x2456 <uiStateMachine+0x208>
        {
          cmdBuffer[cmdBufferPtr++] = serialBufferPop();
    243e:	01 e0       	ldi	r16, 0x01	; 1
    2440:	01 0f       	add	r16, r17
    2442:	0e 94 29 0a 	call	0x1452	; 0x1452 <serialBufferPop>
    2446:	e1 e0       	ldi	r30, 0x01	; 1
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	ec 0f       	add	r30, r28
    244c:	fd 1f       	adc	r31, r29
    244e:	e1 0f       	add	r30, r17
    2450:	f1 1d       	adc	r31, r1
    2452:	80 83       	st	Z, r24
    2454:	10 2f       	mov	r17, r16
        }
        // Four-byte command.
        if (cmdBufferPtr > 3)
    2456:	14 30       	cpi	r17, 0x04	; 4
    2458:	70 f3       	brcs	.-36     	; 0x2436 <uiStateMachine+0x1e8>
        {
          cmdBufferPtr = 0;
          if (cmdBuffer[3] == 0) pixel = OFF;
    245a:	21 e0       	ldi	r18, 0x01	; 1
    245c:	8c 81       	ldd	r24, Y+4	; 0x04
    245e:	81 11       	cpse	r24, r1
    2460:	20 e0       	ldi	r18, 0x00	; 0
          lcdDrawCircle(cmdBuffer[0], cmdBuffer[1], // center point x,y
    2462:	4b 81       	ldd	r20, Y+3	; 0x03
    2464:	6a 81       	ldd	r22, Y+2	; 0x02
    2466:	89 81       	ldd	r24, Y+1	; 0x01
	
    
    default: // if the character that followed the '|' is not a valid command,
    break;   //  ignore it.
  }
}
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	1f 91       	pop	r17
    2478:	0f 91       	pop	r16
        // Four-byte command.
        if (cmdBufferPtr > 3)
        {
          cmdBufferPtr = 0;
          if (cmdBuffer[3] == 0) pixel = OFF;
          lcdDrawCircle(cmdBuffer[0], cmdBuffer[1], // center point x,y
    247a:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <lcdDrawCircle>
  // We will *assume* a state of ON for pixel values; we can clear that later.
  PIX_VAL pixel = ON;
  // Now, let's figure out where to start, based on our command input. There's
  //  a lot of good information about the switch constants in the header file.

  switch(command)
    247e:	10 e0       	ldi	r17, 0x00	; 0
    break;
    
    case DRAW_BOX:    
    while(1)  // Stay here until we are *told* to leave.
      {
        if (bufferSize > 0)
    2480:	80 91 07 01 	lds	r24, 0x0107
    2484:	88 23       	and	r24, r24
    2486:	61 f0       	breq	.+24     	; 0x24a0 <uiStateMachine+0x252>
        {
          cmdBuffer[cmdBufferPtr++] = serialBufferPop();
    2488:	01 e0       	ldi	r16, 0x01	; 1
    248a:	01 0f       	add	r16, r17
    248c:	0e 94 29 0a 	call	0x1452	; 0x1452 <serialBufferPop>
    2490:	e1 e0       	ldi	r30, 0x01	; 1
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	ec 0f       	add	r30, r28
    2496:	fd 1f       	adc	r31, r29
    2498:	e1 0f       	add	r30, r17
    249a:	f1 1d       	adc	r31, r1
    249c:	80 83       	st	Z, r24
    249e:	10 2f       	mov	r17, r16
        }
        // Five-byte command.
        if (cmdBufferPtr > 4)
    24a0:	15 30       	cpi	r17, 0x05	; 5
    24a2:	70 f3       	brcs	.-36     	; 0x2480 <uiStateMachine+0x232>
        {
          cmdBufferPtr = 0;
          if (cmdBuffer[4] == 0) pixel = OFF;
    24a4:	01 e0       	ldi	r16, 0x01	; 1
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	81 11       	cpse	r24, r1
    24aa:	00 e0       	ldi	r16, 0x00	; 0
          lcdDrawBox(cmdBuffer[0], cmdBuffer[1], // start point x,y
    24ac:	2c 81       	ldd	r18, Y+4	; 0x04
    24ae:	4b 81       	ldd	r20, Y+3	; 0x03
    24b0:	6a 81       	ldd	r22, Y+2	; 0x02
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <lcdDrawBox>
                     pixel);                     // draw or erase?
          break; // This is where we tell to code to leave the while loop.
        }
      }
    
    break;
    24b8:	59 c0       	rjmp	.+178    	; 0x256c <uiStateMachine+0x31e>
  // We will *assume* a state of ON for pixel values; we can clear that later.
  PIX_VAL pixel = ON;
  // Now, let's figure out where to start, based on our command input. There's
  //  a lot of good information about the switch constants in the header file.

  switch(command)
    24ba:	10 e0       	ldi	r17, 0x00	; 0
    break;
    
    case ERASE_BLOCK:    
    while(1)  // Stay here until we are *told* to leave.
      {
        if (bufferSize > 0)
    24bc:	80 91 07 01 	lds	r24, 0x0107
    24c0:	88 23       	and	r24, r24
    24c2:	61 f0       	breq	.+24     	; 0x24dc <uiStateMachine+0x28e>
        {
          cmdBuffer[cmdBufferPtr++] = serialBufferPop();
    24c4:	01 e0       	ldi	r16, 0x01	; 1
    24c6:	01 0f       	add	r16, r17
    24c8:	0e 94 29 0a 	call	0x1452	; 0x1452 <serialBufferPop>
    24cc:	e1 e0       	ldi	r30, 0x01	; 1
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	ec 0f       	add	r30, r28
    24d2:	fd 1f       	adc	r31, r29
    24d4:	e1 0f       	add	r30, r17
    24d6:	f1 1d       	adc	r31, r1
    24d8:	80 83       	st	Z, r24
    24da:	10 2f       	mov	r17, r16
        }
        // Four-byte command.
        if (cmdBufferPtr > 3)
    24dc:	14 30       	cpi	r17, 0x04	; 4
    24de:	70 f3       	brcs	.-36     	; 0x24bc <uiStateMachine+0x26e>
        {
          cmdBufferPtr = 0;
          lcdEraseBlock(cmdBuffer[0], cmdBuffer[1], // start point x,y
    24e0:	2c 81       	ldd	r18, Y+4	; 0x04
    24e2:	4b 81       	ldd	r20, Y+3	; 0x03
    24e4:	6a 81       	ldd	r22, Y+2	; 0x02
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
	
    
    default: // if the character that followed the '|' is not a valid command,
    break;   //  ignore it.
  }
}
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	1f 91       	pop	r17
    24f8:	0f 91       	pop	r16
        }
        // Four-byte command.
        if (cmdBufferPtr > 3)
        {
          cmdBufferPtr = 0;
          lcdEraseBlock(cmdBuffer[0], cmdBuffer[1], // start point x,y
    24fa:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <lcdEraseBlock>
  // We will *assume* a state of ON for pixel values; we can clear that later.
  PIX_VAL pixel = ON;
  // Now, let's figure out where to start, based on our command input. There's
  //  a lot of good information about the switch constants in the header file.

  switch(command)
    24fe:	10 e0       	ldi	r17, 0x00	; 0
    break;    
    
    case DRAW_SPRITE:      
    while(1)  // Stay here until we are *told* to leave.
      {
        if (bufferSize > 0)
    2500:	80 91 07 01 	lds	r24, 0x0107
    2504:	88 23       	and	r24, r24
    2506:	61 f0       	breq	.+24     	; 0x2520 <uiStateMachine+0x2d2>
        {
          cmdBuffer[cmdBufferPtr++] = serialBufferPop();
    2508:	01 e0       	ldi	r16, 0x01	; 1
    250a:	01 0f       	add	r16, r17
    250c:	0e 94 29 0a 	call	0x1452	; 0x1452 <serialBufferPop>
    2510:	e1 e0       	ldi	r30, 0x01	; 1
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	ec 0f       	add	r30, r28
    2516:	fd 1f       	adc	r31, r29
    2518:	e1 0f       	add	r30, r17
    251a:	f1 1d       	adc	r31, r1
    251c:	80 83       	st	Z, r24
    251e:	10 2f       	mov	r17, r16
        }
        // Five-byte command.
        if (cmdBufferPtr > 4)
    2520:	15 30       	cpi	r17, 0x05	; 5
    2522:	70 f3       	brcs	.-36     	; 0x2500 <uiStateMachine+0x2b2>
        {
          cmdBufferPtr = 0;
          if (cmdBuffer[4] == 0) pixel = OFF;
    2524:	01 e0       	ldi	r16, 0x01	; 1
    2526:	8d 81       	ldd	r24, Y+5	; 0x05
    2528:	81 11       	cpse	r24, r1
    252a:	00 e0       	ldi	r16, 0x00	; 0
          lcdDrawSprite(cmdBuffer[0], cmdBuffer[1], // upper left x,y
    252c:	2c 81       	ldd	r18, Y+4	; 0x04
    252e:	4b 81       	ldd	r20, Y+3	; 0x03
    2530:	6a 81       	ldd	r22, Y+2	; 0x02
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <lcdDrawSprite>
                        pixel);                     // draw or erase?
          break; // This is where we tell to code to leave the while loop.
        }
      }
 
    break;
    2538:	19 c0       	rjmp	.+50     	; 0x256c <uiStateMachine+0x31e>
	
	case DRAW_BIG:
		while(1){
			if(bufferSize > 0){
    253a:	80 91 07 01 	lds	r24, 0x0107
    253e:	88 23       	and	r24, r24
    2540:	61 f0       	breq	.+24     	; 0x255a <uiStateMachine+0x30c>
				cmdBuffer[cmdBufferPtr++] = serialBufferPop();
    2542:	01 e0       	ldi	r16, 0x01	; 1
    2544:	01 0f       	add	r16, r17
    2546:	0e 94 29 0a 	call	0x1452	; 0x1452 <serialBufferPop>
    254a:	e1 e0       	ldi	r30, 0x01	; 1
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	ec 0f       	add	r30, r28
    2550:	fd 1f       	adc	r31, r29
    2552:	e1 0f       	add	r30, r17
    2554:	f1 1d       	adc	r31, r1
    2556:	80 83       	st	Z, r24
    2558:	10 2f       	mov	r17, r16
			}
			// 3 byte command
			if(cmdBufferPtr > 2){
    255a:	13 30       	cpi	r17, 0x03	; 3
    255c:	70 f3       	brcs	.-36     	; 0x253a <uiStateMachine+0x2ec>
				cmdBufferPtr = 0;
				lcdDrawBig(cmdBuffer[0], cmdBuffer[1], cmdBuffer[2]);
    255e:	4b 81       	ldd	r20, Y+3	; 0x03
    2560:	6a 81       	ldd	r22, Y+2	; 0x02
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	0e 94 96 10 	call	0x212c	; 0x212c <lcdDrawBig>
    case DRAW_SPRITE:      
    while(1)  // Stay here until we are *told* to leave.
      {
        if (bufferSize > 0)
        {
          cmdBuffer[cmdBufferPtr++] = serialBufferPop();
    2568:	10 e0       	ldi	r17, 0x00	; 0
    256a:	e7 cf       	rjmp	.-50     	; 0x253a <uiStateMachine+0x2ec>
	
    
    default: // if the character that followed the '|' is not a valid command,
    break;   //  ignore it.
  }
}
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	08 95       	ret

00002580 <toggleSplash>:
// Toggle the splash display mode. Default is ON. Only the LSb of the byte
//  is actually checked. Since default mode is ON, and that equates to a '1'
//  in the LSb, we're okay just reading and writing things as they are.
void toggleSplash(void)
{
  uint8_t temp = eeprom_read_byte((const uint8_t *)SPLASH);
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	0e 94 80 14 	call	0x2900	; 0x2900 <__eerd_byte_m168>
  temp ^= 0x01;
    2588:	61 e0       	ldi	r22, 0x01	; 1
    258a:	68 27       	eor	r22, r24
  eeprom_write_byte((uint8_t *)SPLASH, temp);
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__eewr_byte_m168>

00002594 <getSplash>:
}

uint8_t getSplash(void)
{
  return eeprom_read_byte((const uint8_t *)SPLASH);
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__eerd_byte_m168>

0000259c <toggleReverse>:
//  the value stored in bit 0 of the EEPROM location is the complement of the
//  actual value, i.e., a '0' in the LSb indicates that reverse mode will be
//  enabled on power up, and vice versa.
void toggleReverse(void)
{
  uint8_t temp = 0x01 & eeprom_read_byte((const uint8_t *)REVERSE);
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	0e 94 80 14 	call	0x2900	; 0x2900 <__eerd_byte_m168>
  temp ^= 0x01;
    25a4:	68 2f       	mov	r22, r24
    25a6:	60 95       	com	r22
    25a8:	61 70       	andi	r22, 0x01	; 1
  eeprom_write_byte((uint8_t *)REVERSE, temp);
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__eewr_byte_m168>

000025b2 <getReverse>:

// By complementing this before we return it, we ensure that the default state
//  of 0xff corresponds to reverse mode OFF.
uint8_t getReverse(void)
{
  return ~eeprom_read_byte((const uint8_t *)REVERSE);
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 80 14 	call	0x2900	; 0x2900 <__eerd_byte_m168>
}
    25ba:	80 95       	com	r24
    25bc:	08 95       	ret

000025be <setBaudRate>:

// We don't want the user to set an invalid baud rate, so we don't allow it.
void setBaudRate(char baudMode)
{
  if (baudMode >= '1' && baudMode <= '6')
    25be:	9f ec       	ldi	r25, 0xCF	; 207
    25c0:	98 0f       	add	r25, r24
    25c2:	96 30       	cpi	r25, 0x06	; 6
    25c4:	28 f4       	brcc	.+10     	; 0x25d0 <setBaudRate+0x12>
    eeprom_write_byte((uint8_t *)BAUDRATE, baudMode);
    25c6:	68 2f       	mov	r22, r24
    25c8:	82 e0       	ldi	r24, 0x02	; 2
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__eewr_byte_m168>
    25d0:	08 95       	ret

000025d2 <getBaudRate>:

// We check the baud rate when we read it, anyhow, and if the value stored
//  in EEPROM isn't valid, we default to 115200 baud.
char getBaudRate(void)
{
  return eeprom_read_byte((const uint8_t *)BAUDRATE);
    25d2:	82 e0       	ldi	r24, 0x02	; 2
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__eerd_byte_m168>

000025da <setBacklightLevel>:
// Anything greater than 100 defaults to 100, which is a percentage. Since we
//  don't care what it is, we don't have to check to make sure the value is
//  actually valid.
void setBacklightLevel(uint8_t newLevel)
{
  eeprom_write_byte((uint8_t *)BACKLIGHT, newLevel);
    25da:	68 2f       	mov	r22, r24
    25dc:	83 e0       	ldi	r24, 0x03	; 3
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__eewr_byte_m168>

000025e4 <getBacklightLevel>:
}

// Likewise, we don't have to check to see if this value is valid, either.
uint8_t getBacklightLevel(void)
{
  return eeprom_read_byte((const uint8_t *)BACKLIGHT);
    25e4:	83 e0       	ldi	r24, 0x03	; 3
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__eerd_byte_m168>

000025ec <demo>:
extern uint16_t textLength;
extern uint8_t  yDim;
extern uint8_t  xDim;

void demo(void)
{
    25ec:	bf 92       	push	r11
    25ee:	cf 92       	push	r12
    25f0:	df 92       	push	r13
    25f2:	ef 92       	push	r14
    25f4:	ff 92       	push	r15
    25f6:	0f 93       	push	r16
    25f8:	1f 93       	push	r17
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	c0 54       	subi	r28, 0x40	; 64
    2604:	d1 09       	sbc	r29, r1
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	0b e8       	ldi	r16, 0x8B	; 139
    2612:	1f e0       	ldi	r17, 0x0F	; 15
    2614:	2d ef       	ldi	r18, 0xFD	; 253
    2616:	f2 2e       	mov	r15, r18
  // We're going to start out by printing some strings that are stored in
  //  flash memory.
  for (i = 0; i<6; i++)
  {
    // Copy the string from flash into a RAM buffer.
    strcpy_P(buffer, (PGM_P)pgm_read_word(&(wantYouGone[i])));
    2618:	f8 01       	movw	r30, r16
    261a:	65 91       	lpm	r22, Z+
    261c:	74 91       	lpm	r23, Z
    261e:	ce 01       	movw	r24, r28
    2620:	01 96       	adiw	r24, 0x01	; 1
    2622:	0e 94 79 14 	call	0x28f2	; 0x28f2 <strcpy_P>
    // Iterate over the buffer until you hit the end, drawing each character
    //  as it is encountered and delaying between lines.
    while(buffer[j] != '\0')
    2626:	e1 2c       	mov	r14, r1
    2628:	e1 e0       	ldi	r30, 0x01	; 1
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	ec 0f       	add	r30, r28
    262e:	fd 1f       	adc	r31, r29
    2630:	ee 0d       	add	r30, r14
    2632:	f1 1d       	adc	r31, r1
    2634:	80 81       	ld	r24, Z
    2636:	88 23       	and	r24, r24
    2638:	21 f0       	breq	.+8      	; 0x2642 <demo+0x56>
    {
      lcdDrawChar(buffer[j++]);
    263a:	e3 94       	inc	r14
    263c:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <lcdDrawChar>
    2640:	f3 cf       	rjmp	.-26     	; 0x2628 <demo+0x3c>
    }
    lcdDrawChar('\r');
    2642:	8d e0       	ldi	r24, 0x0D	; 13
    2644:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <lcdDrawChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2648:	2f ef       	ldi	r18, 0xFF	; 255
    264a:	8e e9       	ldi	r24, 0x9E	; 158
    264c:	94 e2       	ldi	r25, 0x24	; 36
    264e:	21 50       	subi	r18, 0x01	; 1
    2650:	80 40       	sbci	r24, 0x00	; 0
    2652:	90 40       	sbci	r25, 0x00	; 0
    2654:	e1 f7       	brne	.-8      	; 0x264e <demo+0x62>
    2656:	00 c0       	rjmp	.+0      	; 0x2658 <demo+0x6c>
    2658:	00 00       	nop
    _delay_ms(750);
    j = 0;  // Before each line, we need to reset our string counter.
    // Also, for dramatic effect, we want to do a couple of things after
    //  specific lines.
    if ((i == 4) | (i == 3))
    265a:	21 e0       	ldi	r18, 0x01	; 1
    265c:	2f 15       	cp	r18, r15
    265e:	98 f0       	brcs	.+38     	; 0x2686 <demo+0x9a>
    2660:	8f ef       	ldi	r24, 0xFF	; 255
    2662:	9e e9       	ldi	r25, 0x9E	; 158
    2664:	24 e2       	ldi	r18, 0x24	; 36
    2666:	81 50       	subi	r24, 0x01	; 1
    2668:	90 40       	sbci	r25, 0x00	; 0
    266a:	20 40       	sbci	r18, 0x00	; 0
    266c:	e1 f7       	brne	.-8      	; 0x2666 <demo+0x7a>
    266e:	00 c0       	rjmp	.+0      	; 0x2670 <demo+0x84>
    2670:	00 00       	nop
    {
      _delay_ms(750);
      lcdClearScreen();
    2672:	0e 94 04 0c 	call	0x1808	; 0x1808 <lcdClearScreen>
      cursorPos[0] = 0;
    2676:	10 92 0e 01 	sts	0x010E, r1
      cursorPos[1] = (yDim/2)-8;
    267a:	80 91 00 01 	lds	r24, 0x0100
    267e:	86 95       	lsr	r24
    2680:	88 50       	subi	r24, 0x08	; 8
    2682:	80 93 0f 01 	sts	0x010F, r24
    2686:	0e 5f       	subi	r16, 0xFE	; 254
    2688:	1f 4f       	sbci	r17, 0xFF	; 255
    268a:	f3 94       	inc	r15
  uint8_t i = 0;
  uint8_t j = 0;
  
  // We're going to start out by printing some strings that are stored in
  //  flash memory.
  for (i = 0; i<6; i++)
    268c:	83 e0       	ldi	r24, 0x03	; 3
    268e:	f8 12       	cpse	r15, r24
    2690:	c3 cf       	rjmp	.-122    	; 0x2618 <demo+0x2c>
    2692:	dd 24       	eor	r13, r13
    2694:	d3 94       	inc	r13
    2696:	f1 2c       	mov	r15, r1
  {
    for (i = 0; i<(xDim-7); i+=8)
    {
      if (onOff) lcdDrawSprite(i, j, 127, '0', ON);
      else       lcdDrawSprite(i, j, 127, '0', OFF);
      onOff ^= 0x01;
    2698:	ee 24       	eor	r14, r14
    269a:	e3 94       	inc	r14
  //  Let's draw a sprite-based checkerboard. Sprite 127 is probably just a
  //  solid block; after all, that's what it is by default. We'll iterate over
  //  the whole screen, drawing ON and OFF sprites.
  
  uint8_t onOff = 0x01;  // Is the first square ON or OFF?
  for (j = 0; j<(yDim-7); j+=8)
    269c:	2f 2d       	mov	r18, r15
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	80 91 00 01 	lds	r24, 0x0100
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	07 97       	sbiw	r24, 0x07	; 7
    26a8:	28 17       	cp	r18, r24
    26aa:	39 07       	cpc	r19, r25
    26ac:	ec f4       	brge	.+58     	; 0x26e8 <demo+0xfc>
    26ae:	10 e0       	ldi	r17, 0x00	; 0
  {
    for (i = 0; i<(xDim-7); i+=8)
    26b0:	41 2f       	mov	r20, r17
    26b2:	50 e0       	ldi	r21, 0x00	; 0
    26b4:	20 91 01 01 	lds	r18, 0x0101
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	27 50       	subi	r18, 0x07	; 7
    26bc:	31 09       	sbc	r19, r1
    26be:	42 17       	cp	r20, r18
    26c0:	53 07       	cpc	r21, r19
    26c2:	74 f4       	brge	.+28     	; 0x26e0 <demo+0xf4>
    {
      if (onOff) lcdDrawSprite(i, j, 127, '0', ON);
    26c4:	dd 20       	and	r13, r13
    26c6:	11 f0       	breq	.+4      	; 0x26cc <demo+0xe0>
    26c8:	00 e0       	ldi	r16, 0x00	; 0
    26ca:	01 c0       	rjmp	.+2      	; 0x26ce <demo+0xe2>
      else       lcdDrawSprite(i, j, 127, '0', OFF);
    26cc:	01 e0       	ldi	r16, 0x01	; 1
    26ce:	20 e3       	ldi	r18, 0x30	; 48
    26d0:	4f e7       	ldi	r20, 0x7F	; 127
    26d2:	6f 2d       	mov	r22, r15
    26d4:	81 2f       	mov	r24, r17
    26d6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <lcdDrawSprite>
      onOff ^= 0x01;
    26da:	de 24       	eor	r13, r14
  //  the whole screen, drawing ON and OFF sprites.
  
  uint8_t onOff = 0x01;  // Is the first square ON or OFF?
  for (j = 0; j<(yDim-7); j+=8)
  {
    for (i = 0; i<(xDim-7); i+=8)
    26dc:	18 5f       	subi	r17, 0xF8	; 248
    26de:	e8 cf       	rjmp	.-48     	; 0x26b0 <demo+0xc4>
    {
      if (onOff) lcdDrawSprite(i, j, 127, '0', ON);
      else       lcdDrawSprite(i, j, 127, '0', OFF);
      onOff ^= 0x01;
    }
    onOff ^= 0x01;
    26e0:	de 24       	eor	r13, r14
  //  Let's draw a sprite-based checkerboard. Sprite 127 is probably just a
  //  solid block; after all, that's what it is by default. We'll iterate over
  //  the whole screen, drawing ON and OFF sprites.
  
  uint8_t onOff = 0x01;  // Is the first square ON or OFF?
  for (j = 0; j<(yDim-7); j+=8)
    26e2:	98 e0       	ldi	r25, 0x08	; 8
    26e4:	f9 0e       	add	r15, r25
    26e6:	da cf       	rjmp	.-76     	; 0x269c <demo+0xb0>
    26e8:	2f ef       	ldi	r18, 0xFF	; 255
    26ea:	89 e6       	ldi	r24, 0x69	; 105
    26ec:	98 e1       	ldi	r25, 0x18	; 24
    26ee:	21 50       	subi	r18, 0x01	; 1
    26f0:	80 40       	sbci	r24, 0x00	; 0
    26f2:	90 40       	sbci	r25, 0x00	; 0
    26f4:	e1 f7       	brne	.-8      	; 0x26ee <demo+0x102>
    26f6:	00 c0       	rjmp	.+0      	; 0x26f8 <demo+0x10c>
    26f8:	00 00       	nop
  }  
  
  _delay_ms(500);
  
  // Next, let's draw some awesome concentric circles across the screen.
  for (i = 2; i < (xDim/2); i += 8)
    26fa:	12 e0       	ldi	r17, 0x02	; 2
    26fc:	80 91 01 01 	lds	r24, 0x0101
    2700:	86 95       	lsr	r24
    2702:	18 17       	cp	r17, r24
    2704:	90 f4       	brcc	.+36     	; 0x272a <demo+0x13e>
  {
    lcdDrawCircle(xDim/2, yDim/2, i, ON);
    2706:	60 91 00 01 	lds	r22, 0x0100
    270a:	66 95       	lsr	r22
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	41 2f       	mov	r20, r17
    2710:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <lcdDrawCircle>
    2714:	2f ef       	ldi	r18, 0xFF	; 255
    2716:	84 e3       	ldi	r24, 0x34	; 52
    2718:	9c e0       	ldi	r25, 0x0C	; 12
    271a:	21 50       	subi	r18, 0x01	; 1
    271c:	80 40       	sbci	r24, 0x00	; 0
    271e:	90 40       	sbci	r25, 0x00	; 0
    2720:	e1 f7       	brne	.-8      	; 0x271a <demo+0x12e>
    2722:	00 c0       	rjmp	.+0      	; 0x2724 <demo+0x138>
    2724:	00 00       	nop
  }  
  
  _delay_ms(500);
  
  // Next, let's draw some awesome concentric circles across the screen.
  for (i = 2; i < (xDim/2); i += 8)
    2726:	18 5f       	subi	r17, 0xF8	; 248
    2728:	e9 cf       	rjmp	.-46     	; 0x26fc <demo+0x110>
    272a:	ff 24       	eor	r15, r15
    272c:	f3 94       	inc	r15
    272e:	10 e0       	ldi	r17, 0x00	; 0
  {
    for (i = 0; i<(xDim-7); i+=8)
    {
      if (openShut) lcdDrawSprite(i, j, 4, '0', ON);
      else          lcdDrawSprite(i, j, 5, '0', ON);
      openShut ^= 0x01;
    2730:	ee 24       	eor	r14, r14
    2732:	e3 94       	inc	r14
    _delay_ms(250);
  } 
    
  uint8_t openShut = 0x01;
  // Now we're going to send in Pac-man and a ghost to clean up.
  for (j = 0; j<(yDim-7); j+=8)
    2734:	21 2f       	mov	r18, r17
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	80 91 00 01 	lds	r24, 0x0100
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	07 97       	sbiw	r24, 0x07	; 7
    2740:	28 17       	cp	r18, r24
    2742:	39 07       	cpc	r19, r25
    2744:	0c f0       	brlt	.+2      	; 0x2748 <demo+0x15c>
    2746:	40 c0       	rjmp	.+128    	; 0x27c8 <demo+0x1dc>
    2748:	d1 2c       	mov	r13, r1
    274a:	87 e0       	ldi	r24, 0x07	; 7
    274c:	c8 2e       	mov	r12, r24
    274e:	c1 0e       	add	r12, r17
  {
    for (i = 0; i<(xDim-7); i+=8)
    2750:	ed 2d       	mov	r30, r13
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	40 91 01 01 	lds	r20, 0x0101
    2758:	50 e0       	ldi	r21, 0x00	; 0
    275a:	47 50       	subi	r20, 0x07	; 7
    275c:	51 09       	sbc	r21, r1
    275e:	e4 17       	cp	r30, r20
    2760:	f5 07       	cpc	r31, r21
    2762:	84 f5       	brge	.+96     	; 0x27c4 <demo+0x1d8>
    {
      if (openShut) lcdDrawSprite(i, j, 4, '0', ON);
    2764:	00 e0       	ldi	r16, 0x00	; 0
    2766:	20 e3       	ldi	r18, 0x30	; 48
    2768:	ff 20       	and	r15, r15
    276a:	11 f0       	breq	.+4      	; 0x2770 <demo+0x184>
    276c:	44 e0       	ldi	r20, 0x04	; 4
    276e:	01 c0       	rjmp	.+2      	; 0x2772 <demo+0x186>
      else          lcdDrawSprite(i, j, 5, '0', ON);
    2770:	45 e0       	ldi	r20, 0x05	; 5
    2772:	61 2f       	mov	r22, r17
    2774:	8d 2d       	mov	r24, r13
    2776:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <lcdDrawSprite>
      openShut ^= 0x01;
    277a:	fe 24       	eor	r15, r14
    277c:	9a e0       	ldi	r25, 0x0A	; 10
    277e:	b9 2e       	mov	r11, r25
    2780:	bd 0c       	add	r11, r13
      lcdDrawSprite(i+10, j, 0, '0', ON);
    2782:	00 e0       	ldi	r16, 0x00	; 0
    2784:	20 e3       	ldi	r18, 0x30	; 48
    2786:	40 e0       	ldi	r20, 0x00	; 0
    2788:	61 2f       	mov	r22, r17
    278a:	8b 2d       	mov	r24, r11
    278c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <lcdDrawSprite>
    2790:	2f ef       	ldi	r18, 0xFF	; 255
    2792:	83 ec       	ldi	r24, 0xC3	; 195
    2794:	99 e0       	ldi	r25, 0x09	; 9
    2796:	21 50       	subi	r18, 0x01	; 1
    2798:	80 40       	sbci	r24, 0x00	; 0
    279a:	90 40       	sbci	r25, 0x00	; 0
    279c:	e1 f7       	brne	.-8      	; 0x2796 <demo+0x1aa>
    279e:	00 c0       	rjmp	.+0      	; 0x27a0 <demo+0x1b4>
    27a0:	00 00       	nop
    27a2:	47 e0       	ldi	r20, 0x07	; 7
    27a4:	4d 0d       	add	r20, r13
      _delay_ms(200);
      lcdEraseBlock(i, j, i+7, j+7);
    27a6:	2c 2d       	mov	r18, r12
    27a8:	61 2f       	mov	r22, r17
    27aa:	8d 2d       	mov	r24, r13
    27ac:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <lcdEraseBlock>
    27b0:	41 e1       	ldi	r20, 0x11	; 17
    27b2:	4d 0d       	add	r20, r13
      lcdEraseBlock(i+10, j, i+17, j+7);
    27b4:	2c 2d       	mov	r18, r12
    27b6:	61 2f       	mov	r22, r17
    27b8:	8b 2d       	mov	r24, r11
    27ba:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <lcdEraseBlock>
    
  uint8_t openShut = 0x01;
  // Now we're going to send in Pac-man and a ghost to clean up.
  for (j = 0; j<(yDim-7); j+=8)
  {
    for (i = 0; i<(xDim-7); i+=8)
    27be:	28 e0       	ldi	r18, 0x08	; 8
    27c0:	d2 0e       	add	r13, r18
    27c2:	c6 cf       	rjmp	.-116    	; 0x2750 <demo+0x164>
    _delay_ms(250);
  } 
    
  uint8_t openShut = 0x01;
  // Now we're going to send in Pac-man and a ghost to clean up.
  for (j = 0; j<(yDim-7); j+=8)
    27c4:	18 5f       	subi	r17, 0xF8	; 248
    27c6:	b6 cf       	rjmp	.-148    	; 0x2734 <demo+0x148>
      _delay_ms(200);
      lcdEraseBlock(i, j, i+7, j+7);
      lcdEraseBlock(i+10, j, i+17, j+7);
    }
  } 
}
    27c8:	c0 5c       	subi	r28, 0xC0	; 192
    27ca:	df 4f       	sbci	r29, 0xFF	; 255
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	f8 94       	cli
    27d0:	de bf       	out	0x3e, r29	; 62
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	cd bf       	out	0x3d, r28	; 61
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    27de:	ff 90       	pop	r15
    27e0:	ef 90       	pop	r14
    27e2:	df 90       	pop	r13
    27e4:	cf 90       	pop	r12
    27e6:	bf 90       	pop	r11
    27e8:	08 95       	ret

000027ea <main>:
int main(void)
{
  // The first thing we want to check is if we have a large or small
  //  display on our hands. We can tell because PB3 will be pulled high if
  //  the display is large (hopefully; that's done at build time).
  PORTB |= 0x08;   // Enable the pull-up on PB3.
    27ea:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    27ec:	2a e1       	ldi	r18, 0x1A	; 26
    27ee:	2a 95       	dec	r18
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <main+0x4>
    27f2:	00 c0       	rjmp	.+0      	; 0x27f4 <main+0xa>
  _delay_us(5);    // Wait a few us for the pin to change- this is important!
 // uint8_t portTemp = PINB;  // Cache the pins status...
 // if ((portTemp & 0x08) == 0x08)  // ...and check to see if what the pin says.
  //{
    display = LARGE;  // If the pin is high, call it a large display.
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	80 93 08 01 	sts	0x0108, r24
  //}
  //else 
  //{
    //display = SMALL;  // If the pin is low, it's a small display.
  //}
  PORTB &= ~0x08; // Disable the pull-up on PB3.
    27fa:	2b 98       	cbi	0x05, 3	; 5
  
  // ioInit() configures the IO pins as we'll need them for the rest of the
  //  code; once we've identified our display size, we'll do the pins
  //  accordingly.
  ioInit();
    27fc:	0e 94 ef 10 	call	0x21de	; 0x21de <ioInit>
  
  // We use a timer (timer1) for our PWM of the backlight. This function sets
  //  that up as needed.
  timerInit();
    2800:	0e 94 53 08 	call	0x10a6	; 0x10a6 <timerInit>
  
  // By default, we want to start up at 115200BPS. In a second, we'll check
  //  for any input from the user to see if we should remain at 115200 or
  //  check the EEPROM for a different speed.
  serialInit(BR115200);
    2804:	80 e1       	ldi	r24, 0x10	; 16
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 b6 09 	call	0x136c	; 0x136c <serialInit>
  
  // Enable interrupts. The only thing we use interrupts for is serial data.
  sei();
    280c:	78 94       	sei
  
  // Check to see if we want to be in white-on-black mode (1) or black-on-white
  //   mode (reverse = 0).
  reverse = 0x01 & getReverse();
    280e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <getReverse>
    2812:	81 70       	andi	r24, 0x01	; 1
    2814:	80 93 02 01 	sts	0x0102, r24
  
  // Configure the LCD as it should be configured; we leave this until late
  //  in the process more as a relic of development than anything else, b/c
  //  it was useful to have the other stuff setup first.
  lcdConfig();
    2818:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <lcdConfig>
  
  // Clear the screen for good measure. This *may* not be necessary, but for
  //  the large display, it definitely is, as the power-on status of that one
  //  is pure garbage, everywhere.
  lcdClearScreen();
    281c:	0e 94 04 0c 	call	0x1808	; 0x1808 <lcdClearScreen>
  
  // Draw the splash, if the EEPROM value says we should.
  if ((getSplash() & 0x01)==1) lcdDrawLogo();
    2820:	0e 94 ca 12 	call	0x2594	; 0x2594 <getSplash>
    2824:	80 fd       	sbrc	r24, 0
    2826:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <lcdDrawLogo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    282a:	8f ef       	ldi	r24, 0xFF	; 255
    282c:	93 ed       	ldi	r25, 0xD3	; 211
    282e:	20 e3       	ldi	r18, 0x30	; 48
    2830:	81 50       	subi	r24, 0x01	; 1
    2832:	90 40       	sbci	r25, 0x00	; 0
    2834:	20 40       	sbci	r18, 0x00	; 0
    2836:	e1 f7       	brne	.-8      	; 0x2830 <main+0x46>
    2838:	00 c0       	rjmp	.+0      	; 0x283a <main+0x50>
    283a:	00 00       	nop
  //  and get back to 115200, if they so desire.
  _delay_ms(1000);
  
  // If the user has send *any* character during the splash time, we should
  //  skip this switch and set our baud rate back to 115200.
  if (bufferSize == 0)
    283c:	80 91 07 01 	lds	r24, 0x0107
    2840:	81 11       	cpse	r24, r1
    2842:	22 c0       	rjmp	.+68     	; 0x2888 <main+0x9e>
  {
    switch(getBaudRate())
    2844:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <getBaudRate>
    2848:	83 33       	cpi	r24, 0x33	; 51
    284a:	99 f0       	breq	.+38     	; 0x2872 <main+0x88>
    284c:	38 f4       	brcc	.+14     	; 0x285c <main+0x72>
    284e:	81 33       	cpi	r24, 0x31	; 49
    2850:	69 f0       	breq	.+26     	; 0x286c <main+0x82>
    2852:	82 33       	cpi	r24, 0x32	; 50
    2854:	e1 f4       	brne	.+56     	; 0x288e <main+0xa4>
    {
      case '1':
      serialInit(BR4800);
      break;
      case '2':
      serialInit(BR9600);
    2856:	8f ec       	ldi	r24, 0xCF	; 207
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	13 c0       	rjmp	.+38     	; 0x2882 <main+0x98>
  
  // If the user has send *any* character during the splash time, we should
  //  skip this switch and set our baud rate back to 115200.
  if (bufferSize == 0)
  {
    switch(getBaudRate())
    285c:	85 33       	cpi	r24, 0x35	; 53
    285e:	79 f0       	breq	.+30     	; 0x287e <main+0x94>
    2860:	58 f0       	brcs	.+22     	; 0x2878 <main+0x8e>
    2862:	86 33       	cpi	r24, 0x36	; 54
    2864:	a1 f4       	brne	.+40     	; 0x288e <main+0xa4>
      break;
      case '5':
      serialInit(BR57600);
      break;
      case '6':
      serialInit(BR115200);
    2866:	80 e1       	ldi	r24, 0x10	; 16
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	0b c0       	rjmp	.+22     	; 0x2882 <main+0x98>
  if (bufferSize == 0)
  {
    switch(getBaudRate())
    {
      case '1':
      serialInit(BR4800);
    286c:	80 ea       	ldi	r24, 0xA0	; 160
    286e:	91 e0       	ldi	r25, 0x01	; 1
    2870:	08 c0       	rjmp	.+16     	; 0x2882 <main+0x98>
      break;
      case '2':
      serialInit(BR9600);
      break;
      case '3':
      serialInit(BR19200);
    2872:	87 e6       	ldi	r24, 0x67	; 103
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	05 c0       	rjmp	.+10     	; 0x2882 <main+0x98>
      break;
      case '4':
      serialInit(BR38400);
    2878:	83 e3       	ldi	r24, 0x33	; 51
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <main+0x98>
      break;
      case '5':
      serialInit(BR57600);
    287e:	82 e2       	ldi	r24, 0x22	; 34
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	0e 94 b6 09 	call	0x136c	; 0x136c <serialInit>
      break;
    2886:	03 c0       	rjmp	.+6      	; 0x288e <main+0xa4>
      break;
      default:
      break;
    }
  }
  else setBaudRate('6');
    2888:	86 e3       	ldi	r24, 0x36	; 54
    288a:	0e 94 df 12 	call	0x25be	; 0x25be <setBaudRate>
  
  // Clear off the splash.
  lcdClearScreen();
    288e:	0e 94 04 0c 	call	0x1808	; 0x1808 <lcdClearScreen>
  
  // Clear the serial buffer. Any data sent during that initial 1s period is
  //  lost; we don't care because we know that data *should* only be for an
  //  emergency baud rate reset.
  clearBuffer();
    2892:	0e 94 49 0a 	call	0x1492	; 0x1492 <clearBuffer>
  //  buffered by an interrupt, and we'll pop that buffer here (and in ui.c)
  //  and make decisions on what to do with it.
  while(1)
  {
    // If there's *anything* in the buffer, we need to deal with it.
    while (bufferSize > 0)
    2896:	80 91 07 01 	lds	r24, 0x0107
    289a:	88 23       	and	r24, r24
    289c:	e1 f3       	breq	.-8      	; 0x2896 <main+0xac>
    {
      // serialBufferPop() pulls data from the top of the FIFO that comprises
      //  our serial port buffer, automatically changing the pointers and
      //  stack size.
      char bufferChar = serialBufferPop();
    289e:	0e 94 29 0a 	call	0x1452	; 0x1452 <serialBufferPop>
      // If the character received is the command escape character ('|')...
      if (bufferChar == '|')
    28a2:	8c 37       	cpi	r24, 0x7C	; 124
    28a4:	49 f4       	brne	.+18     	; 0x28b8 <main+0xce>
      {
        while (bufferSize == 0);    // ...wait for the next character...
    28a6:	80 91 07 01 	lds	r24, 0x0107
    28aa:	88 23       	and	r24, r24
    28ac:	e1 f3       	breq	.-8      	; 0x28a6 <main+0xbc>
        bufferChar = serialBufferPop(); // ...fetch the character..
    28ae:	0e 94 29 0a 	call	0x1452	; 0x1452 <serialBufferPop>
        uiStateMachine(bufferChar); // ... then see what to do.
    28b2:	0e 94 27 11 	call	0x224e	; 0x224e <uiStateMachine>
    28b6:	ef cf       	rjmp	.-34     	; 0x2896 <main+0xac>
        //  specified by the character that sends us there has been completed-
        //  there's no bailing out of that process. Yet.
      }
      // Otherwise, draw the character. lcdDrawChar also handles backspace,
      //   carriage return and new line.
      else if (((bufferChar >= ' ') && (bufferChar <= '~')) ||
    28b8:	90 ee       	ldi	r25, 0xE0	; 224
    28ba:	98 0f       	add	r25, r24
    28bc:	9f 35       	cpi	r25, 0x5F	; 95
    28be:	20 f0       	brcs	.+8      	; 0x28c8 <main+0xde>
    28c0:	8d 30       	cpi	r24, 0x0D	; 13
    28c2:	11 f0       	breq	.+4      	; 0x28c8 <main+0xde>
               (bufferChar == '\r') ||  // Newline.
    28c4:	88 30       	cpi	r24, 0x08	; 8
    28c6:	39 f7       	brne	.-50     	; 0x2896 <main+0xac>
               (bufferChar == '\b') )   // Backspace.
        lcdDrawChar(bufferChar);
    28c8:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <lcdDrawChar>
    28cc:	e4 cf       	rjmp	.-56     	; 0x2896 <main+0xac>

000028ce <__udivmodqi4>:
    28ce:	99 1b       	sub	r25, r25
    28d0:	79 e0       	ldi	r23, 0x09	; 9
    28d2:	04 c0       	rjmp	.+8      	; 0x28dc <__udivmodqi4_ep>

000028d4 <__udivmodqi4_loop>:
    28d4:	99 1f       	adc	r25, r25
    28d6:	96 17       	cp	r25, r22
    28d8:	08 f0       	brcs	.+2      	; 0x28dc <__udivmodqi4_ep>
    28da:	96 1b       	sub	r25, r22

000028dc <__udivmodqi4_ep>:
    28dc:	88 1f       	adc	r24, r24
    28de:	7a 95       	dec	r23
    28e0:	c9 f7       	brne	.-14     	; 0x28d4 <__udivmodqi4_loop>
    28e2:	80 95       	com	r24
    28e4:	08 95       	ret

000028e6 <__tablejump2__>:
    28e6:	ee 0f       	add	r30, r30
    28e8:	ff 1f       	adc	r31, r31

000028ea <__tablejump__>:
    28ea:	05 90       	lpm	r0, Z+
    28ec:	f4 91       	lpm	r31, Z
    28ee:	e0 2d       	mov	r30, r0
    28f0:	09 94       	ijmp

000028f2 <strcpy_P>:
    28f2:	fb 01       	movw	r30, r22
    28f4:	dc 01       	movw	r26, r24
    28f6:	05 90       	lpm	r0, Z+
    28f8:	0d 92       	st	X+, r0
    28fa:	00 20       	and	r0, r0
    28fc:	e1 f7       	brne	.-8      	; 0x28f6 <strcpy_P+0x4>
    28fe:	08 95       	ret

00002900 <__eerd_byte_m168>:
    2900:	f9 99       	sbic	0x1f, 1	; 31
    2902:	fe cf       	rjmp	.-4      	; 0x2900 <__eerd_byte_m168>
    2904:	92 bd       	out	0x22, r25	; 34
    2906:	81 bd       	out	0x21, r24	; 33
    2908:	f8 9a       	sbi	0x1f, 0	; 31
    290a:	99 27       	eor	r25, r25
    290c:	80 b5       	in	r24, 0x20	; 32
    290e:	08 95       	ret

00002910 <__eewr_byte_m168>:
    2910:	26 2f       	mov	r18, r22

00002912 <__eewr_r18_m168>:
    2912:	f9 99       	sbic	0x1f, 1	; 31
    2914:	fe cf       	rjmp	.-4      	; 0x2912 <__eewr_r18_m168>
    2916:	1f ba       	out	0x1f, r1	; 31
    2918:	92 bd       	out	0x22, r25	; 34
    291a:	81 bd       	out	0x21, r24	; 33
    291c:	20 bd       	out	0x20, r18	; 32
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	fa 9a       	sbi	0x1f, 2	; 31
    2924:	f9 9a       	sbi	0x1f, 1	; 31
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	01 96       	adiw	r24, 0x01	; 1
    292a:	08 95       	ret

0000292c <_exit>:
    292c:	f8 94       	cli

0000292e <__stop_program>:
    292e:	ff cf       	rjmp	.-2      	; 0x292e <__stop_program>
